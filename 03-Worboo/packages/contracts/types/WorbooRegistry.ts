/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface WorbooRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "MAX_GUESSES" | "getProfile" | "recordGame" | "register"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "GameRecorded" | "PlayerRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_GUESSES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordGame",
    values: [BigNumberish, BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_GUESSES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recordGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
}

export namespace GameRecordedEvent {
  export type InputTuple = [
    player: AddressLike,
    dayId: BigNumberish,
    wordHash: BytesLike,
    guesses: BigNumberish,
    victory: boolean,
    streak: BigNumberish,
    totalGames: BigNumberish,
    totalWins: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    dayId: bigint,
    wordHash: string,
    guesses: bigint,
    victory: boolean,
    streak: bigint,
    totalGames: bigint,
    totalWins: bigint
  ];
  export interface OutputObject {
    player: string;
    dayId: bigint;
    wordHash: string;
    guesses: bigint;
    victory: boolean;
    streak: bigint;
    totalGames: bigint;
    totalWins: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WorbooRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): WorbooRegistry;
  waitForDeployment(): Promise<this>;

  interface: WorbooRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_GUESSES: TypedContractMethod<[], [bigint], "view">;

  getProfile: TypedContractMethod<
    [player: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint] & {
        isRegistered: boolean;
        totalGames: bigint;
        totalWins: bigint;
        currentStreak: bigint;
        lastDayId: bigint;
        lastSubmissionAt: bigint;
      }
    ],
    "view"
  >;

  recordGame: TypedContractMethod<
    [
      dayId: BigNumberish,
      wordHash: BytesLike,
      guesses: BigNumberish,
      victory: boolean
    ],
    [void],
    "nonpayable"
  >;

  register: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_GUESSES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [player: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint] & {
        isRegistered: boolean;
        totalGames: bigint;
        totalWins: bigint;
        currentStreak: bigint;
        lastDayId: bigint;
        lastSubmissionAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordGame"
  ): TypedContractMethod<
    [
      dayId: BigNumberish,
      wordHash: BytesLike,
      guesses: BigNumberish,
      victory: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "GameRecorded"
  ): TypedContractEvent<
    GameRecordedEvent.InputTuple,
    GameRecordedEvent.OutputTuple,
    GameRecordedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;

  filters: {
    "GameRecorded(address,uint64,bytes32,uint8,bool,uint64,uint64,uint64)": TypedContractEvent<
      GameRecordedEvent.InputTuple,
      GameRecordedEvent.OutputTuple,
      GameRecordedEvent.OutputObject
    >;
    GameRecorded: TypedContractEvent<
      GameRecordedEvent.InputTuple,
      GameRecordedEvent.OutputTuple,
      GameRecordedEvent.OutputObject
    >;

    "PlayerRegistered(address)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
  };
}
