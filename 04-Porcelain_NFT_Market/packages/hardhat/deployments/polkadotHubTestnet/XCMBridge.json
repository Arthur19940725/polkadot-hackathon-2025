{
  "address": "0x15dEBed7142159A331EBEa55bD48994B34F0c473",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "ChainSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "ContractAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationChainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "NFTLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "NFTUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum XCMBridge.MessageType",
          "name": "messageType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "sourceChainId",
          "type": "uint32"
        }
      ],
      "name": "XCMMessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum XCMBridge.MessageType",
          "name": "messageType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationChainId",
          "type": "uint32"
        }
      ],
      "name": "XCMMessageSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MOONBASE_ALPHA_CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLKADOT_HUB_CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "crossChainNFTs",
      "outputs": [
        {
          "internalType": "address",
          "name": "originalContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "originalTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "originalOwner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "sourceChainId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "destinationChainId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getCrossChainNFT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "originalContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "originalTokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originalOwner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "sourceChainId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationChainId",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isLocked",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct XCMBridge.CrossChainNFT",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getXCMMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum XCMBridge.MessageType",
              "name": "messageType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "sourceChainId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationChainId",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "messageHash",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "processed",
              "type": "bool"
            }
          ],
          "internalType": "struct XCMBridge.XCMMessage",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "destinationChainId",
          "type": "uint32"
        }
      ],
      "name": "lockNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "enum XCMBridge.MessageType",
          "name": "messageType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "sourceChainId",
          "type": "uint32"
        }
      ],
      "name": "processXCMMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "setChainSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "setContractAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "supportedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "unlockNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "xcmMessages",
      "outputs": [
        {
          "internalType": "enum XCMBridge.MessageType",
          "name": "messageType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "sourceChainId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "destinationChainId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "processed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x70d58498a29f35440298764fae49d21f3ae1a9749f2bee484e367523a109bc45",
  "receipt": {
    "to": null,
    "from": "0x906CBCA3B02fd5BF783206883565c73A9Fc78e57",
    "contractAddress": "0x15dEBed7142159A331EBEa55bD48994B34F0c473",
    "transactionIndex": 2,
    "gasUsed": "5707398620",
    "logsBloom": "0x
    "blockHash": "0x4748505e678fb11e7e796ef12dc87cfe40b718f4f500662ef675a8b55bf27018",
    "transactionHash": "0x70d58498a29f35440298764fae49d21f3ae1a9749f2bee484e367523a109bc45",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 1913303,
        "transactionHash": "0x70d58498a29f35440298764fae49d21f3ae1a9749f2bee484e367523a109bc45",
        "address": "0x15dEBed7142159A331EBEa55bD48994B34F0c473",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000906cbca3b02fd5bf783206883565c73a9fc78e57"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x4748505e678fb11e7e796ef12dc87cfe40b718f4f500662ef675a8b55bf27018"
      }
    ],
    "blockNumber": 1913303,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bc6d7f8aa63b13844b1d59e454e1afc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"ChainSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"ContractAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"NFTLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"NFTUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum XCMBridge.MessageType\",\"name\":\"messageType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"}],\"name\":\"XCMMessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum XCMBridge.MessageType\",\"name\":\"messageType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"}],\"name\":\"XCMMessageSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MOONBASE_ALPHA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLKADOT_HUB_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"crossChainNFTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"originalContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"getCrossChainNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"originalContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct XCMBridge.CrossChainNFT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"getXCMMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"enum XCMBridge.MessageType\",\"name\":\"messageType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"internalType\":\"struct XCMBridge.XCMMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"}],\"name\":\"lockNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum XCMBridge.MessageType\",\"name\":\"messageType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"}],\"name\":\"processXCMMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"setChainSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setContractAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"unlockNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"xcmMessages\",\"outputs\":[{\"internalType\":\"enum XCMBridge.MessageType\",\"name\":\"messageType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"processed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Cross-chain NFT bridge contract for Polkadot XCM integration Handles NFT locking/unlocking and cross-chain message processing\",\"kind\":\"dev\",\"methods\":{\"emergencyWithdraw(address,uint256,address)\":{\"details\":\"Emergency withdrawal function (only owner)\",\"params\":{\"nftContract\":\"NFT contract address\",\"to\":\"Recipient address\",\"tokenId\":\"Token ID\"}},\"getCrossChainNFT(bytes32)\":{\"details\":\"Get cross-chain NFT information\",\"params\":{\"messageHash\":\"Message hash\"},\"returns\":{\"_0\":\"CrossChainNFT information\"}},\"getXCMMessage(bytes32)\":{\"details\":\"Get XCM message information\",\"params\":{\"messageHash\":\"Message hash\"},\"returns\":{\"_0\":\"XCMMessage information\"}},\"lockNFT(address,uint256,uint32)\":{\"details\":\"Lock NFT for cross-chain transfer\",\"params\":{\"destinationChainId\":\"Target chain ID\",\"nftContract\":\"Address of the NFT contract\",\"tokenId\":\"Token ID to lock\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Handle NFT reception\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Emergency pause function\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processXCMMessage(bytes32,uint8,address,uint256,address,uint32)\":{\"details\":\"Process incoming XCM message\",\"params\":{\"messageHash\":\"Hash of the XCM message\",\"messageType\":\"Type of XCM message\",\"nftContract\":\"NFT contract address\",\"recipient\":\"Recipient address\",\"sourceChainId\":\"Source chain ID\",\"tokenId\":\"Token ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setChainSupport(uint32,bool)\":{\"details\":\"Set chain support status\",\"params\":{\"chainId\":\"Chain ID\",\"supported\":\"Support status\"}},\"setContractAuthorization(address,bool)\":{\"details\":\"Authorize NFT contract for cross-chain transfers\",\"params\":{\"authorized\":\"Authorization status\",\"nftContract\":\"Address of the NFT contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockNFT(bytes32)\":{\"details\":\"Unlock NFT after cross-chain transfer completion\",\"params\":{\"messageHash\":\"Hash of the original lock message\"}},\"unpause()\":{\"details\":\"Unpause function\"}},\"title\":\"XCMBridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/XCMBridge.sol\":\"XCMBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/XCMBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/**\\n * @title XCMBridge\\n * @dev Cross-chain NFT bridge contract for Polkadot XCM integration\\n * Handles NFT locking/unlocking and cross-chain message processing\\n */\\ncontract XCMBridge is IERC721Receiver, Ownable, ReentrancyGuard, Pausable {\\n    // XCM message types\\n    enum MessageType {\\n        LOCK_NFT,\\n        UNLOCK_NFT,\\n        MINT_WRAPPED_NFT,\\n        BURN_WRAPPED_NFT\\n    }\\n\\n    // Cross-chain NFT information\\n    struct CrossChainNFT {\\n        address originalContract;\\n        uint256 originalTokenId;\\n        address originalOwner;\\n        uint32 sourceChainId;\\n        uint32 destinationChainId;\\n        bool isLocked;\\n        uint256 timestamp;\\n    }\\n\\n    // XCM message structure\\n    struct XCMMessage {\\n        MessageType messageType;\\n        address nftContract;\\n        uint256 tokenId;\\n        address recipient;\\n        uint32 sourceChainId;\\n        uint32 destinationChainId;\\n        bytes32 messageHash;\\n        bool processed;\\n    }\\n\\n    // Chain ID mappings\\n    uint32 public constant POLKADOT_HUB_CHAIN_ID = 420420422;\\n    uint32 public constant MOONBASE_ALPHA_CHAIN_ID = 1287;\\n\\n    // State variables\\n    mapping(bytes32 => CrossChainNFT) public crossChainNFTs;\\n    mapping(bytes32 => XCMMessage) public xcmMessages;\\n    mapping(address => bool) public authorizedContracts;\\n    mapping(uint32 => bool) public supportedChains;\\n\\n    // Events\\n    event NFTLocked(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        uint32 destinationChainId,\\n        bytes32 messageHash\\n    );\\n\\n    event NFTUnlocked(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        bytes32 messageHash\\n    );\\n\\n    event XCMMessageSent(\\n        bytes32 indexed messageHash,\\n        MessageType messageType,\\n        uint32 destinationChainId\\n    );\\n\\n    event XCMMessageReceived(\\n        bytes32 indexed messageHash,\\n        MessageType messageType,\\n        uint32 sourceChainId\\n    );\\n\\n    event ChainSupported(uint32 chainId, bool supported);\\n    event ContractAuthorized(address indexed nftContract, bool authorized);\\n\\n    constructor() {\\n        // Initialize supported chains\\n        supportedChains[POLKADOT_HUB_CHAIN_ID] = true;\\n        supportedChains[MOONBASE_ALPHA_CHAIN_ID] = true;\\n    }\\n\\n    /**\\n     * @dev Lock NFT for cross-chain transfer\\n     * @param nftContract Address of the NFT contract\\n     * @param tokenId Token ID to lock\\n     * @param destinationChainId Target chain ID\\n     */\\n    function lockNFT(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint32 destinationChainId\\n    ) external nonReentrant whenNotPaused {\\n        require(authorizedContracts[nftContract], \\\"Contract not authorized\\\");\\n        require(supportedChains[destinationChainId], \\\"Chain not supported\\\");\\n        require(\\n            IERC721(nftContract).ownerOf(tokenId) == msg.sender,\\n            \\\"Not token owner\\\"\\n        );\\n\\n        // Generate unique message hash\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                nftContract,\\n                tokenId,\\n                msg.sender,\\n                block.chainid,\\n                destinationChainId,\\n                block.timestamp\\n            )\\n        );\\n\\n        // Transfer NFT to bridge contract\\n        IERC721(nftContract).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenId\\n        );\\n\\n        // Store cross-chain NFT information\\n        crossChainNFTs[messageHash] = CrossChainNFT({\\n            originalContract: nftContract,\\n            originalTokenId: tokenId,\\n            originalOwner: msg.sender,\\n            sourceChainId: uint32(block.chainid),\\n            destinationChainId: destinationChainId,\\n            isLocked: true,\\n            timestamp: block.timestamp\\n        });\\n\\n        // Create XCM message\\n        xcmMessages[messageHash] = XCMMessage({\\n            messageType: MessageType.LOCK_NFT,\\n            nftContract: nftContract,\\n            tokenId: tokenId,\\n            recipient: msg.sender,\\n            sourceChainId: uint32(block.chainid),\\n            destinationChainId: destinationChainId,\\n            messageHash: messageHash,\\n            processed: false\\n        });\\n\\n        emit NFTLocked(nftContract, tokenId, msg.sender, destinationChainId, messageHash);\\n        emit XCMMessageSent(messageHash, MessageType.LOCK_NFT, destinationChainId);\\n    }\\n\\n    /**\\n     * @dev Unlock NFT after cross-chain transfer completion\\n     * @param messageHash Hash of the original lock message\\n     */\\n    function unlockNFT(bytes32 messageHash) external nonReentrant whenNotPaused {\\n        CrossChainNFT storage nftInfo = crossChainNFTs[messageHash];\\n        require(nftInfo.isLocked, \\\"NFT not locked\\\");\\n        require(nftInfo.originalOwner == msg.sender, \\\"Not original owner\\\");\\n\\n        // Mark as unlocked\\n        nftInfo.isLocked = false;\\n\\n        // Transfer NFT back to original owner\\n        IERC721(nftInfo.originalContract).safeTransferFrom(\\n            address(this),\\n            nftInfo.originalOwner,\\n            nftInfo.originalTokenId\\n        );\\n\\n        emit NFTUnlocked(\\n            nftInfo.originalContract,\\n            nftInfo.originalTokenId,\\n            nftInfo.originalOwner,\\n            messageHash\\n        );\\n    }\\n\\n    /**\\n     * @dev Process incoming XCM message\\n     * @param messageHash Hash of the XCM message\\n     * @param messageType Type of XCM message\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param recipient Recipient address\\n     * @param sourceChainId Source chain ID\\n     */\\n    function processXCMMessage(\\n        bytes32 messageHash,\\n        MessageType messageType,\\n        address nftContract,\\n        uint256 tokenId,\\n        address recipient,\\n        uint32 sourceChainId\\n    ) external onlyOwner {\\n        require(!xcmMessages[messageHash].processed, \\\"Message already processed\\\");\\n        require(supportedChains[sourceChainId], \\\"Source chain not supported\\\");\\n\\n        xcmMessages[messageHash] = XCMMessage({\\n            messageType: messageType,\\n            nftContract: nftContract,\\n            tokenId: tokenId,\\n            recipient: recipient,\\n            sourceChainId: sourceChainId,\\n            destinationChainId: uint32(block.chainid),\\n            messageHash: messageHash,\\n            processed: true\\n        });\\n\\n        emit XCMMessageReceived(messageHash, messageType, sourceChainId);\\n    }\\n\\n    /**\\n     * @dev Authorize NFT contract for cross-chain transfers\\n     * @param nftContract Address of the NFT contract\\n     * @param authorized Authorization status\\n     */\\n    function setContractAuthorization(\\n        address nftContract,\\n        bool authorized\\n    ) external onlyOwner {\\n        authorizedContracts[nftContract] = authorized;\\n        emit ContractAuthorized(nftContract, authorized);\\n    }\\n\\n    /**\\n     * @dev Set chain support status\\n     * @param chainId Chain ID\\n     * @param supported Support status\\n     */\\n    function setChainSupport(uint32 chainId, bool supported) external onlyOwner {\\n        supportedChains[chainId] = supported;\\n        emit ChainSupported(chainId, supported);\\n    }\\n\\n    /**\\n     * @dev Get cross-chain NFT information\\n     * @param messageHash Message hash\\n     * @return CrossChainNFT information\\n     */\\n    function getCrossChainNFT(bytes32 messageHash)\\n        external\\n        view\\n        returns (CrossChainNFT memory)\\n    {\\n        return crossChainNFTs[messageHash];\\n    }\\n\\n    /**\\n     * @dev Get XCM message information\\n     * @param messageHash Message hash\\n     * @return XCMMessage information\\n     */\\n    function getXCMMessage(bytes32 messageHash)\\n        external\\n        view\\n        returns (XCMMessage memory)\\n    {\\n        return xcmMessages[messageHash];\\n    }\\n\\n    /**\\n     * @dev Emergency pause function\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause function\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Handle NFT reception\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev Emergency withdrawal function (only owner)\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param to Recipient address\\n     */\\n    function emergencyWithdraw(\\n        address nftContract,\\n        uint256 tokenId,\\n        address to\\n    ) external onlyOwner {\\n        IERC721(nftContract).safeTransferFrom(address(this), to, tokenId);\\n    }\\n}\",\"keccak256\":\"0xe932857d48d967b175fc951ea6c4b4678d5108fb13da641b7fda226d58f365b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100905760008054336001600160a01b0319821681178355906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a3600180556001604060ff1992836002541660025563190f1b46815260066020528181208385825416179055610507815220918254161790556114a290816100968239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908163137982321461112057508063150b7a02146110ad5780631abb86b114610f79578063248514dd14610f3f5780633f4ba83a14610eaa578063551512de14610e245780635c975abb14610e01578063715018a614610db95780638456cb5914610d5e5780638da5cb5b14610d37578063a0c0ce3714610bc7578063a89a73e014610b32578063bce706d714610b13578063c5ed290314610af6578063d29e665b146108b8578063d5b9221b14610879578063f2fde38b146107c8578063f60ccc8614610751578063f6ee27b7146106d8578063f7bef2421461065a5763fdc4a91a1461010857600080fd5b346106575760603660031901126106575761012161121a565b60443563ffffffff81168103610652576101396113f6565b6101416113b2565b6001600160a01b03821683526005602052604083205460ff16156106135763ffffffff81168352600660205260ff604084205416156105d8576040516331a9108f60e11b81526024803560048301526020908290816001600160a01b0387165afa9081156105cd578491610576575b50336001600160a01b039091160361053f57604051606083811b6001600160601b0319166020830190815260243560348401523390911b605483015246606883015260e083901b6001600160e01b031916608883015242608c80840191909152825290929060c084016001600160401b038111858210176105295760408190528451909120938591906001600160a01b0384163b1561052557632142170760e11b82528290829060bf199061026c602435303360c4850161132d565b030181836001600160a01b0388165af1801561051a57610502575b5050604051610295816112e3565b60018060a01b0382168152602435602082015233604082015263ffffffff4616606082015263ffffffff83166080820152600160a08201524260c08201528385526003602052600360c0604087209260018060a01b0381511660018060a01b0319855416178455602081015160018501556002840160018060a01b0360408301511660018060a01b031982541617815561033963ffffffff6060840151168261134f565b61034d63ffffffff60808401511682611372565b60a0820151815460ff60e01b191690151560e01b60ff60e01b16179055015191015560405161037b816112fe565b84815260018060a01b0382166020820152602435604082015233606082015263ffffffff4616608082015263ffffffff831660a08201528360c08201528460e082015283855260046020526040852090805160048110156104ee5782600460e060409694610490947ffcf52a516c5105a13e7715d225090e8081472fffe4648188a8f82d1652230c8599975460ff610100600160a81b03602085015160081b1692169060018060a81b0319161717845587810151600185015561047b6002850160018060a01b0360608401511660018060a01b031982541617815561046a63ffffffff6080850151168261134f565b63ffffffff60a08401511690611372565b60c081015160038501550151151591016113a1565b82519063ffffffff8316825285602083015233917f592bb6d61f2bb9df16a802049c93a5995aa0560158c1dece8bab0e0f30aadb16856024359360018060a01b031692a463ffffffff82519160008352166020820152a26001805580f35b634e487b7160e01b87526021600452602487fd5b61050b9061131a565b610516578338610287565b8380fd5b6040513d84823e3d90fd5b8280fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b6044820152606490fd5b905060203d6020116105c6575b601f8101601f191682016001600160401b038111838210176105295760209183916040528101031261051657516001600160a01b038116810361051657386101b0565b503d610583565b6040513d86823e3d90fd5b60405162461bcd60e51b815260206004820152601360248201527210da185a5b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527610dbdb9d1c9858dd081b9bdd08185d5d1a1bdc9a5e9959604a1b6044820152606490fd5b600080fd5b80fd5b503461065757602036600319011261065757604060e091600435815260036020522060018060a01b0360ff8183541692600181015492600360028301549201549360405195865260208601528116604085015263ffffffff808260a01c1660608601528160c01c166080850152841c16151560a083015260c0820152f35b5034610657576040366003190112610657577f8c3c71aedf3488faccc5d8b353f31837995f6ce36c04f9449471680016f2adc16040610715611269565b63ffffffff61072261127c565b9161072b61128b565b16908185526006602052610741818487206113a1565b825191825215156020820152a180f35b50346106575760403660031901126106575761076b61121a565b7f3213ab8ec2ed122402f038736b41878b69ae9f61f49a7edd0666bce891d29fc9602061079661127c565b9261079f61128b565b60018060a01b031692838552600582526107bc81604087206113a1565b6040519015158152a280f35b5034610657576020366003190112610657576107e261121a565b6107ea61128b565b6001600160a01b03908116908115610825576000548260018060a01b03198216176000551660008051602061144d833981519152600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346106575760203660031901126106575760209060ff906040906001600160a01b036108a461121a565b168152600584522054166040519015158152f35b50346106575760c0366003190112610657576004356024356004811015610525576108e1611230565b6084356001600160a01b0381811692918390036106525760a4359263ffffffff8085168095036106525761091361128b565b8688526020936004855260ff600460408b20015416610ab5578589526006855260ff60408a20541615610a7357918891889360405195610952876112fe565b61095c8a88611395565b8088880192168252604087019060643582526060880194855260808801918a835260a08901938546168552604060c08b01988a8a5260e08c019a60018c52815260048d52209951906004821015610a5e5794610a33877fa4c75f3934813d3ea3822a68ad93195b7c13927a6600022ba0f52e4b799a6a7c9f9d9b979660409f9d9a9596610a3b9760049b96610a4b9e9a60ff8f5491610100600160a81b03905160081b1692169060018060a81b03191617178d555160018d015560028c0196511660018060a01b031987541617865551168461134f565b511690611372565b51600384015551151591016113a1565b610a5784518094611246565b820152a280f35b50634e487b7160e01b8f52602160045260248ffd5b60405162461bcd60e51b815260048101869052601a60248201527914dbdd5c98d94818da185a5b881b9bdd081cdd5c1c1bdc9d195960321b6044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527813595cdcd859d948185b1c9958591e481c1c9bd8d95cdcd959603a1b6044820152606490fd5b503461065757806003193601126106575760206040516105078152f35b5034610657578060031936011261065757602060405163190f1b468152f35b50346106575760203660031901126106575760406101009160043581526004602052208054600182015491600281015460ff60046003840154930154169260405194610b818660ff8416611246565b60018060a01b03809260081c16602087015260408601528116606085015263ffffffff90818160a01c16608086015260c01c1660a084015260c0830152151560e0820152f35b503461065757602036600319011261065757600435610be46113f6565b610bec6113b2565b808252600360205260408220600281019081549060ff8260e01c1615610d01576001600160a01b0382811692909190338403610cc75760ff60e01b19168455858282541660018301948554823b1561051657610c6292849283604051809681958294632142170760e11b8452306004850161132d565b03925af1801561051a57610caf575b5050817f5c923049e0611c2a757e42dd18ce8168a8546cd1fa5056c6c1785200dd5323fa926020925416935494541694604051908152a46001805580f35b610cb89061131a565b610cc3578538610c71565b8580fd5b60405162461bcd60e51b81526020600482015260126024820152712737ba1037b934b3b4b730b61037bbb732b960711b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081b1bd8dad95960921b6044820152606490fd5b5034610657578060031936011261065757546040516001600160a01b039091168152602090f35b5034610657578060031936011261065757610d7761128b565b610d7f6113b2565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b5034610657578060031936011261065757610dd261128b565b600080546001600160a01b0319811682556001600160a01b031660008051602061144d8339815191528280a380f35b5034610657578060031936011261065757602060ff600254166040519015158152f35b50346106575760603660031901126106575780610e3f61121a565b610e47611230565b90610e5061128b565b6001600160a01b031690813b15610ea6578291610e8891604051948580948193632142170760e11b835260243590306004850161132d565b03925af1801561051a57610e9a575080f35b610ea39061131a565b80f35b5050fd5b5034610657578060031936011261065757610ec361128b565b60025460ff811615610f035760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b50346106575760203660031901126106575760ff604060209263ffffffff610f65611269565b168152600684522054166040519015158152f35b5034610657576020366003190112610657576040816101009260e08351610f9f816112fe565b82815282602082015282858201528260608201528260808201528260a08201528260c082015201526004358152600460205220604051610fde816112fe565b815491610fee60ff841683611395565b602082019260018060a01b039060081c16835263ffffffff600182015492604081019384528160806002850154926060810160018060a01b0385168152838560a01c16838301528360a083019560c01c16855260ff600460038901549860c08501998a520154169760e0830198151589526040519961106e8b8551611246565b516001600160a01b0390811660208c0152905160408b015290511660608901520151166080860152511660a08401525160c083015251151560e0820152f35b5034610657576080366003190112610657576110c761121a565b506024356001600160a01b03811603610657576064356001600160401b038082116105255736602383011215610525578160040135908111610525573691016024011161065757604051630a85bd0160e11b8152602090f35b905034611216576020366003190112611216578160e09260c0836111456040956112e3565b82815282602082015282858201528260608201528260808201528260a08201520152600435815260036020522060405161117e816112e3565b60018060a01b039182815416928383526001820154916020840192835260028101549260408501928085168452606086019063ffffffff948593848860a01c16845260c0600360808b0197878b841c16895260ff60a08d019b8f1c1615158b5201549901988952604051998a525160208a015251166040880152511660608601525116608084015251151560a08301525160c0820152f35b5080fd5b600435906001600160a01b038216820361065257565b604435906001600160a01b038216820361065257565b9060048210156112535752565b634e487b7160e01b600052602160045260246000fd5b6004359063ffffffff8216820361065257565b60243590811515820361065257565b6000546001600160a01b0316330361129f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60e081019081106001600160401b0382111761052957604052565b61010081019081106001600160401b0382111761052957604052565b6001600160401b03811161052957604052565b6001600160a01b03918216815291166020820152604081019190915260600190565b805463ffffffff60a01b191660a09290921b63ffffffff60a01b16919091179055565b805463ffffffff60c01b191660c09290921b63ffffffff60c01b16919091179055565b60048210156112535752565b9060ff801983541691151516179055565b60ff600254166113be57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260015414611407576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a26469706673582212206f23de2ac27bdccb205680969e03efdee152ef0ff8d70eee517c8a3ad74d327f64736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c908163137982321461112057508063150b7a02146110ad5780631abb86b114610f79578063248514dd14610f3f5780633f4ba83a14610eaa578063551512de14610e245780635c975abb14610e01578063715018a614610db95780638456cb5914610d5e5780638da5cb5b14610d37578063a0c0ce3714610bc7578063a89a73e014610b32578063bce706d714610b13578063c5ed290314610af6578063d29e665b146108b8578063d5b9221b14610879578063f2fde38b146107c8578063f60ccc8614610751578063f6ee27b7146106d8578063f7bef2421461065a5763fdc4a91a1461010857600080fd5b346106575760603660031901126106575761012161121a565b60443563ffffffff81168103610652576101396113f6565b6101416113b2565b6001600160a01b03821683526005602052604083205460ff16156106135763ffffffff81168352600660205260ff604084205416156105d8576040516331a9108f60e11b81526024803560048301526020908290816001600160a01b0387165afa9081156105cd578491610576575b50336001600160a01b039091160361053f57604051606083811b6001600160601b0319166020830190815260243560348401523390911b605483015246606883015260e083901b6001600160e01b031916608883015242608c80840191909152825290929060c084016001600160401b038111858210176105295760408190528451909120938591906001600160a01b0384163b1561052557632142170760e11b82528290829060bf199061026c602435303360c4850161132d565b030181836001600160a01b0388165af1801561051a57610502575b5050604051610295816112e3565b60018060a01b0382168152602435602082015233604082015263ffffffff4616606082015263ffffffff83166080820152600160a08201524260c08201528385526003602052600360c0604087209260018060a01b0381511660018060a01b0319855416178455602081015160018501556002840160018060a01b0360408301511660018060a01b031982541617815561033963ffffffff6060840151168261134f565b61034d63ffffffff60808401511682611372565b60a0820151815460ff60e01b191690151560e01b60ff60e01b16179055015191015560405161037b816112fe565b84815260018060a01b0382166020820152602435604082015233606082015263ffffffff4616608082015263ffffffff831660a08201528360c08201528460e082015283855260046020526040852090805160048110156104ee5782600460e060409694610490947ffcf52a516c5105a13e7715d225090e8081472fffe4648188a8f82d1652230c8599975460ff610100600160a81b03602085015160081b1692169060018060a81b0319161717845587810151600185015561047b6002850160018060a01b0360608401511660018060a01b031982541617815561046a63ffffffff6080850151168261134f565b63ffffffff60a08401511690611372565b60c081015160038501550151151591016113a1565b82519063ffffffff8316825285602083015233917f592bb6d61f2bb9df16a802049c93a5995aa0560158c1dece8bab0e0f30aadb16856024359360018060a01b031692a463ffffffff82519160008352166020820152a26001805580f35b634e487b7160e01b87526021600452602487fd5b61050b9061131a565b610516578338610287565b8380fd5b6040513d84823e3d90fd5b8280fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b6044820152606490fd5b905060203d6020116105c6575b601f8101601f191682016001600160401b038111838210176105295760209183916040528101031261051657516001600160a01b038116810361051657386101b0565b503d610583565b6040513d86823e3d90fd5b60405162461bcd60e51b815260206004820152601360248201527210da185a5b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527610dbdb9d1c9858dd081b9bdd08185d5d1a1bdc9a5e9959604a1b6044820152606490fd5b600080fd5b80fd5b503461065757602036600319011261065757604060e091600435815260036020522060018060a01b0360ff8183541692600181015492600360028301549201549360405195865260208601528116604085015263ffffffff808260a01c1660608601528160c01c166080850152841c16151560a083015260c0820152f35b5034610657576040366003190112610657577f8c3c71aedf3488faccc5d8b353f31837995f6ce36c04f9449471680016f2adc16040610715611269565b63ffffffff61072261127c565b9161072b61128b565b16908185526006602052610741818487206113a1565b825191825215156020820152a180f35b50346106575760403660031901126106575761076b61121a565b7f3213ab8ec2ed122402f038736b41878b69ae9f61f49a7edd0666bce891d29fc9602061079661127c565b9261079f61128b565b60018060a01b031692838552600582526107bc81604087206113a1565b6040519015158152a280f35b5034610657576020366003190112610657576107e261121a565b6107ea61128b565b6001600160a01b03908116908115610825576000548260018060a01b03198216176000551660008051602061144d833981519152600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346106575760203660031901126106575760209060ff906040906001600160a01b036108a461121a565b168152600584522054166040519015158152f35b50346106575760c0366003190112610657576004356024356004811015610525576108e1611230565b6084356001600160a01b0381811692918390036106525760a4359263ffffffff8085168095036106525761091361128b565b8688526020936004855260ff600460408b20015416610ab5578589526006855260ff60408a20541615610a7357918891889360405195610952876112fe565b61095c8a88611395565b8088880192168252604087019060643582526060880194855260808801918a835260a08901938546168552604060c08b01988a8a5260e08c019a60018c52815260048d52209951906004821015610a5e5794610a33877fa4c75f3934813d3ea3822a68ad93195b7c13927a6600022ba0f52e4b799a6a7c9f9d9b979660409f9d9a9596610a3b9760049b96610a4b9e9a60ff8f5491610100600160a81b03905160081b1692169060018060a81b03191617178d555160018d015560028c0196511660018060a01b031987541617865551168461134f565b511690611372565b51600384015551151591016113a1565b610a5784518094611246565b820152a280f35b50634e487b7160e01b8f52602160045260248ffd5b60405162461bcd60e51b815260048101869052601a60248201527914dbdd5c98d94818da185a5b881b9bdd081cdd5c1c1bdc9d195960321b6044820152606490fd5b60405162461bcd60e51b815260048101869052601960248201527813595cdcd859d948185b1c9958591e481c1c9bd8d95cdcd959603a1b6044820152606490fd5b503461065757806003193601126106575760206040516105078152f35b5034610657578060031936011261065757602060405163190f1b468152f35b50346106575760203660031901126106575760406101009160043581526004602052208054600182015491600281015460ff60046003840154930154169260405194610b818660ff8416611246565b60018060a01b03809260081c16602087015260408601528116606085015263ffffffff90818160a01c16608086015260c01c1660a084015260c0830152151560e0820152f35b503461065757602036600319011261065757600435610be46113f6565b610bec6113b2565b808252600360205260408220600281019081549060ff8260e01c1615610d01576001600160a01b0382811692909190338403610cc75760ff60e01b19168455858282541660018301948554823b1561051657610c6292849283604051809681958294632142170760e11b8452306004850161132d565b03925af1801561051a57610caf575b5050817f5c923049e0611c2a757e42dd18ce8168a8546cd1fa5056c6c1785200dd5323fa926020925416935494541694604051908152a46001805580f35b610cb89061131a565b610cc3578538610c71565b8580fd5b60405162461bcd60e51b81526020600482015260126024820152712737ba1037b934b3b4b730b61037bbb732b960711b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d139195081b9bdd081b1bd8dad95960921b6044820152606490fd5b5034610657578060031936011261065757546040516001600160a01b039091168152602090f35b5034610657578060031936011261065757610d7761128b565b610d7f6113b2565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b5034610657578060031936011261065757610dd261128b565b600080546001600160a01b0319811682556001600160a01b031660008051602061144d8339815191528280a380f35b5034610657578060031936011261065757602060ff600254166040519015158152f35b50346106575760603660031901126106575780610e3f61121a565b610e47611230565b90610e5061128b565b6001600160a01b031690813b15610ea6578291610e8891604051948580948193632142170760e11b835260243590306004850161132d565b03925af1801561051a57610e9a575080f35b610ea39061131a565b80f35b5050fd5b5034610657578060031936011261065757610ec361128b565b60025460ff811615610f035760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b50346106575760203660031901126106575760ff604060209263ffffffff610f65611269565b168152600684522054166040519015158152f35b5034610657576020366003190112610657576040816101009260e08351610f9f816112fe565b82815282602082015282858201528260608201528260808201528260a08201528260c082015201526004358152600460205220604051610fde816112fe565b815491610fee60ff841683611395565b602082019260018060a01b039060081c16835263ffffffff600182015492604081019384528160806002850154926060810160018060a01b0385168152838560a01c16838301528360a083019560c01c16855260ff600460038901549860c08501998a520154169760e0830198151589526040519961106e8b8551611246565b516001600160a01b0390811660208c0152905160408b015290511660608901520151166080860152511660a08401525160c083015251151560e0820152f35b5034610657576080366003190112610657576110c761121a565b506024356001600160a01b03811603610657576064356001600160401b038082116105255736602383011215610525578160040135908111610525573691016024011161065757604051630a85bd0160e11b8152602090f35b905034611216576020366003190112611216578160e09260c0836111456040956112e3565b82815282602082015282858201528260608201528260808201528260a08201520152600435815260036020522060405161117e816112e3565b60018060a01b039182815416928383526001820154916020840192835260028101549260408501928085168452606086019063ffffffff948593848860a01c16845260c0600360808b0197878b841c16895260ff60a08d019b8f1c1615158b5201549901988952604051998a525160208a015251166040880152511660608601525116608084015251151560a08301525160c0820152f35b5080fd5b600435906001600160a01b038216820361065257565b604435906001600160a01b038216820361065257565b9060048210156112535752565b634e487b7160e01b600052602160045260246000fd5b6004359063ffffffff8216820361065257565b60243590811515820361065257565b6000546001600160a01b0316330361129f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60e081019081106001600160401b0382111761052957604052565b61010081019081106001600160401b0382111761052957604052565b6001600160401b03811161052957604052565b6001600160a01b03918216815291166020820152604081019190915260600190565b805463ffffffff60a01b191660a09290921b63ffffffff60a01b16919091179055565b805463ffffffff60c01b191660c09290921b63ffffffff60c01b16919091179055565b60048210156112535752565b9060ff801983541691151516179055565b60ff600254166113be57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260015414611407576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a26469706673582212206f23de2ac27bdccb205680969e03efdee152ef0ff8d70eee517c8a3ad74d327f64736f6c63430008110033",
  "devdoc": {
    "details": "Cross-chain NFT bridge contract for Polkadot XCM integration Handles NFT locking/unlocking and cross-chain message processing",
    "kind": "dev",
    "methods": {
      "emergencyWithdraw(address,uint256,address)": {
        "details": "Emergency withdrawal function (only owner)",
        "params": {
          "nftContract": "NFT contract address",
          "to": "Recipient address",
          "tokenId": "Token ID"
        }
      },
      "getCrossChainNFT(bytes32)": {
        "details": "Get cross-chain NFT information",
        "params": {
          "messageHash": "Message hash"
        },
        "returns": {
          "_0": "CrossChainNFT information"
        }
      },
      "getXCMMessage(bytes32)": {
        "details": "Get XCM message information",
        "params": {
          "messageHash": "Message hash"
        },
        "returns": {
          "_0": "XCMMessage information"
        }
      },
      "lockNFT(address,uint256,uint32)": {
        "details": "Lock NFT for cross-chain transfer",
        "params": {
          "destinationChainId": "Target chain ID",
          "nftContract": "Address of the NFT contract",
          "tokenId": "Token ID to lock"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Handle NFT reception"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Emergency pause function"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "processXCMMessage(bytes32,uint8,address,uint256,address,uint32)": {
        "details": "Process incoming XCM message",
        "params": {
          "messageHash": "Hash of the XCM message",
          "messageType": "Type of XCM message",
          "nftContract": "NFT contract address",
          "recipient": "Recipient address",
          "sourceChainId": "Source chain ID",
          "tokenId": "Token ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setChainSupport(uint32,bool)": {
        "details": "Set chain support status",
        "params": {
          "chainId": "Chain ID",
          "supported": "Support status"
        }
      },
      "setContractAuthorization(address,bool)": {
        "details": "Authorize NFT contract for cross-chain transfers",
        "params": {
          "authorized": "Authorization status",
          "nftContract": "Address of the NFT contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockNFT(bytes32)": {
        "details": "Unlock NFT after cross-chain transfer completion",
        "params": {
          "messageHash": "Hash of the original lock message"
        }
      },
      "unpause()": {
        "details": "Unpause function"
      }
    },
    "title": "XCMBridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/XCMBridge.sol:XCMBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 278,
        "contract": "contracts/XCMBridge.sol:XCMBridge",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 177,
        "contract": "contracts/XCMBridge.sol:XCMBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 5529,
        "contract": "contracts/XCMBridge.sol:XCMBridge",
        "label": "crossChainNFTs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(CrossChainNFT)5500_storage)"
      },
      {
        "astId": 5534,
        "contract": "contracts/XCMBridge.sol:XCMBridge",
        "label": "xcmMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(XCMMessage)5518_storage)"
      },
      {
        "astId": 5538,
        "contract": "contracts/XCMBridge.sol:XCMBridge",
        "label": "authorizedContracts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5542,
        "contract": "contracts/XCMBridge.sol:XCMBridge",
        "label": "supportedChains",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(MessageType)5485": {
        "encoding": "inplace",
        "label": "enum XCMBridge.MessageType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(CrossChainNFT)5500_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct XCMBridge.CrossChainNFT)",
        "numberOfBytes": "32",
        "value": "t_struct(CrossChainNFT)5500_storage"
      },
      "t_mapping(t_bytes32,t_struct(XCMMessage)5518_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct XCMBridge.XCMMessage)",
        "numberOfBytes": "32",
        "value": "t_struct(XCMMessage)5518_storage"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(CrossChainNFT)5500_storage": {
        "encoding": "inplace",
        "label": "struct XCMBridge.CrossChainNFT",
        "members": [
          {
            "astId": 5487,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "originalContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5489,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "originalTokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5491,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "originalOwner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5493,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "sourceChainId",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5495,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "destinationChainId",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5497,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "isLocked",
            "offset": 28,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 5499,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(XCMMessage)5518_storage": {
        "encoding": "inplace",
        "label": "struct XCMBridge.XCMMessage",
        "members": [
          {
            "astId": 5503,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "messageType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(MessageType)5485"
          },
          {
            "astId": 5505,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "nftContract",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5507,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5509,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "recipient",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5511,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "sourceChainId",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5513,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "destinationChainId",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 5515,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "messageHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 5517,
            "contract": "contracts/XCMBridge.sol:XCMBridge",
            "label": "processed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}