{
  "address": "0xeC3B47E3679B2D0D1Ba3AC01a52121871A358e2C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AirdropClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerFraction",
          "type": "uint256"
        }
      ],
      "name": "FractionBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "FractionForSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "FractionSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoyaltyRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "MerkleRootSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalOptions",
          "type": "uint256"
        }
      ],
      "name": "MysteryBoxCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "MysteryBoxPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "MysteryBoxStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFractions",
          "type": "uint256"
        }
      ],
      "name": "NFTFractionalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "NFTLockedForCrossChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        }
      ],
      "name": "NFTRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "NFTUnlockedFromCrossChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "NftBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NftDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expires",
          "type": "uint64"
        }
      ],
      "name": "UpdateUser",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOYALTY_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOYALTY_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "addURIToMysteryBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "uris",
          "type": "string[]"
        },
        {
          "internalType": "uint96",
          "name": "royaltyFeeNumerator",
          "type": "uint96"
        }
      ],
      "name": "batchMintItems",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyFraction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelFractionSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkClaimLoyaltyReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimLoyaltyReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_possibleURIs",
          "type": "string[]"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyFee",
          "type": "uint96"
        }
      ],
      "name": "createMysteryBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "crossChainMessages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "delistItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fractionOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "fractionalizeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fractions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isForSale",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllFractionsForSale",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isForSale",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.Fraction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllListedItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            }
          ],
          "internalType": "struct YourCollectible.NFTItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFractionsByAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isForSale",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct YourCollectible.Fraction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLoyaltyInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "holdingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "rewardClaimed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextRewardTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMintedBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMysteryBoxInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalURIs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMysteryBoxURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNFTItemByTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "tokenUri",
              "type": "string"
            }
          ],
          "internalType": "struct YourCollectible.NFTItem",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getTokenIdByMessageHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTotalFractions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isFractionalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isLockedForCrossChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isNFTFractionalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isNFTLockedForCrossChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "lockForCrossChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint96",
          "name": "royaltyFeeNumerator",
          "type": "uint96"
        }
      ],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintedBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mysteryBox",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint96",
          "name": "royaltyFee",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "uriCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mysteryBoxURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftItems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftLoyalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "holdingStartTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "rewardClaimed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseMysteryBox",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeemNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setFractionForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setMysteryBoxStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expires",
          "type": "uint64"
        }
      ],
      "name": "setUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xcmBridge",
          "type": "address"
        }
      ],
      "name": "setXCMBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalFractions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "unlockFromCrossChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateMysteryBoxPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "userExpires",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "userOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xcmBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x80658c21597ab189c9e9fd2267f3b967a3b75958a07a1a7bc65a7f711cb7911d",
  "receipt": {
    "to": null,
    "from": "0x906CBCA3B02fd5BF783206883565c73A9Fc78e57",
    "contractAddress": "0xeC3B47E3679B2D0D1Ba3AC01a52121871A358e2C",
    "transactionIndex": 2,
    "gasUsed": "22661349790",
    "logsBloom": "0x
    "blockHash": "0x4607868d5a0d3484399785761e7c69f1fbe5416495632bcaff1e2c95cb782208",
    "transactionHash": "0x80658c21597ab189c9e9fd2267f3b967a3b75958a07a1a7bc65a7f711cb7911d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 1913298,
        "transactionHash": "0x80658c21597ab189c9e9fd2267f3b967a3b75958a07a1a7bc65a7f711cb7911d",
        "address": "0xeC3B47E3679B2D0D1Ba3AC01a52121871A358e2C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000906cbca3b02fd5bf783206883565c73a9fc78e57"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x4607868d5a0d3484399785761e7c69f1fbe5416495632bcaff1e2c95cb782208"
      }
    ],
    "blockNumber": 1913298,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bc6d7f8aa63b13844b1d59e454e1afc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AirdropClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerFraction\",\"type\":\"uint256\"}],\"name\":\"FractionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"FractionForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FractionSaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoyaltyRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalOptions\",\"type\":\"uint256\"}],\"name\":\"MysteryBoxCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"MysteryBoxPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"MysteryBoxStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFractions\",\"type\":\"uint256\"}],\"name\":\"NFTFractionalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"NFTLockedForCrossChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"NFTRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"NFTUnlockedFromCrossChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"name\":\"NftBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NftDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"UpdateUser\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOYALTY_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOYALTY_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addURIToMysteryBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"}],\"name\":\"batchMintItems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyFraction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelFractionSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkClaimLoyaltyReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimLoyaltyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_possibleURIs\",\"type\":\"string[]\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFee\",\"type\":\"uint96\"}],\"name\":\"createMysteryBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"crossChainMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"delistItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fractionOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"fractionalizeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fractions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFractionsForSale\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.Fraction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllListedItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"internalType\":\"struct YourCollectible.NFTItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFractionsByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct YourCollectible.Fraction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoyaltyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"holdingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMintedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMysteryBoxInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalURIs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMysteryBoxURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTItemByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"internalType\":\"struct YourCollectible.NFTItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenIdByMessageHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalFractions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFractionalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isLockedForCrossChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isNFTFractionalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isNFTLockedForCrossChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"lockForCrossChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFeeNumerator\",\"type\":\"uint96\"}],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mysteryBox\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFee\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"uriCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mysteryBoxURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftLoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"holdingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseMysteryBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setFractionForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setMysteryBoxStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expires\",\"type\":\"uint64\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xcmBridge\",\"type\":\"address\"}],\"name\":\"setXCMBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalFractions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"unlockFromCrossChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updateMysteryBoxPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"userExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"userOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xcmBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getTokenIdByMessageHash(bytes32)\":{\"details\":\"Get token ID by XCM message hash\",\"params\":{\"messageHash\":\"XCM message hash\"},\"returns\":{\"_0\":\"uint256 Token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isNFTLockedForCrossChain(uint256)\":{\"details\":\"Check if NFT is locked for cross-chain transfer\",\"params\":{\"tokenId\":\"Token ID to check\"},\"returns\":{\"_0\":\"bool Whether the NFT is locked\"}},\"lockForCrossChain(uint256,bytes32)\":{\"details\":\"Lock NFT for cross-chain transfer (only XCM Bridge)\",\"params\":{\"messageHash\":\"XCM message hash\",\"tokenId\":\"Token ID to lock\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setUser(uint256,address,uint64)\":{\"params\":{\"expires\":\"\\u7528\\u6237\\u6743\\u9650\\u7684\\u8fc7\\u671f\\u65f6\\u95f4\\u6233\",\"tokenId\":\"\\u8981\\u8bbe\\u7f6e\\u7528\\u6237\\u7684NFT\\u7684ID\",\"user\":\"\\u7528\\u6237\\u7684\\u5730\\u5740\"}},\"setXCMBridge(address)\":{\"details\":\"Set XCM Bridge contract address (only owner)\",\"params\":{\"_xcmBridge\":\"XCM Bridge contract address\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockFromCrossChain(uint256,bytes32)\":{\"details\":\"Unlock NFT from cross-chain transfer (only XCM Bridge)\",\"params\":{\"messageHash\":\"XCM message hash\",\"tokenId\":\"Token ID to unlock\"}},\"userExpires(uint256)\":{\"params\":{\"tokenId\":\"\\u8981\\u67e5\\u8be2\\u7684NFT\\u7684ID\"},\"returns\":{\"_0\":\"\\u7528\\u6237\\u6743\\u9650\\u7684\\u8fc7\\u671f\\u65f6\\u95f4\\u6233\"}},\"userOf(uint256)\":{\"params\":{\"tokenId\":\"\\u8981\\u67e5\\u8be2\\u7684NFT\\u7684ID\"},\"returns\":{\"_0\":\"\\u7528\\u6237\\u7684\\u5730\\u5740\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u7528\\u6237\\u5219\\u8fd4\\u56de\\u96f6\\u5730\\u5740\"}}},\"version\":1},\"userdoc\":{\"events\":{\"UpdateUser(uint256,address,uint64)\":{\"notice\":\"\\u5f53NFT\\u7684\\u7528\\u6237\\u6216\\u8fc7\\u671f\\u65f6\\u95f4\\u88ab\\u66f4\\u65b0\\u65f6\\u89e6\\u53d1\"}},\"kind\":\"user\",\"methods\":{\"setUser(uint256,address,uint64)\":{\"notice\":\"\\u8bbe\\u7f6eNFT\\u7684\\u7528\\u6237\\u548c\\u8fc7\\u671f\\u65f6\\u95f4\"},\"userExpires(uint256)\":{\"notice\":\"\\u83b7\\u53d6NFT\\u7684\\u7528\\u6237\\u8fc7\\u671f\\u65f6\\u95f4\"},\"userOf(uint256)\":{\"notice\":\"\\u83b7\\u53d6NFT\\u7684\\u5f53\\u524d\\u7528\\u6237\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourCollectible.sol\":\"YourCollectible\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x93d24eea4e6ddbed53ef161567ae62bfd0c3aebb7b48f37e4dbeb7a937108866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x990a4133f88b07f92724903f42bb25cdaeca0cf255fb48df26568c40e7c919c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/IERC4907.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IERC4907 {    \\n    /// @notice \\u5f53NFT\\u7684\\u7528\\u6237\\u6216\\u8fc7\\u671f\\u65f6\\u95f4\\u88ab\\u66f4\\u65b0\\u65f6\\u89e6\\u53d1\\n    event UpdateUser(uint256 indexed tokenId, address indexed user, uint64 expires);\\n    \\n    /// @notice \\u8bbe\\u7f6eNFT\\u7684\\u7528\\u6237\\u548c\\u8fc7\\u671f\\u65f6\\u95f4\\n    /// @param tokenId \\u8981\\u8bbe\\u7f6e\\u7528\\u6237\\u7684NFT\\u7684ID\\n    /// @param user \\u7528\\u6237\\u7684\\u5730\\u5740\\n    /// @param expires \\u7528\\u6237\\u6743\\u9650\\u7684\\u8fc7\\u671f\\u65f6\\u95f4\\u6233\\n    function setUser(uint256 tokenId, address user, uint64 expires) external;\\n    \\n    /// @notice \\u83b7\\u53d6NFT\\u7684\\u5f53\\u524d\\u7528\\u6237\\n    /// @param tokenId \\u8981\\u67e5\\u8be2\\u7684NFT\\u7684ID\\n    /// @return \\u7528\\u6237\\u7684\\u5730\\u5740\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u7528\\u6237\\u5219\\u8fd4\\u56de\\u96f6\\u5730\\u5740\\n    function userOf(uint256 tokenId) external view returns(address);\\n    \\n    /// @notice \\u83b7\\u53d6NFT\\u7684\\u7528\\u6237\\u8fc7\\u671f\\u65f6\\u95f4\\n    /// @param tokenId \\u8981\\u67e5\\u8be2\\u7684NFT\\u7684ID\\n    /// @return \\u7528\\u6237\\u6743\\u9650\\u7684\\u8fc7\\u671f\\u65f6\\u95f4\\u6233\\n    function userExpires(uint256 tokenId) external view returns(uint256);\\n} \",\"keccak256\":\"0xeeb4ca890431c90dd8ea9b828fbbbbe90efd4364c0589039e046d91e6f4bad28\",\"license\":\"MIT\"},\"contracts/YourCollectible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2; //Do not change the solidity version as it negatively impacts submission grading\\n\\n// import \\\"hardhat/console.sol\\\";\\n// import \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\"; // \\u5b9e\\u73b0 ERC721\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\"; // \\u5b9e\\u73b0 ERC721Enumerable\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\"; // \\u5b58\\u50a8 tokenURI\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\"; // \\u5b9e\\u73b0 EIP-2981 \\u7248\\u7a0e\\u6807\\u51c6\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; // \\u7528\\u4e8e\\u63a7\\u5236\\u5408\\u7ea6\\u7684\\u6743\\u9650\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\"; // \\u7528\\u4e8e\\u751f\\u6210\\u9012\\u589e\\u7684 tokenId\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\"; // \\u9632\\u6b62\\u91cd\\u5165\\u653b\\u51fb\\nimport \\\"./IERC4907.sol\\\"; // \\u5bfc\\u5165 ERC4907 \\u63a5\\u53e3\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract YourCollectible is\\n\\tERC721,\\n\\tERC721Enumerable,\\n\\tERC721URIStorage,\\n    ERC721Royalty,\\n\\tOwnable,\\n    ReentrancyGuard,\\n    IERC4907\\n{\\n\\tusing Counters for Counters.Counter;\\n\\n\\tCounters.Counter public tokenIdCounter;\\n\\tuint256 public listingFee = 0.025 ether; // \\u4e0a\\u67b6\\u8d39\\u7528\\uff0c0.025 eth = 25000000000000000 wei\\n    // uint256 public constant LOYALTY_PERIOD = 30 days;    // \\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1\\u5468\\u671f\\uff0830\\u5929\\uff09seconds minutes hours days weeks\\n    uint256 public constant LOYALTY_PERIOD = 5 minutes;\\n    uint256 public constant LOYALTY_REWARD = 0.001 ether; // \\u6bcf\\u6b21\\u5956\\u52b1\\u91d1\\u989d\\n    bytes32 public merkleRoot; // \\u9ed8\\u514b\\u5c14\\u6811\\u6839\\n\\n    // Cross-chain support\\n    address public xcmBridge; // XCM Bridge contract address\\n    mapping(uint256 => bool) public isLockedForCrossChain; // Track cross-chain locked NFTs\\n    mapping(bytes32 => uint256) public crossChainMessages; // XCM message hash to tokenId mapping\\n\\t\\n    // NFT\\u7ed3\\u6784\\u4f53\\n\\tstruct NFTItem {\\n        uint256 tokenId; // tokenId\\n        uint256 price; // \\u4ef7\\u683c\\n        address payable owner; // \\u6301\\u6709\\u8005\\n        bool isListed; // \\u662f\\u5426\\u4e0a\\u67b6\\n        string tokenUri; // \\u5b8c\\u6574\\u7684 tokenURI\\n    }\\n\\n    // \\u788e\\u7247\\u7ed3\\u6784\\u4f53\\n    struct Fraction {\\n        uint256 amount; // \\u6301\\u6709\\u7684\\u788e\\u7247\\u6570\\u91cf\\n        bool isForSale; // \\u662f\\u5426\\u51fa\\u552e\\n        uint256 price; // \\u6bcf\\u4e2a\\u788e\\u7247\\u7684\\u5355\\u4ef7\\n    }\\n\\n    // \\u79df\\u8d41\\u7528\\u6237\\u7ed3\\u6784\\u4f53\\n    struct UserInfo {\\n        address user;   // \\u7528\\u6237\\u5730\\u5740\\n        uint64 expires; // \\u8fc7\\u671f\\u65f6\\u95f4\\u6233\\n    }\\n\\n    // \\u5fe0\\u8bda\\u5ea6\\u7ed3\\u6784\\u4f53\\n    struct LoyaltyInfo {\\n        uint256 holdingStartTime;  // NFT \\u6301\\u6709\\u5f00\\u59cb\\u65f6\\u95f4\\n        bool rewardClaimed;        // \\u662f\\u5426\\u5df2\\u9886\\u53d6\\u5956\\u52b1\\n        uint256 lastRewardTime;    // \\u4e0a\\u6b21\\u9886\\u53d6\\u5956\\u52b1\\u7684\\u65f6\\u95f4\\n    }\\n\\n    // \\u76f2\\u76d2\\u7ed3\\u6784\\u4f53\\n    struct MysteryBox {\\n        uint256 price;          // \\u76f2\\u76d2\\u4ef7\\u683c\\n        bool isActive;          // \\u76f2\\u76d2\\u662f\\u5426\\u6fc0\\u6d3b\\n        uint96 royaltyFee;      // \\u7248\\u7a0e\\u6bd4\\u4f8b\\n        uint256 uriCount;       // URI \\u603b\\u6570\\n    }\\n\\n    MysteryBox public mysteryBox;  // \\u76f2\\u76d2\\u4fe1\\u606f\\n    uint256 private nonce = 0;     // \\u7528\\u4e8e\\u751f\\u6210\\u968f\\u673a\\u6570\\n\\n    // \\u6620\\u5c04\\n\\tmapping(uint256 => NFTItem) public nftItems; // \\u5b58\\u50a8\\u6bcf\\u4e2aNFT\\u7684\\u4fe1\\u606f\\n\\tmapping(uint256 => address) public mintedBy; // \\u4fdd\\u5b58\\u6bcf\\u4e2aNFT\\u7684\\u94f8\\u9020\\u8005\\n    mapping(uint256 => bool) public isFractionalized; // \\u8bb0\\u5f55\\u662f\\u5426\\u88ab\\u788e\\u7247\\u5316\\n    mapping(uint256 => uint256) public totalFractions; // \\u6bcf\\u4e2aNFT\\u7684\\u788e\\u7247\\u603b\\u91cf\\n    mapping(uint256 => mapping(address => Fraction)) public fractions; // \\u6bcf\\u4e2aNFT\\u7684\\u788e\\u7247\\u6301\\u6709\\u4fe1\\u606f\\n    mapping(uint256 => address[]) public fractionOwners; // \\u8bb0\\u5f55\\u6bcf\\u4e2a tokenId \\u7684\\u788e\\u7247\\u6240\\u6709\\u8005\\u5730\\u5740\\n    mapping(uint256 => UserInfo) internal _users; // \\u8bb0\\u5f55\\u6bcf\\u4e2aNFT\\u7684\\u79df\\u8d41\\u7528\\u6237\\u4fe1\\u606f\\n    mapping(uint256 => LoyaltyInfo) public nftLoyalty;  // tokenId => \\u5fe0\\u8bda\\u5ea6\\u4fe1\\u606f\\n    mapping(address => bool) public hasClaimed; // \\u8bb0\\u5f55\\u5730\\u5740\\u662f\\u5426\\u5df2\\u9886\\u53d6\\u7a7a\\u6295\\n    \\n    // \\u6dfb\\u52a0\\u65b0\\u7684\\u6620\\u5c04\\u6765\\u5b58\\u50a8 URI\\n    mapping(uint256 => string) public mysteryBoxURIs;  // index => URI\\n\\n    // Cross-chain events\\n    event NFTLockedForCrossChain(uint256 indexed tokenId, address indexed owner, bytes32 messageHash);\\n    event NFTUnlockedFromCrossChain(uint256 indexed tokenId, address indexed owner, bytes32 messageHash);\\n\\n    // \\u4e8b\\u4ef6\\n    event NftListed(\\n        uint256 indexed tokenId,\\n        address indexed seller,\\n        uint256 price\\n    );\\n    event NftBought(uint256 indexed tokenId, address indexed seller, address indexed buyer, uint256 price, address royaltyReceiver, uint256 royaltyAmount);\\n    event NftDelisted(uint256 indexed tokenId, address indexed owner);\\n    event NFTFractionalized(uint256 indexed tokenId, uint256 totalFractions);\\n    event FractionForSale(uint256 indexed tokenId, address indexed owner, uint256 price);\\n    event FractionSaleCancelled(uint256 indexed tokenId, address indexed owner);\\n    event FractionBought(uint256 indexed tokenId, address indexed buyer, address indexed seller, uint256 amount, uint256 pricePerFraction);\\n    // event FractionTransferred(\\n    //     uint256 indexed tokenId,\\n    //     address indexed from,\\n    //     address indexed to,\\n    //     uint256 amount\\n    // );\\n    event NFTRedeemed(uint256 indexed tokenId, address indexed redeemer);\\n    event LoyaltyRewardClaimed(uint256 indexed tokenId, address indexed holder, uint256 amount);\\n    event MysteryBoxCreated(uint256 price, uint256 totalOptions);\\n    event MysteryBoxPurchased(address indexed buyer, uint256 tokenId, string uri);\\n    event MysteryBoxStatusChanged(bool isActive);\\n    // \\u7a7a\\u6295\\u4e8b\\u4ef6\\n    event AirdropClaimed(address indexed claimer, uint256 tokenId);\\n    event MerkleRootSet(bytes32 merkleRoot);\\n\\n\\tconstructor() payable ERC721(\\\"YourCollectible\\\", \\\"YCB\\\") {\\n\\t\\t\\n\\t}\\n\\n\\t// Chainlink Automation \\u6240\\u9700\\u7684\\u68c0\\u67e5\\u51fd\\u6570\\n\\t// function checkUpkeep(bytes calldata  checkData ) \\n\\t// \\texternal \\n\\t// \\tview \\n\\t// \\toverride \\n\\t// \\treturns (bool upkeepNeeded, bytes memory performData ) \\n\\t// {\\n\\t// \\tupkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\\n\\t// }\\n\\n\\t// Chainlink Automation \\u6240\\u9700\\u7684\\u6267\\u884c\\u51fd\\u6570\\n\\t// function performUpkeep(bytes calldata performData ) external override {\\n\\t// \\tif ((block.timestamp - lastTimeStamp) > interval) {\\n\\t// \\t\\tlastTimeStamp = block.timestamp;\\n\\t// \\t\\t// \\u8fd9\\u91cc\\u53ef\\u4ee5\\u6dfb\\u52a0\\u9700\\u8981\\u5b9a\\u671f\\u6267\\u884c\\u7684\\u903b\\u8f91\\n\\t// \\t}\\n\\t// }\\n\\n\\tfunction _baseURI() internal pure override returns (string memory) {\\n\\t\\treturn \\\"https://aqua-famous-koala-370.mypinata.cloud/ipfs/\\\";\\n\\t}\\n\\n\\t// \\u94f8\\u9020NFT\\n\\tfunction mintItem(address to, string memory uri, uint96 royaltyFeeNumerator) public returns (uint256) {\\n\\t\\ttokenIdCounter.increment();\\n\\t\\tuint256 tokenId = tokenIdCounter.current();\\n\\t\\t_safeMint(to, tokenId);\\n\\t\\t_setTokenURI(tokenId, uri);\\n\\n        // \\u8bbe\\u7f6e\\u7248\\u7a0e\\u4fe1\\u606f, \\u7248\\u7a0e\\u6bd4\\u4f8broyaltyFeeNumerator\\uff1a250 for 2.5%, 500 for 5%, 1000 for 10%\\n        _setTokenRoyalty(tokenId, to, royaltyFeeNumerator);\\n\\n        // \\u4fdd\\u5b58\\u94f8\\u9020\\u8005\\u4fe1\\u606f\\n\\t\\tmintedBy[tokenId] = to;\\n\\n\\t\\t// \\u5b8c\\u6574\\u7684 tokenURI\\n        string memory completeTokenURI = string(abi.encodePacked(_baseURI(), uri));\\n\\n\\t\\t// \\u521d\\u59cb\\u5316NFTItem\\u4fe1\\u606f\\n        nftItems[tokenId] = NFTItem({\\n            tokenId: tokenId,\\n            price: 0,\\n            owner: payable(to),\\n            isListed: false,\\n            tokenUri: completeTokenURI\\n        });\\n        \\n\\t\\treturn tokenId;\\n\\t}\\n\\n    // \\u6279\\u91cf\\u94f8\\u9020NFT\\n    function batchMintItems(\\n        address to,\\n        string[] memory uris,\\n        uint96 royaltyFeeNumerator\\n    ) public returns (uint256[] memory) {\\n        require(uris.length > 0, \\\"Must provide at least one URI\\\");\\n        require(uris.length <= 50, \\\"Maximum 50 NFTs can be minted at a time\\\");\\n\\n        uint256[] memory tokenIds = new uint256[](uris.length);\\n\\n        for (uint256 i = 0; i < uris.length; i++) {\\n            tokenIds[i] = mintItem(to, uris[i], royaltyFeeNumerator);\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    // \\u83b7\\u53d6NFT\\u7684\\u94f8\\u9020\\u8005\\n\\tfunction getMintedBy(uint256 tokenId) public view returns (address) {\\n\\t\\treturn mintedBy[tokenId];\\n\\t}\\n\\n\\t// \\u4e0a\\u67b6NFT\\n    function listItem(uint256 tokenId, uint256 price) public payable nonReentrant {\\n        require(msg.value == listingFee, \\\"Must pay listing fee\\\");\\n        require(ownerOf(tokenId) == msg.sender, \\\"You are not the owner\\\");\\n        require(price > 0, \\\"Price must be greater than zero\\\");\\n        require(!isFractionalized[tokenId], \\\"Cannot list fractionalized NFT\\\");\\n\\n\\t\\t// \\u5c06\\u4e0a\\u67b6\\u8d39\\u7528\\u8f6c\\u7ed9\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\n        payable(owner()).transfer(listingFee);\\n\\n        // \\u8f6c\\u79fbNFT\\u5230\\u5408\\u7ea6\\uff0c\\u5e76\\u6388\\u6743\\u5408\\u7ea6\\u53ef\\u4ee5\\u8f6c\\u79fbNFT\\n        // _transfer(msg.sender, address(this), tokenId);\\n        approve(address(this), tokenId);\\n        // setApprovalForAll(address(this), true);\\n        this.transferFrom(msg.sender, address(this), tokenId);\\n\\n        // \\u66f4\\u65b0NFT\\u4fe1\\u606f\\n        nftItems[tokenId].isListed = true;\\n        nftItems[tokenId].price = price;\\n        nftItems[tokenId].owner = payable(msg.sender);\\n\\t\\tnftItems[tokenId].tokenUri = tokenURI(tokenId);\\n\\n        emit NftListed(tokenId, msg.sender, price);\\n    }\\n\\n    // \\u4e0b\\u67b6NFT\\n    function delistItem(uint256 tokenId) public nonReentrant {\\n        NFTItem storage item = nftItems[tokenId];\\n\\n        require(item.isListed, \\\"NFT is not listed\\\");\\n        require(item.owner == msg.sender, \\\"You are not the owner\\\");\\n\\n        // \\u66f4\\u65b0NFT\\u4fe1\\u606f\\n        item.isListed = false;\\n        item.price = 0;\\n\\n        // \\u5c06NFT\\u8f6c\\u56de\\u7ed9\\u6301\\u6709\\u8005\\n        this.transferFrom(address(this), msg.sender, tokenId);\\n        \\n        emit NftDelisted(tokenId, msg.sender);\\n    }\\n\\n    // \\u8d2d\\u4e70NFT\\n    function buyItem(uint256 tokenId) public payable nonReentrant {\\n        NFTItem storage item = nftItems[tokenId];\\n        require(item.isListed, \\\"NFT is not listed\\\");\\n        require(msg.value == item.price, \\\"Incorrect price\\\");\\n\\n        item.isListed = false;\\n\\n        uint256 royaltyAmount = 0;\\n        address royaltyReceiver;\\n\\n        // \\u83b7\\u53d6\\u7248\\u7a0e\\u63a5\\u53d7\\u8005\\u5730\\u5740\\n        (royaltyReceiver, ) = royaltyInfo(tokenId, msg.value);\\n\\n        // \\u5982\\u679c\\u5f53\\u524d\\u5356\\u5bb6\\u662f\\u94f8\\u9020\\u8005\\uff0c\\u5219\\u4e0d\\u6536\\u53d6\\u7248\\u7a0e\\n        if (item.owner != royaltyReceiver) {\\n            (royaltyReceiver, royaltyAmount) = royaltyInfo(tokenId, msg.value);\\n            if (royaltyAmount > 0) {\\n                (bool royaltySuccess, ) = payable(royaltyReceiver).call{value: royaltyAmount}(\\\"\\\");\\n                require(royaltySuccess, \\\"Transfer to royalty receiver failed\\\");\\n            }\\n        }\\n\\t\\t\\n        // \\u8bb0\\u5f55\\u5356\\u5bb6\\u7684\\u5730\\u5740\\u548c\\u4ef7\\u683c\\u7528\\u4ee5\\u4e8b\\u4ef6\\u8bb0\\u5f55\\n        address payable seller = item.owner;\\n        uint256 price = item.price;\\n\\n\\t\\t// \\u66f4\\u65b0NFT\\u4fe1\\u606f\\n        item.owner = payable(msg.sender);\\n        item.price = 0;\\n\\n        // \\u8ba1\\u7b97\\u5356\\u5bb6\\u5e94\\u5f97\\u91d1\\u989d\\u5e76\\u8f6c\\u8d26\\n        uint256 sellerAmount = msg.value - royaltyAmount;\\n\\t\\t(bool success, ) = seller.call{value: sellerAmount}(\\\"\\\");\\n        require(success, \\\"Transfer to seller failed\\\");\\n\\n        // \\u5c06NFT\\u8f6c\\u79fb\\u7ed9\\u4e70\\u5bb6,\\u8c03\\u7528 transferFrom \\u51fd\\u6570\\u4e0d\\u4e3a\\\"from\\\"\\u8d26\\u6237\\n        // _transfer(address(this), msg.sender, tokenId);\\n        this.transferFrom(address(this), msg.sender, tokenId);\\n\\n        emit NftBought(tokenId, seller, msg.sender, price, royaltyReceiver, royaltyAmount);\\n    }\\n\\n\\t// \\u83b7\\u53d6\\u6240\\u6709\\u4e0a\\u67b6\\u7684NFT\\n    function getAllListedItems() public view returns (NFTItem[] memory) {\\n        uint256 totalItems = tokenIdCounter.current();\\n        uint256 listedItemCount = 0;\\n        uint256 currentIndex = 0;\\n\\n        // \\u7edf\\u8ba1\\u5f53\\u524d\\u4e0a\\u67b6\\u7684NFT\\u6570\\u91cf\\n        for (uint256 i = 1; i <= totalItems; i++) {\\n            if (nftItems[i].isListed) {\\n                listedItemCount += 1;\\n            }\\n        }\\n\\n        // \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u6570\\u7ec4\\u6765\\u5b58\\u50a8\\u4e0a\\u67b6\\u7684NFT\\n        NFTItem[] memory items = new NFTItem[](listedItemCount);\\n\\n        // \\u586b\\u5145\\u67b6\\u7684NFT\\n        for (uint256 i = 1; i <= totalItems; i++) {\\n            if (nftItems[i].isListed) {\\n                items[currentIndex] = nftItems[i];\\n                currentIndex += 1;\\n            }\\n        }\\n\\n        return items;\\n    }\\n\\t\\n\\t// \\u6839\\u636e tokenId \\u83b7\\u53d6\\u5bf9\\u5e94\\u7684NFT\\u4fe1\\u606f\\n    function getNFTItemByTokenId(uint256 tokenId) public view returns (NFTItem memory) {\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\n        return nftItems[tokenId];\\n    }\\n\\n    // \\u5408\\u7ea6\\u62e5\\u6709\\u8005\\u63d0\\u53d6\\u5408\\u7ea6\\u4e2d\\u7684\\u4e0a\\u67b6\\u8d39\\u7528\\n    function withdrawFees() public payable onlyOwner nonReentrant {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n    \\n    // \\u68c0\\u67e5NFT\\u662f\\u5426\\u5df2\\u7ecf\\u788e\\u7247\\u5316\\n    function isNFTFractionalized(uint256 tokenId) public view returns (bool) {\\n        return isFractionalized[tokenId];\\n    }\\n\\n    // \\u788e\\u7247\\u5316NFT\\n    function fractionalizeNFT(uint256 tokenId, uint256 total) public {\\n        require(ownerOf(tokenId) == msg.sender, \\\"Not the owner of this NFT\\\");\\n        require(!isFractionalized[tokenId], \\\"NFT already fractionalized\\\");\\n        require(total > 0, \\\"Total fractions must be greater than zero\\\");\\n        require(!nftItems[tokenId].isListed, \\\"NFT is currently listed, must delist before fractionalizing\\\");\\n\\n        isFractionalized[tokenId] = true;\\n        totalFractions[tokenId] = total;\\n        fractions[tokenId][msg.sender] = Fraction({\\n            amount: total,\\n            isForSale: false,\\n            price: 0\\n        }); // \\u521d\\u59cb\\u6301\\u6709\\u8005\\u62e5\\u6709\\u5168\\u90e8\\u788e\\u7247\\n        fractionOwners[tokenId].push(msg.sender);\\n\\n        emit NFTFractionalized(tokenId, total);\\n    }\\n\\n    // \\u83b7\\u53d6\\u8d26\\u6237\\u7684\\u788e\\u7247\\u6570\\u91cf\\n    function getFractionsByAddress(address account) public view returns (uint256[] memory, Fraction[] memory) {\\n        uint256 totalTokens = tokenIdCounter.current();\\n        uint256 count = 0;\\n\\n        // \\u5148\\u7edf\\u8ba1 account \\u6301\\u6709\\u7684\\u788e\\u7247\\u7684\\u6570\\u91cf\\n        for (uint256 tokenId = 1; tokenId <= totalTokens; tokenId++) {\\n            if (fractions[tokenId][account].amount > 0) {\\n                count++;\\n            }\\n        }\\n\\n        // \\u521b\\u5efa\\u6570\\u7ec4\\u4ee5\\u5b58\\u50a8\\u7ed3\\u679c\\n        uint256[] memory tokenIds = new uint256[](count);\\n        Fraction[] memory fractionss = new Fraction[](count);\\n\\n        // \\u586b\\u5145\\u7ed3\\u679c\\n        uint256 index = 0;\\n        for (uint256 tokenId = 1; tokenId <= totalTokens; tokenId++) {\\n            if (fractions[tokenId][account].amount > 0) {\\n                tokenIds[index] = tokenId;\\n                fractionss[index] = fractions[tokenId][account];\\n                index++;\\n            }\\n        }\\n\\n        return (tokenIds, fractionss);\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u788e\\u7247\\u51fa\\u552e\\n    function setFractionForSale(uint256 tokenId, uint256 price) public {\\n        require(isFractionalized[tokenId], \\\"NFT is not fractionalized\\\");\\n        Fraction storage userFraction = fractions[tokenId][msg.sender];\\n        require(userFraction.amount > 0, \\\"You do not own any fractions\\\");\\n        require(price > 0, \\\"Price must be greater than zero\\\");\\n    \\n        userFraction.isForSale = true;\\n        userFraction.price = price;\\n    \\n        emit FractionForSale(tokenId, msg.sender, price);\\n    }\\n\\n    // \\u53d6\\u6d88\\u788e\\u7247\\u51fa\\u552e\\n    function cancelFractionSale(uint256 tokenId) public {\\n        require(isFractionalized[tokenId], \\\"NFT is not fractionalized\\\");\\n        Fraction storage userFraction = fractions[tokenId][msg.sender];\\n        require(userFraction.isForSale, \\\"Fraction is not for sale\\\");\\n        require(userFraction.amount > 0, \\\"You do not own any fractions\\\");\\n    \\n        userFraction.isForSale = false;\\n        userFraction.price = 0;\\n    \\n        emit FractionSaleCancelled(tokenId, msg.sender);\\n    }\\n\\n    // \\u8d2d\\u4e70\\u788e\\u7247\\n    function buyFraction(uint256 tokenId, address seller, uint256 amount) public payable nonReentrant {\\n        require(isFractionalized[tokenId], \\\"NFT is not fractionalized\\\");\\n        Fraction storage sellerFraction = fractions[tokenId][seller];\\n        require(sellerFraction.isForSale, \\\"Fraction is not for sale\\\");\\n        require(sellerFraction.amount >= amount, \\\"Insufficient fractions for sale\\\");\\n        require(msg.value == sellerFraction.price * amount, \\\"Incorrect payment amount\\\");\\n\\n        // \\u4fdd\\u5b58\\u5f53\\u524d\\u4ef7\\u683c\\u7528\\u4e8e\\u4e8b\\u4ef6\\u53d1\\u9001\\n        uint256 pricePerFraction = sellerFraction.price;\\n    \\n        // \\u66f4\\u65b0\\u788e\\u7247\\u6301\\u6709\\u91cf\\n        sellerFraction.amount -= amount;\\n        if (sellerFraction.amount == 0) {\\n            sellerFraction.isForSale = false;\\n            sellerFraction.price = 0;\\n        }\\n    \\n        fractions[tokenId][msg.sender].amount += amount;\\n    \\n        // \\u5982\\u679c\\u4e70\\u5bb6\\u662f\\u9996\\u6b21\\u8d2d\\u4e70\\u8be5 tokenId \\u7684\\u788e\\u7247\\uff0c\\u6dfb\\u52a0\\u5230 fractionOwners\\n        if (fractions[tokenId][msg.sender].amount == amount) {\\n            fractionOwners[tokenId].push(msg.sender);\\n        }\\n    \\n        // \\u8f6c\\u79fb\\u8d44\\u91d1\\u7ed9\\u5356\\u5bb6\\n        (bool success, ) = payable(seller).call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"Transfer to seller failed\\\");\\n    \\n        emit FractionBought(tokenId, msg.sender, seller, amount, pricePerFraction);\\n    }\\n\\n    // \\u8f6c\\u8d60NFT\\u788e\\u7247\\n    function transferFraction(uint256 tokenId, address to, uint256 amount) public {\\n        require(isFractionalized[tokenId], \\\"NFT is not fractionalized\\\");\\n        Fraction storage senderFraction = fractions[tokenId][msg.sender];\\n        require(senderFraction.amount >= amount, \\\"Insufficient fractions\\\");\\n        require(!senderFraction.isForSale, \\\"Cannot transfer fractions that are for sale\\\");\\n\\n        senderFraction.amount -= amount;\\n        // \\u5982\\u679c\\u51fa\\u552e\\u72b6\\u6001\\u88ab\\u90e8\\u5206\\u6216\\u5168\\u90e8\\u8f6c\\u79fb\\n        if (senderFraction.amount == 0) {\\n            senderFraction.isForSale = false;\\n            senderFraction.price = 0;\\n        }\\n\\n        fractions[tokenId][to].amount += amount;\\n\\n        // \\u5982\\u679c\\u63a5\\u6536\\u8005\\u662f\\u9996\\u6b21\\u63a5\\u6536\\u8be5 tokenId \\u7684\\u788e\\u7247\\uff0c\\u6dfb\\u52a0\\u5230 fractionOwners\\n        if (fractions[tokenId][to].amount == amount) {\\n            fractionOwners[tokenId].push(to);\\n        }\\n\\n        // emit FractionTransferred(tokenId, msg.sender, to, amount);\\n    }\\n\\n    // \\u96c6\\u9f50\\u6240\\u6709\\u788e\\u7247\\u53ec\\u5524\\u795e\\u9f99\\n    function redeemNFT(uint256 tokenId) public {\\n        require(isFractionalized[tokenId], \\\"NFT is not fractionalized\\\");\\n        require(fractions[tokenId][msg.sender].amount == totalFractions[tokenId], \\\"Must own all fractions\\\");\\n    \\n        // \\u53d6\\u6d88\\u788e\\u7247\\u5316\\n        isFractionalized[tokenId] = false;\\n        totalFractions[tokenId] = 0;\\n        delete fractions[tokenId][msg.sender].isForSale;\\n        delete fractions[tokenId][msg.sender].price;\\n        fractions[tokenId][msg.sender].amount = 0;\\n    \\n        // \\u6e05\\u7a7a fractionOwners \\u6620\\u5c04\\n        delete fractionOwners[tokenId];\\n    \\n        // \\u5c06NFT\\u8f6c\\u79fb\\u7ed9\\u6301\\u6709\\u5168\\u90e8\\u788e\\u7247\\u7684\\u7528\\u6237\\n        address previousOwner = ownerOf(tokenId);\\n        _transfer(previousOwner, msg.sender, tokenId);\\n    \\n        // \\u66f4\\u65b0NFTItem\\u4fe1\\u606f\\n        nftItems[tokenId].owner = payable(msg.sender);\\n        nftItems[tokenId].isListed = false; // \\u788e\\u7247\\u5316\\u540e\\u901a\\u5e38\\u4e0d\\u518d\\u4e0a\\u67b6\\n    \\n        emit NFTRedeemed(tokenId, msg.sender);\\n    }\\n\\n    // \\u8fd4\\u56de\\u788e\\u7247\\u603b\\u91cf\\n    function getTotalFractions(uint256 tokenId) public view returns (uint256) {\\n        return totalFractions[tokenId];\\n    }\\n\\n    // \\u83b7\\u53d6\\u6240\\u6709\\u4e0a\\u67b6\\u7684\\u788e\\u7247\\n    function getAllFractionsForSale() public view returns (uint256[] memory, address[] memory, Fraction[] memory) {\\n        uint256 totalTokens = tokenIdCounter.current();\\n        uint256 count = 0;\\n\\n        // \\u7edf\\u8ba1\\u6240\\u6709\\u4e0a\\u67b6\\u7684\\u788e\\u7247\\u6570\\u91cf\\n        for (uint256 tokenId = 1; tokenId <= totalTokens; tokenId++) {\\n            if (isFractionalized[tokenId]) {\\n                address[] memory ownerss = fractionOwners[tokenId];\\n                for (uint256 j = 0; j < ownerss.length; j++) {\\n                    address owner = ownerss[j];\\n                    if (fractions[tokenId][owner].isForSale) {\\n                        count++;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // \\u521b\\u5efa\\u6570\\u7ec4\\u4ee5\\u5b58\\u50a8\\u7ed3\\u679c\\n        uint256[] memory tokenIds = new uint256[](count);\\n        address[] memory owners = new address[](count);\\n        Fraction[] memory fractionsForSale = new Fraction[](count);\\n\\n        // \\u586b\\u5145\\u7ed3\\u679c\\n        uint256 index = 0;\\n        for (uint256 tokenId = 1; tokenId <= totalTokens; tokenId++) {\\n            if (isFractionalized[tokenId]) {\\n                address[] memory ownersList = fractionOwners[tokenId];\\n                for (uint256 j = 0; j < ownersList.length; j++) {\\n                    address owner = ownersList[j];\\n                    if (fractions[tokenId][owner].isForSale) {\\n                        tokenIds[index] = tokenId;\\n                        owners[index] = owner;\\n                        fractionsForSale[index] = fractions[tokenId][owner];\\n                        index++;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return (tokenIds, owners, fractionsForSale);\\n    }\\n\\n    // \\u8bbe\\u7f6e NFT \\u7684\\u79df\\u8d41\\u7528\\u6237\\u548c\\u8fc7\\u671f\\u65f6\\u95f4\\n    function setUser(uint256 tokenId, address user, uint64 expires) public override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC4907: caller is not owner nor approved\\\");\\n        UserInfo storage info = _users[tokenId];\\n        info.user = user;\\n        info.expires = expires;\\n        emit UpdateUser(tokenId, user, expires);\\n    }\\n\\n    // \\u83b7\\u53d6 NFT \\u7684\\u5f53\\u524d\\u79df\\u8d41\\u7528\\u6237\\n    function userOf(uint256 tokenId) public view override returns(address) {\\n        if(uint256(_users[tokenId].expires) >= block.timestamp){\\n            return _users[tokenId].user;\\n        } else{\\n            return address(0);\\n        }\\n    }\\n\\n    // \\u83b7\\u53d6 NFT \\u7684\\u79df\\u8d41\\u7528\\u6237\\u8fc7\\u671f\\u65f6\\u95f4\\n    function userExpires(uint256 tokenId) public view override returns(uint256) {\\n        return _users[tokenId].expires;\\n    }\\n\\n    // \\u68c0\\u67e5\\u662f\\u5426\\u53ef\\u4ee5\\u9886\\u53d6\\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1\\n    function checkClaimLoyaltyReward(uint256 tokenId) public view returns (bool) {\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\n        require(ownerOf(tokenId) == msg.sender, \\\"Not the owner\\\");\\n        \\n        LoyaltyInfo memory loyalty = nftLoyalty[tokenId];\\n        \\n        // \\u4f7f\\u7528 lastTimeStamp \\u66ff\\u4ee3 block.timestamp\\n        // \\u8ba1\\u7b97\\u6301\\u6709\\u65f6\\u95f4\\n        uint256 holdingTime = block.timestamp - loyalty.holdingStartTime;\\n        // uint256 holdingTime = lastTimeStamp - loyalty.holdingStartTime;\\n        \\n        // \\u8ba1\\u7b97\\u81ea\\u4e0a\\u6b21\\u9886\\u53d6\\u5956\\u52b1\\u540e\\u7ecf\\u8fc7\\u7684\\u65f6\\u95f4\\n        uint256 timeSinceLastReward = block.timestamp - loyalty.lastRewardTime;\\n        // uint256 timeSinceLastReward = lastTimeStamp - loyalty.lastRewardTime;\\n        \\n        // // \\u6dfb\\u52a0\\u65e5\\u5fd7\\u4e8b\\u4ef6\\u6765\\u5e2e\\u52a9\\u8c03\\u8bd5\\n        // console.log(\\\"Current timestamp:\\\", block.timestamp);\\n        // console.log(\\\"Current timestamp:\\\", lastTimeStamp);\\n        // console.log(\\\"Holding start time:\\\", loyalty.holdingStartTime);\\n        // console.log(\\\"Holding time:\\\", holdingTime);\\n        // console.log(\\\"Last reward time:\\\", loyalty.lastRewardTime);\\n        // console.log(\\\"Time since last reward:\\\", timeSinceLastReward);\\n        // console.log(\\\"Loyalty period:\\\", LOYALTY_PERIOD);\\n        \\n        // \\u9700\\u8981\\u6301\\u6709\\u8d85\\u8fc7\\u5fe0\\u8bda\\u5ea6\\u5468\\u671f\\uff0c\\u4e14\\u8ddd\\u79bb\\u4e0a\\u6b21\\u9886\\u53d6\\u8d85\\u8fc7\\u5fe0\\u8bda\\u5ea6\\u5468\\u671f\\n        return holdingTime >= LOYALTY_PERIOD && timeSinceLastReward >= LOYALTY_PERIOD;\\n    }\\n\\n    // \\u9886\\u53d6\\u5fe0\\u8bda\\u5ea6\\u5956\\u52b1\\n    function claimLoyaltyReward(uint256 tokenId) public nonReentrant {\\n        require(checkClaimLoyaltyReward(tokenId), \\\"Cannot claim reward yet\\\");\\n        require(address(this).balance >= LOYALTY_REWARD, \\\"Insufficient contract balance\\\");\\n        \\n        LoyaltyInfo storage loyalty = nftLoyalty[tokenId];\\n        loyalty.lastRewardTime = block.timestamp;\\n        \\n        // \\u8f6c\\u8d26\\u5956\\u52b1\\n        (bool success, ) = payable(msg.sender).call{value: LOYALTY_REWARD}(\\\"\\\");\\n        require(success, \\\"Reward transfer failed\\\");\\n        \\n        emit LoyaltyRewardClaimed(tokenId, msg.sender, LOYALTY_REWARD);\\n    }\\n\\n    // \\u83b7\\u53d6NFT\\u7684\\u5fe0\\u8bda\\u5ea6\\u4fe1\\u606f\\n    function getLoyaltyInfo(uint256 tokenId) public view returns (\\n        uint256 holdingStartTime,\\n        bool rewardClaimed,\\n        uint256 lastRewardTime,\\n        uint256 nextRewardTime\\n    ) {\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\n        \\n        LoyaltyInfo memory loyalty = nftLoyalty[tokenId];\\n        \\n        holdingStartTime = loyalty.holdingStartTime;\\n        rewardClaimed = loyalty.rewardClaimed;\\n        lastRewardTime = loyalty.lastRewardTime;\\n        \\n        // \\u8ba1\\u7b97\\u4e0b\\u6b21\\u53ef\\u9886\\u53d6\\u5956\\u52b1\\u7684\\u65f6\\u95f4\\n        if (lastRewardTime == 0) {\\n            nextRewardTime = holdingStartTime + LOYALTY_PERIOD;\\n        } else {\\n            nextRewardTime = lastRewardTime + LOYALTY_PERIOD;\\n        }\\n    }\\n\\n    // \\u521b\\u5efa\\u76f2\\u76d2\\uff08\\u53ea\\u6709\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\u53ef\\u4ee5\\u8c03\\u7528\\uff09\\n    function createMysteryBox(\\n        uint256 _price, \\n        string[] memory _possibleURIs,\\n        uint96 _royaltyFee\\n    ) public onlyOwner {\\n        require(_possibleURIs.length > 0, \\\"Must provide URIs\\\");\\n        require(_price > 0, \\\"Price must be greater than 0\\\");\\n        \\n        // \\u5b58\\u50a8\\u6bcf\\u4e2a URI\\n        for(uint256 i = 0; i < _possibleURIs.length; i++) {\\n            mysteryBoxURIs[i] = _possibleURIs[i];\\n        }\\n        \\n        mysteryBox = MysteryBox({\\n            price: _price,\\n            isActive: true,\\n            royaltyFee: _royaltyFee,\\n            uriCount: _possibleURIs.length\\n        });\\n\\n        emit MysteryBoxCreated(_price, _possibleURIs.length);\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u76f2\\u76d2\\u72b6\\u6001\\n    function setMysteryBoxStatus(bool _isActive) public onlyOwner {\\n        mysteryBox.isActive = _isActive;\\n        emit MysteryBoxStatusChanged(_isActive);\\n    }\\n\\n    // \\u66f4\\u65b0\\u76f2\\u76d2\\u4ef7\\u683c\\n    function updateMysteryBoxPrice(uint256 _newPrice) public onlyOwner {\\n        require(_newPrice > 0, \\\"Price must be greater than 0\\\");\\n        mysteryBox.price = _newPrice;\\n    }\\n\\n    // \\u6dfb\\u52a0\\u65b0\\u7684 URI \\u5230\\u76f2\\u76d2\\n    function addURIToMysteryBox(string memory _uri) public onlyOwner {\\n        mysteryBoxURIs[mysteryBox.uriCount] = _uri;\\n        mysteryBox.uriCount++;\\n    }\\n\\n    // \\u83b7\\u53d6\\u6307\\u5b9a\\u7d22\\u5f15\\u7684 URI\\n    function getMysteryBoxURI(uint256 index) public view returns (string memory) {\\n        require(index < mysteryBox.uriCount, \\\"URI index out of bounds\\\");\\n        return mysteryBoxURIs[index];\\n    }\\n\\n    // \\u83b7\\u53d6\\u76f2\\u76d2\\u4fe1\\u606f\\n    function getMysteryBoxInfo() public view returns (\\n        uint256 price,\\n        bool isActive,\\n        uint256 totalURIs\\n    ) {\\n        return (\\n            mysteryBox.price,\\n            mysteryBox.isActive,\\n            mysteryBox.uriCount\\n        );\\n    }\\n\\n    // \\u751f\\u6210\\u4f2a\\u968f\\u673a\\u6570\\n    function _random() private returns (uint256) {\\n        nonce++;\\n        return uint256(keccak256(abi.encodePacked(\\n            block.timestamp,\\n            block.difficulty,\\n            msg.sender,\\n            nonce\\n        )));\\n    }\\n\\n    // \\u8d2d\\u4e70\\u76f2\\u76d2\\n    function purchaseMysteryBox() public payable nonReentrant {\\n        require(mysteryBox.isActive, \\\"Mystery box is not active\\\");\\n        require(msg.value == mysteryBox.price, \\\"Incorrect payment amount\\\");\\n        require(mysteryBox.uriCount > 0, \\\"No NFTs available in mystery box\\\");\\n\\n        // \\u751f\\u6210\\u968f\\u673a\\u7d22\\u5f15\\n        uint256 randomIndex = _random() % mysteryBox.uriCount;\\n        string memory selectedURI = mysteryBoxURIs[randomIndex];\\n\\n        // \\u94f8\\u9020 NFT\\n        uint256 newTokenId = mintItem(msg.sender, selectedURI, mysteryBox.royaltyFee);\\n\\n        // \\u4ece\\u53ef\\u80fd\\u7684 URI \\u5217\\u8868\\u4e2d\\u79fb\\u9664\\u5df2\\u4f7f\\u7528\\u7684 URI\\uff08\\u53ef\\u9009\\uff09\\n        // \\u5982\\u679c\\u60f3\\u8ba9\\u6bcf\\u4e2a URI \\u53ea\\u80fd\\u4f7f\\u7528\\u4e00\\u6b21\\uff0c\\u53d6\\u6d88\\u4e0b\\u9762\\u7684\\u6ce8\\u91ca\\n        /*\\n        mysteryBox.possibleURIs[randomIndex] = mysteryBox.possibleURIs[mysteryBox.possibleURIs.length - 1];\\n        mysteryBox.possibleURIs.pop();\\n        */\\n\\n        emit MysteryBoxPurchased(msg.sender, newTokenId, selectedURI);\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u9ed8\\u514b\\u5c14\\u6811\\u6839\\uff08\\u4ec5\\u7ba1\\u7406\\u5458\\u53ef\\u8c03\\u7528\\uff09\\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\\n        merkleRoot = _merkleRoot;\\n        emit MerkleRootSet(_merkleRoot);\\n    }\\n\\n    // \\u9a8c\\u8bc1\\u5730\\u5740\\u548ctokenId\\u662f\\u5426\\u5728\\u7a7a\\u6295\\u767d\\u540d\\u5355\\u4e2d\\n    function isWhitelisted(address account, uint256 tokenId, bytes32[] calldata proof) public view returns (bool) {\\n        bytes32 leaf = keccak256(abi.encodePacked(account, tokenId));\\n        return MerkleProof.verify(proof, merkleRoot, leaf);\\n    }\\n\\n    // \\u9886\\u53d6\\u7a7a\\u6295\\n    function claimAirdrop(\\n        uint256 tokenId,\\n        bytes32[] calldata proof\\n    ) public nonReentrant {\\n        require(merkleRoot != bytes32(0), \\\"Merkle root not set\\\");\\n        require(!hasClaimed[msg.sender], \\\"Already claimed\\\");\\n        require(\\n            isWhitelisted(msg.sender, tokenId, proof),\\n            \\\"Not in whitelist or invalid proof\\\"\\n        );\\n\\n        // \\u6807\\u8bb0\\u4e3a\\u5df2\\u9886\\u53d6\\n        hasClaimed[msg.sender] = true;\\n\\n        // \\u8f6c\\u79fb NFT\\n        address owner = ownerOf(tokenId);\\n        _transfer(owner, msg.sender, tokenId);\\n\\n        // \\u66f4\\u65b0 NFT \\u4fe1\\u606f\\n        nftItems[tokenId].owner = payable(msg.sender);\\n        nftItems[tokenId].isListed = false;\\n\\n        emit AirdropClaimed(msg.sender, tokenId);\\n    }\\n\\n    // Cross-chain functionality\\n    \\n    /**\\n     * @dev Set XCM Bridge contract address (only owner)\\n     * @param _xcmBridge XCM Bridge contract address\\n     */\\n    function setXCMBridge(address _xcmBridge) external onlyOwner {\\n        require(_xcmBridge != address(0), \\\"Invalid XCM Bridge address\\\");\\n        xcmBridge = _xcmBridge;\\n    }\\n\\n    /**\\n     * @dev Lock NFT for cross-chain transfer (only XCM Bridge)\\n     * @param tokenId Token ID to lock\\n     * @param messageHash XCM message hash\\n     */\\n    function lockForCrossChain(uint256 tokenId, bytes32 messageHash) external {\\n        require(msg.sender == xcmBridge, \\\"Only XCM Bridge can lock NFTs\\\");\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(!isLockedForCrossChain[tokenId], \\\"NFT already locked\\\");\\n\\n        isLockedForCrossChain[tokenId] = true;\\n        crossChainMessages[messageHash] = tokenId;\\n\\n        emit NFTLockedForCrossChain(tokenId, ownerOf(tokenId), messageHash);\\n    }\\n\\n    /**\\n     * @dev Unlock NFT from cross-chain transfer (only XCM Bridge)\\n     * @param tokenId Token ID to unlock\\n     * @param messageHash XCM message hash\\n     */\\n    function unlockFromCrossChain(uint256 tokenId, bytes32 messageHash) external {\\n        require(msg.sender == xcmBridge, \\\"Only XCM Bridge can unlock NFTs\\\");\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        require(isLockedForCrossChain[tokenId], \\\"NFT not locked\\\");\\n        require(crossChainMessages[messageHash] == tokenId, \\\"Invalid message hash\\\");\\n\\n        isLockedForCrossChain[tokenId] = false;\\n        delete crossChainMessages[messageHash];\\n\\n        emit NFTUnlockedFromCrossChain(tokenId, ownerOf(tokenId), messageHash);\\n    }\\n\\n    /**\\n     * @dev Check if NFT is locked for cross-chain transfer\\n     * @param tokenId Token ID to check\\n     * @return bool Whether the NFT is locked\\n     */\\n    function isNFTLockedForCrossChain(uint256 tokenId) external view returns (bool) {\\n        return isLockedForCrossChain[tokenId];\\n    }\\n\\n    /**\\n     * @dev Get token ID by XCM message hash\\n     * @param messageHash XCM message hash\\n     * @return uint256 Token ID\\n     */\\n    function getTokenIdByMessageHash(bytes32 messageHash) external view returns (uint256) {\\n        return crossChainMessages[messageHash];\\n    }\\n\\n    /**\\n     * @dev Override transfer functions to prevent transfer of locked NFTs\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 quantity\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        // Prevent transfer of locked NFTs (except for XCM Bridge)\\n        if (from != address(0) && to != address(0) && msg.sender != xcmBridge) {\\n            require(!isLockedForCrossChain[tokenId], \\\"NFT is locked for cross-chain transfer\\\");\\n        }\\n\\n        super._beforeTokenTransfer(from, to, tokenId, quantity); // \\u8c03\\u7528\\u7236\\u7c7b\\u7684\\u51fd\\u6570\\n\\n        // \\u5982\\u679c\\u662f\\u65b0\\u7684\\u8f6c\\u8d26\\uff08\\u4e0d\\u662f\\u94f8\\u9020\\uff09\\uff0c\\u5219\\u91cd\\u7f6e\\u5fe0\\u8bda\\u5ea6\\u4fe1\\u606f\\n        // holdingStartTime: lastTimeStamp,\\n        if (from != address(0) && to != address(0)) {\\n            nftLoyalty[tokenId] = LoyaltyInfo({\\n                holdingStartTime: block.timestamp,\\n                rewardClaimed: false,\\n                lastRewardTime: 0\\n            });\\n        }\\n        // \\u5982\\u679c\\u662f\\u94f8\\u9020\\uff0c\\u5219\\u521d\\u59cb\\u5316\\u5fe0\\u8bda\\u5ea6\\u4fe1\\u606f\\n        // holdingStartTime: lastTimeStamp,\\n        else if (from == address(0)) {\\n            nftLoyalty[tokenId] = LoyaltyInfo({\\n                holdingStartTime: block.timestamp,\\n                rewardClaimed: false,\\n                lastRewardTime: 0\\n            });\\n        }\\n\\n        // \\u5982\\u679c\\u8f6c\\u79fb\\u7684 NFT \\u6709\\u79df\\u8d41\\u7528\\u6237\\uff0c\\u5219\\u5220\\u9664\\u79df\\u8d41\\u7528\\u6237\\u4fe1\\u606f\\n        if (from != to && _users[tokenId].user != address(0)) {\\n            delete _users[tokenId];\\n        }\\n    }\\n\\n\\tfunction _burn(\\n\\t\\tuint256 tokenId\\n\\t) internal override(ERC721, ERC721URIStorage, ERC721Royalty) {\\n\\t\\tsuper._burn(tokenId); // \\u8c03\\u7528\\u7236\\u7c7b\\u7684\\u9500\\u6bc1\\u51fd\\u6570\\n\\t}\\n\\n\\tfunction tokenURI(\\n\\t\\tuint256 tokenId\\n\\t) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n\\t\\treturn super.tokenURI(tokenId); // \\u83b7\\u53d6 token \\u7684 URI\\n\\t}\\n\\n\\tfunction supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Royalty)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.supportsInterface(interfaceId); // \\u68c0\\u67e5\\u63a5\\u53e3\\u652f\\u6301\\n\\t}\\n\\n\\n\\n}\\n\",\"keccak256\":\"0x9d48e8071029cd840d8fe4067963bf65b0d86ddd03752376221c57a44efe6f67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600f60808181526e596f7572436f6c6c65637469626c6560881b60a0526101006040908152600360c0818152622ca1a160e91b60e052939192916001600160401b03906020600254916001958684811c941680156200031f575b838510146200021c578190601f94858111620002c8575b5083908583116001146200025f5760009262000253575b505060001982871b1c191690861b176002555b86519283116200023d5783548581811c9116801562000232575b828210146200021c57828111620001d1575b508091831160011462000166575081929394956000926200015a575b505060001982841b1c191690831b1790555b600d8054336001600160a01b0319821681179092559251926001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600e556658d15e17628000601055600060185561543c90816200032b8239f35b015190503880620000e2565b90601f198316968460005282600020926000905b898210620001b95750508386979896959610620001a0575b505050811b019055620000f4565b015160001983861b60f8161c1916905538808062000192565b8088859682949686015181550195019301906200017a565b84600052816000208380860160051c82019284871062000212575b0160051c019086905b82811062000205575050620000c6565b60008155018690620001f5565b92508192620001ec565b634e487b7160e01b600052602260045260246000fd5b90607f1690620000b4565b634e487b7160e01b600052604160045260246000fd5b01519050388062000087565b90889350601f198316916002600052856000209260005b87828210620002b1575050841162000298575b505050811b016002556200009a565b015160001983891b60f8161c1916905538808062000289565b8385015186558c9790950194938401930162000276565b9091506002600052836000208580850160051c82019286861062000315575b918a91869594930160051c01915b8281106200030557505062000070565b600081558594508a9101620002f5565b92508192620002e7565b93607f16936200005956fe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714613425575080630410b7091461340857806306fdde0314613339578063081812fc14613319578063095ea7b3146132f45780630bcae1ac14613147578063100616311461306357806314e8e14a14611b8b578063150a533114613027578063165c33c614612ffe57806318160ddd14612fdf5780631e006e0c14612f6a57806323b872dd14612f4a5780632a55205a14612f1a5780632eb4a7ab14612efb5780632f745c5914612e4f578063302aa17c14612db95780633877248d14612d6a57806338b05ec914612a445780633b1b1ad01461287357806340dbc8a6146126e057806342842e0e146126ac578063474b166814612654578063476343ee146125fc5780634f6ccce71461256957806358dc2cdb146123d95780635d5520ae1461234e57806360dfd2b2146121ff578063628213961461218b5780636352211e1461216b5780636873c1cc1461124d5780636a1b7ecc1461214c5780636fba603f14611ed457806370a0823114611ea7578063715018a614611e5b5780637209f8cf14611d4957806373b2e80e14611d0b57806373befb1a14611bb2578063766de47f14611b8b57806376d2a03414611a565780637b66398514611a2d5780637cb64759146119e0578063883efa67146116ea5780638997bf84146116575780638da5cb5b1461162e5780638fbd6b1f146115cc5780638fc88c4814611596578063939d8b94146114f357806394e53ea71461137557806395d89b411461129357806398bdf6f5146112745780639a5e6d231461124d5780639c281e791461110c5780639c2b4daa14611003578063a22cb46514611035578063a66be8bb14610c7a578063b408fd6914611003578063b802016614610e9a578063b86b19de14610540578063b88d4fde14610e0c578063ba3b80da14610ca6578063c213ec4814610c7a578063c2e017e514610a56578063c2f1f14a14610a25578063c38b761c146109dd578063c87b56dd146109a9578063c95c6f3c14610989578063cf7dea3614610940578063d32060d81461091e57838163d9dcd9ba1461088a57508063e030565e1461077f578063e7fb74c71461056c578063e97b319014610540578063e985e9c5146104f0578063f2fde38b1461043c578063f82d85731461040a578063fa519f9d146103d95763faf7a8261461037f57600080fd5b346103d55760603660031901126103d557610398613527565b92604435906001600160401b0382116103d25750926103bf6103c992602095369101613553565b9160243590615039565b90519015158152f35b80fd5b8280fd5b83823461040657602036600319011261040657356103f56139d2565b610400811515614fee565b60155580f35b5080fd5b8284346103d257806003193601126103d2575060155461043860ff6016541692601754905193849384613583565b0390f35b50346103d55760203660031901126103d557610456613527565b9061045f6139d2565b6001600160a01b0391821692831561049e575050600d80546001600160a01b031981168417909155166000805160206153c7833981519152600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b50503461040657806003193601126104065760209161050d613527565b8261051661353d565b9260018060a01b03809316815260078652209116600052825260ff81600020541690519015158152f35b50346103d55760203660031901126103d5578160209360ff92358152601b855220541690519015158152f35b509060203660031901126103d5578135610584614b89565b8084526019602052818420600281019260018454926105a860ff8560a01c16614bdf565b01948554340361074b5760ff60a01b19831685558692836105c9348761438a565b506001600160a01b03939092848416908516036106ba575b875489546001600160a01b0319821633179099559882905596978316966106208280808061060f8b34614c1f565b8d5af161061a6141d8565b50614c2c565b303b1561040657818761064992875193849283926323b872dd60e01b8452339030908501614b67565b038183305af180156106b057610698575b505082519687521660208601528401527f38ed573e5b0a36d956d10e556b61bd974cc43bfdf59bffec98b5af39e5ce73bb60603394a46001600e5580f35b6106a1906135d5565b6106ac57873861065a565b8780fd5b85513d84823e3d90fd5b945050506106c8348561438a565b9388858484826106dc575b505050906105e1565b839283928392165af16106ed6141d8565b50156106fc57883884816106d3565b608490602085519162461bcd60e51b8352820152602360248201527f5472616e7366657220746f20726f79616c7479207265636569766572206661696044820152621b195960ea1b6064820152fd5b6020606492519162461bcd60e51b8352820152600f60248201526e496e636f727265637420707269636560881b6044820152fd5b50346103d55760603660031901126103d55780359061079c61353d565b604435936001600160401b03851692909190838603610886576107bf8533613d6d565b156108315750838652601f602090815282872080546001600160e01b0319166001600160a01b0390931692831760a09790971b600160a01b600160e01b0316969096179095559051918252927f4e06b4e7000e659094299b3533b47b6aa8ad048e95e872d23d1f4ee55af89cfe91a380f35b608490602084519162461bcd60e51b8352820152602960248201527f455243343930373a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152fd5b8680fd5b91905034610406576020366003190112610406576002903592838352601b6020526108ba60ff8285205416614df3565b838352601d602052808320336000526020526000206001810180546108e160ff8216614e86565b6108ed83541515614e3b565b60ff19169055015533907f2c29c87ef16c6135cfda3989f658daaf049df7e9157c9b57c846e1ce3a1abf278380a380f35b5050346104065781600319360112610406576020905166038d7ea4c680008152f35b5050346104065761095036613768565b92908152601e6020528181209081548410156103d25750602092610973916139ba565b905491519160018060a01b039160031b1c168152f35b5091346103d25760203660031901126103d257506103c960209235614f4c565b5091346103d25760203660031901126103d257506109ca6104389235615157565b9051918291602083526020830190613502565b505034610406578160031936011261040657608090601554906016549060175491815193845260ff81161515602085015260018060601b039060081c16908301526060820152f35b5091346103d25760203660031901126103d25750610a4560209235614f14565b90516001600160a01b039091168152f35b50346103d557610a6536613768565b9092610a7084613ae8565b336001600160a01b0390911603610c3c57838552602092601b845260ff8287205416610bfe578215610bab578486526019845260ff6002838820015460a01c16610b465750907f5569d27c5ca66b9bd7549eaaa0c687144265ac6c25a7615b036bac8fc82c76b49291848652601b8352808620600160ff19825416179055601c83528181872055610b2b8151610b0581613619565b83815287858201528783820152868852601d855282882033600052855282600020614cf0565b848652601e8352610b3e33828820614d20565b51908152a280f35b83608492519162461bcd60e51b8352820152603b60248201527f4e46542069732063757272656e746c79206c69737465642c206d75737420646560448201527a6c697374206265666f7265206672616374696f6e616c697a696e6760281b6064820152fd5b83608492519162461bcd60e51b8352820152602960248201527f546f74616c206672616374696f6e73206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152fd5b83606492519162461bcd60e51b8352820152601a60248201527913919508185b1c9958591e48199c9858dd1a5bdb985b1a5e995960321b6044820152fd5b5162461bcd60e51b81526020818401526019602482015278139bdd081d1a19481bdddb995c881bd9881d1a1a5cc8139195603a1b6044820152606490fd5b50346103d55760203660031901126103d5578160209360ff923581526013855220541690519015158152f35b50346103d557610cb536613768565b6012549192916001600160a01b039081163303610dc957610cdd610cd8856141bb565b615114565b8386526020926013845260ff868820541615610d955782875260148452848688205403610d5b5750907feb47d65891ede4301933ba6048a417fcc3c59c7272f62e895f55210d8907448592918487526013835285872060ff19815416905581875260148352600086882055610d5185613ae8565b169451908152a380f35b855162461bcd60e51b81529081018490526014602482015273092dcecc2d8d2c840dacae6e6c2ceca40d0c2e6d60631b6044820152606490fd5b855162461bcd60e51b8152908101849052600e60248201526d139195081b9bdd081b1bd8dad95960921b6044820152606490fd5b845162461bcd60e51b8152602081850152601f60248201527f4f6e6c792058434d204272696467652063616e20756e6c6f636b204e465473006044820152606490fd5b83823461040657608036600319011261040657610e27613527565b90610e3061353d565b6064359290604435906001600160401b038511610e965736602386011215610e9657610e6b610e8e94866024610e9398369301359101613799565b92610e7e610e798433613d6d565b613c94565b610e89838383613e35565b6142fc565b613d49565b80f35b8580fd5b50826003193601126103d557610eae614b89565b6016549060ff821615610fc457610ec86015543414614ecd565b601754908115610f815750907f97abd941e57ce5fabac149412bd989faf94503d1cb37cf447b5d8898d50e6a9291610f01601854614ab4565b806018558451602081019142835244878301523360601b6060830152607482015260748152610f2f816135fe565b5190200684526022602052610f5c610f4884862061368d565b9160081c6001600160601b03168233614432565b610f76845192839283528560208401523395830190613502565b0390a26001600e5580f35b606490602085519162461bcd60e51b8352820152602060248201527f4e6f204e46547320617661696c61626c6520696e206d79737465727920626f786044820152fd5b606490602084519162461bcd60e51b835282015260196024820152784d79737465727920626f78206973206e6f742061637469766560381b6044820152fd5b50346103d55760203660031901126103d557358252601a6020908152918190205490516001600160a01b039091168152f35b5090346103d557806003193601126103d55761104f613527565b9060243580151592838203611107576001600160a01b0316933385146110c8575061109b90338652600760205282862085600052602052826000209060ff801983541691151516179055565b519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b606490602084519162461bcd60e51b8352820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152fd5b600080fd5b5091346103d25760603660031901126103d257611127613527565b6024356001600160401b0381116103d5576111459036908601613909565b61114d6137ee565b9481511561120a5760328251116111b757506111698151614a82565b925b81518110156111a2578061118d8761118661119d9486614ac3565b5186614432565b6111978287614ac3565b52614ab4565b61116b565b84516020808252819061043890820187613804565b608490602086519162461bcd60e51b8352820152602760248201527f4d6178696d756d203530204e4654732063616e206265206d696e74656420617460448201526620612074696d6560c81b6064820152fd5b606490602086519162461bcd60e51b8352820152601d60248201527f4d7573742070726f76696465206174206c65617374206f6e65205552490000006044820152fd5b50346103d55760203660031901126103d55760209282913581526014845220549051908152f35b505034610406578160031936011261040657602090600f549051908152f35b8284346103d257806003193601126103d2575080516000916003546112b78161359b565b80845260019180831690811561134d57506001146112f3575b50506112e18261043894038361366a565b51918291602083526020830190613502565b6003600090815260209550917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061133a575050508201909201916112e1826112d0565b8054868501880152928601928101611321565b61043896506112e193506020915091859260ff191682840152151560051b82010194506112d0565b5090346103d557611385366138c8565b82869493929452602094601b86526113a260ff8589205416614df3565b828752601d86528387203360005286528360002080548381106114b757600182019081549360ff85166114605750906113de858b959493614c1f565b8083551561144c575b505050829052601d855282862060018060a01b0385169081600052865283600020611413838254614c74565b9055828752601d8652838720906000528552826000205414611433578480f35b61144493601e918652528320614d20565b388080808480f35b60029260ff191690550155853880806113e7565b875162461bcd60e51b81529081018a9052602b60248201527f43616e6e6f74207472616e73666572206672616374696f6e732074686174206160448201526a726520666f722073616c6560a81b6064820152608490fd5b855162461bcd60e51b81528084018990526016602482015275496e73756666696369656e74206672616374696f6e7360501b6044820152606490fd5b5091346103d25760203660031901126103d2578235611519611514826141bb565b614caf565b81526020805261152a828220614dc6565b90815192806020840151151593015191821560001461157e5761012c85019081861161156b575060809550925b815194855260208501528301526060820152f35b634e487b7160e01b815260118752602490fd5b61012c83019081841161156b57506080955092611557565b50346103d55760203660031901126103d557358252601f60209081529181902054905160a09190911c6001600160401b03168152f35b50346103d55760203660031901126103d5573590811515809203611107577f2df160d881060c80321d66098fc31487890660418a73a9bd858ead9857a39ae6916020916116176139d2565b60ff196016541660ff83161760165551908152a180f35b505034610406578160031936011261040657600d5490516001600160a01b039091168152602090f35b50346103d55760203660031901126103d55761043892829135611678614c81565b50611685611514826141bb565b8152601960205220906116d3600382519361169f856135fe565b805485526001810154602086015260028101546001600160a01b0381168587015260a01c60ff16151560608601520161368d565b608083015251918291602083526020830190613884565b50906116f536613768565b916116fe614b89565b601054908134036119a75761171283613ae8565b6001600160a01b0392906117299084163314614ad7565b611734851515614b1b565b838752602092601b845260ff838920541661196457878080938193600d541682821561195b575bf1156119525761176b8330613b0b565b303b15610e965780516323b872dd60e01b815286908181806117918830338d8501614b67565b038183305af1801561194857611934575b50839052601982528086206002908101805460ff60a01b1916600160a01b179055818720600190810186905582882090910180546001600160a01b03191633179055946117ee84615157565b90848852601984526003838920019180519160018060401b0383116119215750611818835461359b565b601f81116118e8575b508490601f8311600114611877576000805160206153a783398151915295949392918a918361186c575b5050600019600383901b1c191690881b1790555b519384523393a3600e5580f35b01519050388061184b565b838a52858a20601f198416969594938a9390928c5b8981106118d15750836000805160206153a783398151915299106118b8575b505050811b01905561185f565b015160001960f88460031b161c191690553880806118ab565b8282015184558c959093019291880191880161188c565b61191190848b52868b20601f850160051c810191888610611917575b601f0160051c019061441b565b38611821565b9091508190611904565b634e487b7160e01b8a5260419052602489fd5b61193d906135d5565b610e965785386117a2565b83513d84823e3d90fd5b513d86823e3d90fd5b506108fc61175b565b825162461bcd60e51b8152808801859052601e60248201527f43616e6e6f74206c697374206672616374696f6e616c697a6564204e465400006044820152606490fd5b5162461bcd60e51b815260208186015260146024820152734d75737420706179206c697374696e672066656560601b6044820152606490fd5b50346103d55760203660031901126103d5577f42cbc405e4dbf1b691e85b9a34b08ecfcf7a9ad9078bf4d645ccfa1fac11c10b916020913590611a216139d2565b8160115551908152a180f35b50503461040657816003193601126104065760125490516001600160a01b039091168152602090f35b505034610406576020806003193601126103d557611a72613527565b600f5484916001600160a01b031660015b82811115611b4e5750611a9e611a9887614a82565b96614d60565b92809160015b84811115611ad0578751888152806104388989611ac3848e018f613804565b9184830390850152613838565b808352601d808852888420836000528852898960002054611afc575b5050611af790614ab4565b611aa4565b94611b469183611b1083611af79699614ac3565b528686528952898520846000528952611b2b8a600020614dc6565b611b35828a614ac3565b52611b408189614ac3565b50614ab4565b939089611aec565b808452601d85528584208260005285528560002054611b76575b611b7190614ab4565b611a83565b95611b83611b7191614ab4565b969050611b68565b50346103d55760203660031901126103d5576020928291358152601c845220549051908152f35b50829034610406576020806003193601126103d5576001600160401b03908235828111611d0757611be690369085016137d0565b94611bef6139d2565b6017548552602282528420928551928311611cf45750611c0f835461359b565b601f8111611cc6575b5080601f8311600114611c625750839482939492611c57575b50508160011b916000199060031b1c19161790555b611c51601754614ab4565b60175580f35b015190508480611c31565b90601f198316958486528286209286905b888210611cae57505083600195969710611c95575b505050811b019055611c46565b015160001960f88460031b161c19169055848080611c88565b80600185968294968601518155019501930190611c73565b611cee90848652828620601f850160051c81019184861061191757601f0160051c019061441b565b85611c18565b634e487b7160e01b855260419052602484fd5b8480fd5b5050346104065760203660031901126104065760209160ff9082906001600160a01b03611d36613527565b1681526021855220541690519015158152f35b50346103d557611d5836613768565b601254919290916001600160a01b03919082163303611e1857611d7d610cd8856141bb565b838652601360205260ff8587205416611de057507f94ee556512ab445c3c191d6f33a25e0d5a37c113ea8c6391d5ecdb53d47c763b9160209184875260138352858720600160ff19825416179055818752601483528486882055610d5185613ae8565b606490602086519162461bcd60e51b8352820152601260248201527113919508185b1c9958591e481b1bd8dad95960721b6044820152fd5b606490602086519162461bcd60e51b8352820152601d60248201527f4f6e6c792058434d204272696467652063616e206c6f636b204e4654730000006044820152fd5b83346103d257806003193601126103d257611e746139d2565b600d80546001600160a01b031981169091556000906001600160a01b03166000805160206153c78339815191528280a380f35b50503461040657602036600319011261040657602090611ecd611ec8613527565b613a2a565b9051908152f35b50829034610406576060366003190112610406578035916001600160401b0390602490813583811161040657611f0d9036908601613909565b611f156137ee565b611f1d6139d2565b81511561211657611f2f871515614fee565b825b825181101561206c57611f448184614ac3565b51908085526020602281528a86209083519089821161205a57611f67835461359b565b90601f91828111612024575b5080918311600114611fb657508190611fa6958992611fab575b50508160011b916000199060031b1c1916179055614ab4565b611f31565b015190508d80611f8d565b91929394601f198416858a52838a20938a905b82821061200c5750509084611fa697969594939210611ff3575b505050600190811b019055614ab4565b015160001960f88460031b161c191690558c8080611fe3565b80600186978294978701518155019601940190611fc9565b61204b90858b52828b20600585808801821c830193868910612051575b01901c019061441b565b8e611f73565b93508293612041565b634e487b7160e01b885260418b528888fd5b5096949092919593835192865192608084019284841090841117612103575050968260606001937f80b33e5b301f2e6b22c78539ac65b4bd422a733c910c74bcee1656b5a7fa2571999a89528781528460208201528480831b03841689820152015284601555601654906101008360681b039060081b1690828060681b03191617176016556017555182519182526020820152a180f35b604190634e487b7160e01b600052526000fd5b875162461bcd60e51b8152602081880152601181860152704d7573742070726f76696465205552497360781b6044820152606490fd5b5050346104065781600319360112610406576020906010549051908152f35b5091346103d25760203660031901126103d25750610a4560209235613ae8565b50346103d55760203660031901126103d5579181923581526019602052209061043882549160ff6001850154946121c960036002830154920161368d565b9280519687968752602087015260018060a01b0382169086015260a01c161515606084015260a0608084015260a0830190613502565b5090346103d55760208060031936011261234a5782359161221e614b89565b61222783614f4c565b1561230f5766038d7ea4c68000938447106122ce578386528280528186206002429101558580808088335af161225b6141d8565b50156122945750907f9551b3421e4e80d78a909881c692bf94ee58d223e4b6629c7ae67971afa6297d91519384523393a36001600e5580f35b82606492519162461bcd60e51b8352820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152fd5b82606492519162461bcd60e51b8352820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b5162461bcd60e51b81529283015250601760248201527610d85b9b9bdd0818db185a5b481c995dd85c99081e595d604a1b6044820152606490fd5b8380fd5b50346103d55760203660031901126103d557612368613527565b6123706139d2565b6001600160a01b0316918215612399575050601280546001600160a01b03191691909117905580f35b906020606492519162461bcd60e51b8352820152601a602482015279496e76616c69642058434d20427269646765206164647265737360301b6044820152fd5b5090346103d55760208060031936011261234a57823592838552601b825261240660ff8487205416614df3565b838552601d82528285203360005282528260002054848652601c8352838620540361252f5750906019600292848652601b815282862060ff1990818154169055601c82528684812055601d825283872033600052825260018460002001908154169055848652601d81528286203360005281526000848482200155848652601d8152828620336000528152858360002055848652601e8152828620805487825580612516575b50506124c185336124bc82613ae8565b613e35565b84865252808420820180546001600160a01b03191633908117909155908420909101805460ff60a01b19169055907f7be71752f68c15e043adc3b4f121846c1f4860a79b7e8ecc932ddbc10e63b4938380a380f35b6125289188528288209081019061441b565b38806124ac565b915162461bcd60e51b81529182015260166024820152754d757374206f776e20616c6c206672616374696f6e7360501b6044820152606490fd5b5082346103d25760203660031901126103d25750803590600a548210156125a45760208361259684613989565b91905490519160031b1c8152f35b608490602084519162461bcd60e51b8352820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152fd5b505081600319360112610406576126116139d2565b612619614b89565b8180808060018060a01b03600d5416479082821561264b575bf11561264157506001600e5580f35b51903d90823e3d90fd5b506108fc612632565b5082346103d257826003193601126103d257829061267061353d565b92358152601d602052209060018060a01b03166000526020528060002090610438825491600260ff600186015416940154905193849384613583565b50503461040657610e8e610e93916126c336613733565b919251926126d08461364f565b868452610e7e610e798433613d6d565b50906126eb366138c8565b9290936126f6614b89565b8286526020601b815261270e60ff8489205416614df3565b838752601d81528287206001600160a01b0390961660008181529682529583902060018101805461274160ff8216614e86565b82549488861061283057509189917f1627aae413729dbd2259e0b88c1ff1b5ffeffb77cf4cb85bb9fdd3b48aef08ec9695949360028301926127998b85549861279461278d838c614377565b3414614ecd565b614c1f565b80915515612820575b505050859052601d8152828820336000528152826000206127c4878254614c74565b9055848852601d815282882033600052815285836000205414612808575b6127f588808080348c5af161061a6141d8565b82519586528501523393a46001600e5580f35b848852601e815261281b33848a20614d20565b6127e2565b60ff1916905555873880806127a2565b865162461bcd60e51b8152908101859052601f60248201527f496e73756666696369656e74206672616374696f6e7320666f722073616c65006044820152606490fd5b50829034610406578160031936011261040657600f549082918360015b82811115612a0a57506128a2846138f2565b936128af8751958661366a565b8085526128be601f19916138f2565b01855b8181106129f35750506001905b828211156129355750505050825191602080840190808552835180925280868601968360051b870101940192955b8287106129095785850386f35b909192938280612925600193603f198a82030186528851613884565b96019201960195929190926128fc565b81865260206019815260ff600290818a8a2001548160a091821c16612969575b505050509061296390614ab4565b906128ce565b916003916129af938c8c20928d5196612981886135fe565b845488526001850154908801528301546001600160a01b0381168e880152901c16151560608501520161368d565b60808201526129be8287614ac3565b526129c98186614ac3565b50600181018091116129e057612963888080612955565b634e487b7160e01b865260118452602486fd5b6020906129fe614c81565b828289010152016128c1565b808652601960205260ff6002888820015460a01c16612a32575b612a2d90614ab4565b612890565b93600181018091116129e05793612a24565b505034610406578160031936011261040657600f54829160015b82811115612c6c5750612a7084614a82565b92612a7a856138f2565b612a868351918261366a565b858152612a92866138f2565b95612aa960209182840198601f1901368a37614d60565b948360015b82811115612b165750505080612ace855197606089526060890190613804565b928784038289015251928381520196925b828110612af9578688038588015286806104388a89613838565b83516001600160a01b031688529681019692810192600101612adf565b808694959652601b855260ff808886205416612b40575b50612b3790614ab4565b94939294612aae565b95909499928a9993601e8b9a969a99949952838a208451908b829e8f93818454918281520193835281832092915b818310612c4c575050505090612b8591038d61366a565b895b8c51811015612c34576001600160a01b03612ba2828f614ac3565b5116888c528c8c601d8083528882208460005283528c60018a600020015416612bd8575b50505050612bd390614ab4565b612b87565b91888492612bd3969f948e612c2a97612bfe8f8e84612bf88c8094614ac3565b52614ac3565b5282528352209160005252612c1587600020614dc6565b612c1f828b614ac3565b52611b40818a614ac3565b99908c8c38612bc6565b509a50929894612b3791965097939796919690612b2d565b83546001600160a01b031685529384019360019384019390920191612b6e565b80849594526020601b815260ff90818488205416612c98575b5050612c9090614ab4565b939293612a5e565b90929195601e829695965282812095835190818885829a54948581520190855285852085945b87818710612d4b57505050612cd6929350038861366a565b815b8751811015612d37576001600160a01b03612cf3828a614ac3565b5116898452601d855285842090600052845285600186600020015416612d22575b612d1d90614ab4565b612cd8565b95612d2f612d1d91614ab4565b969050612d14565b50949550959050612c909192509038612c85565b82546001600160a01b0316845260019687019693019290910190612cbe565b50346103d55760603660031901126103d557612d84613527565b92602435906001600160401b0382116103d2575092612dab611ecd926020953691016137d0565b612db36137ee565b91614432565b50503461040657612dc936613768565b91818452601b602052612de160ff8286205416614df3565b818452601d6020528084203360005260205282600282600020612e0681541515614e3b565b612e11831515614b1b565b60018101600160ff198254161790550155519182527f3382ea94535bc0551c94db631d3eb5c3f8a2fddd798febf376dea509f070f32760203393a380f35b5091346103d257816003193601126103d257612e69613527565b60243590612e7681613a2a565b821015612ea4576001600160a01b031682526008602090815283832091835290815290829020548251908152f35b835162461bcd60e51b8152602081870152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b5050346104065781600319360112610406576020906011549051908152f35b8284346103d25750612f34612f2e36613768565b9061438a565b82516001600160a01b0390921682526020820152f35b83346103d257610e93612f5c36613733565b916124bc610e798433613d6d565b5082903461040657602036600319011261040657803590601754821015612fa257610438846109ca818686815260226020522061368d565b606490602085519162461bcd60e51b8352820152601760248201527655524920696e646578206f7574206f6620626f756e647360481b6044820152fd5b505034610406578160031936011261040657602090600a549051908152f35b50346103d55760203660031901126103d55781610438936109ca9235815260226020522061368d565b50346103d55760203660031901126103d557918192358152602080522090610438825491600260ff600186015416940154905193849384613583565b5091903461040657602036600319011261040657823592613082614b89565b83835260196020528260018382206002810180546130a560ff8260a01c16614bdf565b6130b733858060a01b03831614614ad7565b60ff60a01b191690550155303b156103d5579082846130ec93835194859283926323b872dd60e01b8452339030908501614b67565b038183305af190811561313e575061312f575b509033907f60cc235e8ad06a974c643760abf54bf5e4f4f3a4c899d5142dda2caa5e5060d58380a36001600e5580f35b613138906135d5565b386130ff565b513d84823e3d90fd5b50346103d557816003193601126103d5578035916024356001600160401b038111611d07576131799036908401613553565b613184939193614b89565b601154156132bb573386526020936021855260ff848820541661328657906131ad918633615039565b1561323b5750907f650e45f04ef8a0c267b2f78d983913f69ae3a353b2b32de5429307522be0ab559133855260218252808520600160ff198254161790556131f984336124bc82613ae8565b83855260198252808520600290810180546001600160a01b03191633908117909155828720909101805460ff60a01b19169055905193845292a26001600e5580f35b82608492519162461bcd60e51b8352820152602160248201527f4e6f7420696e2077686974656c697374206f7220696e76616c69642070726f6f6044820152603360f91b6064820152fd5b835162461bcd60e51b8152808401869052600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606490fd5b506020606492519162461bcd60e51b8352820152601360248201527213595c9adb19481c9bdbdd081b9bdd081cd95d606a1b6044820152fd5b505034610406573660031901126103d257610e93613310613527565b60243590613b0b565b5091346103d25760203660031901126103d25750610a4560209235613c68565b5050346104065781600319360112610406578051908260025461335b8161359b565b808552906001908181169081156133e05750600114613387575b5050506112e18261043894038361366a565b60028352602095507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106133cd5750505082610438946112e19282010194613375565b80548685018801529286019281016133b1565b61043897506112e19450602092508693915060ff191682840152151560051b82010194613375565b5050346104065781600319360112610406576020905161012c8152f35b925050346103d55760203660031901126103d5573563ffffffff60e01b81168091036103d55760209250632483248360e11b8114908115613468575b5015158152f35b63780e9d6360e01b811491508115613482575b5038613461565b6380ac58cd60e01b8114915081156134ce575b81156134a3575b503861347b565b63152a902d60e11b8114915081156134bd575b503861349c565b6301ffc9a760e01b149050386134b6565b635b5e139f60e01b81149150613495565b60005b8381106134f25750506000910152565b81810151838201526020016134e2565b9060209161351b815180928185528580860191016134df565b601f01601f1916010190565b600435906001600160a01b038216820361110757565b602435906001600160a01b038216820361110757565b9181601f84011215611107578235916001600160401b038311611107576020808501948460051b01011161110757565b60409194939260608201958252151560208201520152565b90600182811c921680156135cb575b60208310146135b557565b634e487b7160e01b600052602260045260246000fd5b91607f16916135aa565b6001600160401b0381116135e857604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b038211176135e857604052565b606081019081106001600160401b038211176135e857604052565b604081019081106001600160401b038211176135e857604052565b602081019081106001600160401b038211176135e857604052565b601f909101601f19168101906001600160401b038211908210176135e857604052565b90604051918260008254926136a18461359b565b90818452600194858116908160001461371057506001146136cd575b50506136cb9250038361366a565b565b9093915060005260209081600020936000915b8183106136f85750506136cb935082010138806136bd565b855488840185015294850194879450918301916136e0565b9150506136cb94506020925060ff191682840152151560051b82010138806136bd565b6060906003190112611107576001600160a01b0390600435828116810361110757916024359081168103611107579060443590565b6040906003190112611107576004359060243590565b6001600160401b0381116135e857601f01601f191660200190565b9291926137a58261377e565b916137b3604051938461366a565b829481845281830111611107578281602093846000960137010152565b9080601f83011215611107578160206137eb93359101613799565b90565b604435906001600160601b038216820361110757565b90815180825260208080930193019160005b828110613824575050505090565b835185529381019392810192600101613816565b90815180825260208080930193019160005b828110613858575050505090565b83518051865280830151151586840152604090810151908601526060909401939281019260010161384a565b9060a060806137eb938051845260208101516020850152600180841b0360408201511660408501526060810151151560608501520151918160808201520190613502565b606090600319011261110757600435906024356001600160a01b0381168103611107579060443590565b6001600160401b0381116135e85760051b60200190565b9080601f8301121561110757813590613921826138f2565b9261392f604051948561366a565b828452602092838086019160051b8301019280841161110757848301915b84831061395d5750505050505090565b82356001600160401b03811161110757869161397e848480948901016137d0565b81520192019161394d565b600a548110156139a457600a60005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b80548210156139a45760005260206000200190600090565b600d546001600160a01b031633036139e657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b03168015613a4a57600052600560205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b15613aa857565b60405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606490fd5b6000908152600460205260409020546001600160a01b03166137eb811515613aa1565b6001600160a01b038080613b1e85613ae8565b16921691808314613c1957803314908115613bf4575b5015613b8957600083815260066020526040902080546001600160a01b03191683179055613b6183613ae8565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b9050600052600760205260406000203360005260205260ff6040600020541638613b34565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b613c79613c74826141bb565b613aa1565b6000908152600660205260409020546001600160a01b031690565b15613c9b57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b15613d5057565b60405162461bcd60e51b815280613d6960048201613cf6565b0390fd5b906001600160a01b038080613d8184613ae8565b16931691838314938415613db4575b508315613d9e575b50505090565b613daa91929350613c68565b1614388080613d98565b909350600052600760205260406000208260005260205260ff604060002054169238613d90565b15613de257565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b613e5991613e4284613ae8565b6001600160a01b0393848416939185168414613ddb565b83821693841561416a57831584811593848095614162575b80614154575b6140e1575b8215614026575050600a549287600052600b60205283604060002055600160401b8410156135e857613f3e94613ed889613ebd8760018b9901600a55613989565b90919082549060031b600019811b9283911b16911916179055565b848803613ff3575b5080613feb575b15613fd25750613f1f604051613efc81613619565b428152600060208201526000604082015287600052602080526040600020614cf0565b8482141580613fb9575b613fa4575b613f3786613ae8565b1614613ddb565b6000805160206153e7833981519152600084815260066020526040812060018060a01b03199081815416905583825260056020526040822060001981540190558482526040822060018154019055858252600460205284604083209182541617905580a4565b85600052601f60205260006040812055613f2e565b5085600052601f60205280604060002054161515613f29565b15613f1f57613fe6604051613efc81613619565b613f1f565b506001613ee7565b613ffc90613a2a565b6040600089815260086020528181208382526020528a828220558a81526009602052205538613ee0565b878295920361403a575b50613f3e94613ed8565b614045919450613a2a565b6000198101939084116140cb57613f3e9486946000908a82526020906009825260409182842054828103614094575b508c84528383812055888452600881528284209184525281205594614030565b898552600882528385208386528252838520548a865260088352848620828752835280858720558552600982528385205538614074565b634e487b7160e01b600052601160045260246000fd5b905087600052601360205260ff60406000205416614100578590613e7c565b60405162461bcd60e51b815260206004820152602660248201527f4e4654206973206c6f636b656420666f722063726f73732d636861696e20747260448201526530b739b332b960d11b6064820152608490fd5b508360125416331415613e77565b506001613e71565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6000908152600460205260409020546001600160a01b0316151590565b3d15614203573d906141e98261377e565b916141f7604051938461366a565b82523d6000602084013e565b606090565b9091600091803b156142f3576142536020918493604051948580948193630a85bd0160e11b9a8b84523360048501528460248501526044840152608060648401526084830190613502565b03926001600160a01b03165af1908290826142ab575b505061429d576142776141d8565b805190816142985760405162461bcd60e51b815280613d6960048201613cf6565b602001fd5b6001600160e01b0319161490565b909192506020813d82116142eb575b816142c76020938361366a565b810103126104065751906001600160e01b0319821682036103d25750903880614269565b3d91506142ba565b50505050600190565b91926000929190813b1561436d576020916143529185604051958680958194630a85bd0160e11b9b8c845233600485015260018060a01b0380951660248501526044840152608060648401526084830190613502565b0393165af1908290826142ab57505061429d576142776141d8565b5050505050600190565b818102929181159184041417156140cb57565b91909160005260016020526040600020604051906143a782613634565b546001600160a01b0380821680845260a09290921c6020840152919390156143ee575b6020840151612710916143e6916001600160601b031690614377565b049251169190565b92506127106143e660405161440281613634565b600054848116825260a01c6020820152949150506143ca565b818110614426575050565b6000815560010161441b565b929190926001600f54019182600f5560405161444d8161364f565b600081526001600160a01b0383161561499f5761447261446c856141bb565b156149e3565b600a5484600052600b60205280604060002055600160401b8110156135e857614574916144ac86613ebd846001610e8e9601600a55613989565b6144b585613a2a565b60018060a01b0386166000526008602052604060002081600052602052866040600020558660005260096020526040600020556144f7604051613efc81613619565b601f6020526040600020546001600160a01b0316614993575b61451c61446c876141bb565b6001600160a01b0385166000818152600560209081526040808320805460010190558983526004909152812080546001600160a01b031916831790558791906000805160206153e78339815191528180a48585614208565b61457d836141bb565b15614937576000838152600c6020526040902085516001600160401b0381116135e8576145aa825461359b565b601f8111614905575b50806020601f821160011461489f57600091614894575b508160011b916000199060031b1c19161790555b7ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce76020604051858152a16001600160601b031690612710821161483c5760405160039261462a82613634565b6001600160a01b038381168084526020808501938452600088815260018252604080822096519551959094166001600160a01b031960a09690961b861617909555601a815291909320805490921690921790556146c190614689614a2e565b60405197816146a18a935180928680870191016134df565b82016146b5825180938680850191016134df565b0103808852018661366a565b604051906146ce826135fe565b838252600060208084018281526001600160a01b03938416604080870191825260608701858152608088019b8c52898652601990945290932094518555516001850155905160028401805492516001600160a81b0319909316919093161790151560a01b60ff60a01b1617905593518051909491909101906001600160401b0381116135e85761475e825461359b565b601f811161480a575b50602094601f82116001146147a65794819293949560009261479b575b50508160011b916000199060031b1c191617905590565b015190503880614784565b601f198216958360005260206000209160005b8881106147f2575083600195969798106147d9575b505050811b01905590565b015160001960f88460031b161c191690553880806147ce565b919260206001819286850151815501940192016147b9565b61483690836000526020600020601f840160051c8101916020851061191757601f0160051c019061441b565b38614767565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b9050870151386145ca565b6000848152602081209250601f198416905b8a8282106148ed57505090836001949392106148d4575b5050811b0190556145de565b89015160001960f88460031b161c1916905538806148c8565b600184956020939584930151815501940192016148b1565b61493190836000526020600020601f840160051c8101916020851061191757601f0160051c019061441b565b386145b3565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608490fd5b60006040812055614510565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b156149ea57565b60405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606490fd5b60405190614a3b82613619565b603282527170696e6174612e636c6f75642f697066732f60701b6040837f68747470733a2f2f617175612d66616d6f75732d6b6f616c612d3337302e6d7960208201520152565b90614a8c826138f2565b614a99604051918261366a565b8281528092614aaa601f19916138f2565b0190602036910137565b60001981146140cb5760010190565b80518210156139a45760209160051b010190565b15614ade57565b60405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606490fd5b15614b2257565b60405162461bcd60e51b815260206004820152601f60248201527f5072696365206d7573742062652067726561746572207468616e207a65726f006044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b6002600e5414614b9a576002600e55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15614be657565b60405162461bcd60e51b8152602060048201526011602482015270139195081a5cc81b9bdd081b1a5cdd1959607a1b6044820152606490fd5b919082039182116140cb57565b15614c3357565b60405162461bcd60e51b8152602060048201526019602482015278151c985b9cd9995c881d1bc81cd95b1b195c8819985a5b1959603a1b6044820152606490fd5b919082018092116140cb57565b60405190614c8e826135fe565b60606080836000815260006020820152600060408201526000838201520152565b15614cb657565b60405162461bcd60e51b815260206004820152601260248201527113919508191bd95cc81b9bdd08195e1a5cdd60721b6044820152606490fd5b90604060029180518455614d1960208201511515600186019060ff801983541691151516179055565b0151910155565b8054600160401b8110156135e857614d3d916001820181556139ba565b819291549060031b9160018060a01b039283811b93849216901b16911916179055565b90614d6a826138f2565b604090614d798251918261366a565b8381528093614d8a601f19916138f2565b0191600091825b848110614d9f575050505050565b6020908351614dad81613619565b8581528286818301528686830152828501015201614d91565b90604051614dd381613619565b6040600282948054845260ff600182015416151560208501520154910152565b15614dfa57565b60405162461bcd60e51b8152602060048201526019602482015278139195081a5cc81b9bdd08199c9858dd1a5bdb985b1a5e9959603a1b6044820152606490fd5b15614e4257565b60405162461bcd60e51b815260206004820152601c60248201527b596f7520646f206e6f74206f776e20616e79206672616374696f6e7360201b6044820152606490fd5b15614e8d57565b60405162461bcd60e51b81526020600482015260186024820152774672616374696f6e206973206e6f7420666f722073616c6560401b6044820152606490fd5b15614ed457565b60405162461bcd60e51b8152602060048201526018602482015277125b98dbdc9c9958dd081c185e5b595b9d08185b5bdd5b9d60421b6044820152606490fd5b6000908152601f602052604090205460a01c6001600160401b03164211614f47576040600020546001600160a01b031690565b600090565b614f58611514826141bb565b614f6181613ae8565b336001600160a01b0390911603614fb95760005260208052614f866040600020614dc6565b614f9f6040614f96835142614c1f565b92015142614c1f565b9061012c809110159182614fb257505090565b1015919050565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606490fd5b15614ff557565b60405162461bcd60e51b815260206004820152601c60248201527b05072696365206d7573742062652067726561746572207468616e20360241b6044820152606490fd5b9192939060409283516020928382019260018060601b03199060601b16835260348201526034815261506a81613619565b5190206011549461507a876138f2565b966150878651988961366a565b8088528388019060051b820191368311611107578490915b8383106151045750505050916000925b86518410156150fa576150c28488614ac3565b5190856000838310156150ea57505060005282526150e4846000205b93614ab4565b926150af565b90916150e49382528552206150de565b9350945050501490565b823581529181019185910161509f565b1561511b57565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b615163613c74826141bb565b6000818152602090600c825260409061517d82822061368d565b615185614a2e565b805191821561539c57805161536b575050506151a3613c74856141bb565b6151ab614a2e565b8051909290156153565790938491908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8181811015615347575b506904ee2d6d415b85acef8160201b905080831015615339575b50662386f26fc100008083101561532a575b506305f5e1008083101561531b575b506127108083101561530c575b5060648210156152fc575b600a809210156152f2575b600190816021818a01996152656152508c61377e565b9b61525d89519d8e61366a565b808d5261377e565b8b8b019890601f1901368a37508a0101905b6152bc575b50505050906152b0946137eb9493925195836152a188955180928880890191016134df565b840191518093868401906134df565b0103808452018261366a565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156152ed57919082615277565b61527c565b956001019561523a565b959060646002910491019561522f565b60049197920491019538615224565b60089197920491019538615217565b60109197920491019538615208565b8691979204910195386151f6565b919750915004819538806151dc565b925092505051906153668261364f565b815290565b9195509150846153886137eb9594519687948680870191016134df565b82016152b0825180938680850191016134df565b955050505050509056fe6decc0edd62bc66dd462d841e96d5888ee2452307a8352b9bd66e442d6a23ee08be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212208d98855291765160402e1ae4cca56030cd515e7bdb7401ecc67ba1ee1917760c64736f6c63430008110033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714613425575080630410b7091461340857806306fdde0314613339578063081812fc14613319578063095ea7b3146132f45780630bcae1ac14613147578063100616311461306357806314e8e14a14611b8b578063150a533114613027578063165c33c614612ffe57806318160ddd14612fdf5780631e006e0c14612f6a57806323b872dd14612f4a5780632a55205a14612f1a5780632eb4a7ab14612efb5780632f745c5914612e4f578063302aa17c14612db95780633877248d14612d6a57806338b05ec914612a445780633b1b1ad01461287357806340dbc8a6146126e057806342842e0e146126ac578063474b166814612654578063476343ee146125fc5780634f6ccce71461256957806358dc2cdb146123d95780635d5520ae1461234e57806360dfd2b2146121ff578063628213961461218b5780636352211e1461216b5780636873c1cc1461124d5780636a1b7ecc1461214c5780636fba603f14611ed457806370a0823114611ea7578063715018a614611e5b5780637209f8cf14611d4957806373b2e80e14611d0b57806373befb1a14611bb2578063766de47f14611b8b57806376d2a03414611a565780637b66398514611a2d5780637cb64759146119e0578063883efa67146116ea5780638997bf84146116575780638da5cb5b1461162e5780638fbd6b1f146115cc5780638fc88c4814611596578063939d8b94146114f357806394e53ea71461137557806395d89b411461129357806398bdf6f5146112745780639a5e6d231461124d5780639c281e791461110c5780639c2b4daa14611003578063a22cb46514611035578063a66be8bb14610c7a578063b408fd6914611003578063b802016614610e9a578063b86b19de14610540578063b88d4fde14610e0c578063ba3b80da14610ca6578063c213ec4814610c7a578063c2e017e514610a56578063c2f1f14a14610a25578063c38b761c146109dd578063c87b56dd146109a9578063c95c6f3c14610989578063cf7dea3614610940578063d32060d81461091e57838163d9dcd9ba1461088a57508063e030565e1461077f578063e7fb74c71461056c578063e97b319014610540578063e985e9c5146104f0578063f2fde38b1461043c578063f82d85731461040a578063fa519f9d146103d95763faf7a8261461037f57600080fd5b346103d55760603660031901126103d557610398613527565b92604435906001600160401b0382116103d25750926103bf6103c992602095369101613553565b9160243590615039565b90519015158152f35b80fd5b8280fd5b83823461040657602036600319011261040657356103f56139d2565b610400811515614fee565b60155580f35b5080fd5b8284346103d257806003193601126103d2575060155461043860ff6016541692601754905193849384613583565b0390f35b50346103d55760203660031901126103d557610456613527565b9061045f6139d2565b6001600160a01b0391821692831561049e575050600d80546001600160a01b031981168417909155166000805160206153c7833981519152600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b50503461040657806003193601126104065760209161050d613527565b8261051661353d565b9260018060a01b03809316815260078652209116600052825260ff81600020541690519015158152f35b50346103d55760203660031901126103d5578160209360ff92358152601b855220541690519015158152f35b509060203660031901126103d5578135610584614b89565b8084526019602052818420600281019260018454926105a860ff8560a01c16614bdf565b01948554340361074b5760ff60a01b19831685558692836105c9348761438a565b506001600160a01b03939092848416908516036106ba575b875489546001600160a01b0319821633179099559882905596978316966106208280808061060f8b34614c1f565b8d5af161061a6141d8565b50614c2c565b303b1561040657818761064992875193849283926323b872dd60e01b8452339030908501614b67565b038183305af180156106b057610698575b505082519687521660208601528401527f38ed573e5b0a36d956d10e556b61bd974cc43bfdf59bffec98b5af39e5ce73bb60603394a46001600e5580f35b6106a1906135d5565b6106ac57873861065a565b8780fd5b85513d84823e3d90fd5b945050506106c8348561438a565b9388858484826106dc575b505050906105e1565b839283928392165af16106ed6141d8565b50156106fc57883884816106d3565b608490602085519162461bcd60e51b8352820152602360248201527f5472616e7366657220746f20726f79616c7479207265636569766572206661696044820152621b195960ea1b6064820152fd5b6020606492519162461bcd60e51b8352820152600f60248201526e496e636f727265637420707269636560881b6044820152fd5b50346103d55760603660031901126103d55780359061079c61353d565b604435936001600160401b03851692909190838603610886576107bf8533613d6d565b156108315750838652601f602090815282872080546001600160e01b0319166001600160a01b0390931692831760a09790971b600160a01b600160e01b0316969096179095559051918252927f4e06b4e7000e659094299b3533b47b6aa8ad048e95e872d23d1f4ee55af89cfe91a380f35b608490602084519162461bcd60e51b8352820152602960248201527f455243343930373a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152fd5b8680fd5b91905034610406576020366003190112610406576002903592838352601b6020526108ba60ff8285205416614df3565b838352601d602052808320336000526020526000206001810180546108e160ff8216614e86565b6108ed83541515614e3b565b60ff19169055015533907f2c29c87ef16c6135cfda3989f658daaf049df7e9157c9b57c846e1ce3a1abf278380a380f35b5050346104065781600319360112610406576020905166038d7ea4c680008152f35b5050346104065761095036613768565b92908152601e6020528181209081548410156103d25750602092610973916139ba565b905491519160018060a01b039160031b1c168152f35b5091346103d25760203660031901126103d257506103c960209235614f4c565b5091346103d25760203660031901126103d257506109ca6104389235615157565b9051918291602083526020830190613502565b505034610406578160031936011261040657608090601554906016549060175491815193845260ff81161515602085015260018060601b039060081c16908301526060820152f35b5091346103d25760203660031901126103d25750610a4560209235614f14565b90516001600160a01b039091168152f35b50346103d557610a6536613768565b9092610a7084613ae8565b336001600160a01b0390911603610c3c57838552602092601b845260ff8287205416610bfe578215610bab578486526019845260ff6002838820015460a01c16610b465750907f5569d27c5ca66b9bd7549eaaa0c687144265ac6c25a7615b036bac8fc82c76b49291848652601b8352808620600160ff19825416179055601c83528181872055610b2b8151610b0581613619565b83815287858201528783820152868852601d855282882033600052855282600020614cf0565b848652601e8352610b3e33828820614d20565b51908152a280f35b83608492519162461bcd60e51b8352820152603b60248201527f4e46542069732063757272656e746c79206c69737465642c206d75737420646560448201527a6c697374206265666f7265206672616374696f6e616c697a696e6760281b6064820152fd5b83608492519162461bcd60e51b8352820152602960248201527f546f74616c206672616374696f6e73206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152fd5b83606492519162461bcd60e51b8352820152601a60248201527913919508185b1c9958591e48199c9858dd1a5bdb985b1a5e995960321b6044820152fd5b5162461bcd60e51b81526020818401526019602482015278139bdd081d1a19481bdddb995c881bd9881d1a1a5cc8139195603a1b6044820152606490fd5b50346103d55760203660031901126103d5578160209360ff923581526013855220541690519015158152f35b50346103d557610cb536613768565b6012549192916001600160a01b039081163303610dc957610cdd610cd8856141bb565b615114565b8386526020926013845260ff868820541615610d955782875260148452848688205403610d5b5750907feb47d65891ede4301933ba6048a417fcc3c59c7272f62e895f55210d8907448592918487526013835285872060ff19815416905581875260148352600086882055610d5185613ae8565b169451908152a380f35b855162461bcd60e51b81529081018490526014602482015273092dcecc2d8d2c840dacae6e6c2ceca40d0c2e6d60631b6044820152606490fd5b855162461bcd60e51b8152908101849052600e60248201526d139195081b9bdd081b1bd8dad95960921b6044820152606490fd5b845162461bcd60e51b8152602081850152601f60248201527f4f6e6c792058434d204272696467652063616e20756e6c6f636b204e465473006044820152606490fd5b83823461040657608036600319011261040657610e27613527565b90610e3061353d565b6064359290604435906001600160401b038511610e965736602386011215610e9657610e6b610e8e94866024610e9398369301359101613799565b92610e7e610e798433613d6d565b613c94565b610e89838383613e35565b6142fc565b613d49565b80f35b8580fd5b50826003193601126103d557610eae614b89565b6016549060ff821615610fc457610ec86015543414614ecd565b601754908115610f815750907f97abd941e57ce5fabac149412bd989faf94503d1cb37cf447b5d8898d50e6a9291610f01601854614ab4565b806018558451602081019142835244878301523360601b6060830152607482015260748152610f2f816135fe565b5190200684526022602052610f5c610f4884862061368d565b9160081c6001600160601b03168233614432565b610f76845192839283528560208401523395830190613502565b0390a26001600e5580f35b606490602085519162461bcd60e51b8352820152602060248201527f4e6f204e46547320617661696c61626c6520696e206d79737465727920626f786044820152fd5b606490602084519162461bcd60e51b835282015260196024820152784d79737465727920626f78206973206e6f742061637469766560381b6044820152fd5b50346103d55760203660031901126103d557358252601a6020908152918190205490516001600160a01b039091168152f35b5090346103d557806003193601126103d55761104f613527565b9060243580151592838203611107576001600160a01b0316933385146110c8575061109b90338652600760205282862085600052602052826000209060ff801983541691151516179055565b519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b606490602084519162461bcd60e51b8352820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152fd5b600080fd5b5091346103d25760603660031901126103d257611127613527565b6024356001600160401b0381116103d5576111459036908601613909565b61114d6137ee565b9481511561120a5760328251116111b757506111698151614a82565b925b81518110156111a2578061118d8761118661119d9486614ac3565b5186614432565b6111978287614ac3565b52614ab4565b61116b565b84516020808252819061043890820187613804565b608490602086519162461bcd60e51b8352820152602760248201527f4d6178696d756d203530204e4654732063616e206265206d696e74656420617460448201526620612074696d6560c81b6064820152fd5b606490602086519162461bcd60e51b8352820152601d60248201527f4d7573742070726f76696465206174206c65617374206f6e65205552490000006044820152fd5b50346103d55760203660031901126103d55760209282913581526014845220549051908152f35b505034610406578160031936011261040657602090600f549051908152f35b8284346103d257806003193601126103d2575080516000916003546112b78161359b565b80845260019180831690811561134d57506001146112f3575b50506112e18261043894038361366a565b51918291602083526020830190613502565b6003600090815260209550917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061133a575050508201909201916112e1826112d0565b8054868501880152928601928101611321565b61043896506112e193506020915091859260ff191682840152151560051b82010194506112d0565b5090346103d557611385366138c8565b82869493929452602094601b86526113a260ff8589205416614df3565b828752601d86528387203360005286528360002080548381106114b757600182019081549360ff85166114605750906113de858b959493614c1f565b8083551561144c575b505050829052601d855282862060018060a01b0385169081600052865283600020611413838254614c74565b9055828752601d8652838720906000528552826000205414611433578480f35b61144493601e918652528320614d20565b388080808480f35b60029260ff191690550155853880806113e7565b875162461bcd60e51b81529081018a9052602b60248201527f43616e6e6f74207472616e73666572206672616374696f6e732074686174206160448201526a726520666f722073616c6560a81b6064820152608490fd5b855162461bcd60e51b81528084018990526016602482015275496e73756666696369656e74206672616374696f6e7360501b6044820152606490fd5b5091346103d25760203660031901126103d2578235611519611514826141bb565b614caf565b81526020805261152a828220614dc6565b90815192806020840151151593015191821560001461157e5761012c85019081861161156b575060809550925b815194855260208501528301526060820152f35b634e487b7160e01b815260118752602490fd5b61012c83019081841161156b57506080955092611557565b50346103d55760203660031901126103d557358252601f60209081529181902054905160a09190911c6001600160401b03168152f35b50346103d55760203660031901126103d5573590811515809203611107577f2df160d881060c80321d66098fc31487890660418a73a9bd858ead9857a39ae6916020916116176139d2565b60ff196016541660ff83161760165551908152a180f35b505034610406578160031936011261040657600d5490516001600160a01b039091168152602090f35b50346103d55760203660031901126103d55761043892829135611678614c81565b50611685611514826141bb565b8152601960205220906116d3600382519361169f856135fe565b805485526001810154602086015260028101546001600160a01b0381168587015260a01c60ff16151560608601520161368d565b608083015251918291602083526020830190613884565b50906116f536613768565b916116fe614b89565b601054908134036119a75761171283613ae8565b6001600160a01b0392906117299084163314614ad7565b611734851515614b1b565b838752602092601b845260ff838920541661196457878080938193600d541682821561195b575bf1156119525761176b8330613b0b565b303b15610e965780516323b872dd60e01b815286908181806117918830338d8501614b67565b038183305af1801561194857611934575b50839052601982528086206002908101805460ff60a01b1916600160a01b179055818720600190810186905582882090910180546001600160a01b03191633179055946117ee84615157565b90848852601984526003838920019180519160018060401b0383116119215750611818835461359b565b601f81116118e8575b508490601f8311600114611877576000805160206153a783398151915295949392918a918361186c575b5050600019600383901b1c191690881b1790555b519384523393a3600e5580f35b01519050388061184b565b838a52858a20601f198416969594938a9390928c5b8981106118d15750836000805160206153a783398151915299106118b8575b505050811b01905561185f565b015160001960f88460031b161c191690553880806118ab565b8282015184558c959093019291880191880161188c565b61191190848b52868b20601f850160051c810191888610611917575b601f0160051c019061441b565b38611821565b9091508190611904565b634e487b7160e01b8a5260419052602489fd5b61193d906135d5565b610e965785386117a2565b83513d84823e3d90fd5b513d86823e3d90fd5b506108fc61175b565b825162461bcd60e51b8152808801859052601e60248201527f43616e6e6f74206c697374206672616374696f6e616c697a6564204e465400006044820152606490fd5b5162461bcd60e51b815260208186015260146024820152734d75737420706179206c697374696e672066656560601b6044820152606490fd5b50346103d55760203660031901126103d5577f42cbc405e4dbf1b691e85b9a34b08ecfcf7a9ad9078bf4d645ccfa1fac11c10b916020913590611a216139d2565b8160115551908152a180f35b50503461040657816003193601126104065760125490516001600160a01b039091168152602090f35b505034610406576020806003193601126103d557611a72613527565b600f5484916001600160a01b031660015b82811115611b4e5750611a9e611a9887614a82565b96614d60565b92809160015b84811115611ad0578751888152806104388989611ac3848e018f613804565b9184830390850152613838565b808352601d808852888420836000528852898960002054611afc575b5050611af790614ab4565b611aa4565b94611b469183611b1083611af79699614ac3565b528686528952898520846000528952611b2b8a600020614dc6565b611b35828a614ac3565b52611b408189614ac3565b50614ab4565b939089611aec565b808452601d85528584208260005285528560002054611b76575b611b7190614ab4565b611a83565b95611b83611b7191614ab4565b969050611b68565b50346103d55760203660031901126103d5576020928291358152601c845220549051908152f35b50829034610406576020806003193601126103d5576001600160401b03908235828111611d0757611be690369085016137d0565b94611bef6139d2565b6017548552602282528420928551928311611cf45750611c0f835461359b565b601f8111611cc6575b5080601f8311600114611c625750839482939492611c57575b50508160011b916000199060031b1c19161790555b611c51601754614ab4565b60175580f35b015190508480611c31565b90601f198316958486528286209286905b888210611cae57505083600195969710611c95575b505050811b019055611c46565b015160001960f88460031b161c19169055848080611c88565b80600185968294968601518155019501930190611c73565b611cee90848652828620601f850160051c81019184861061191757601f0160051c019061441b565b85611c18565b634e487b7160e01b855260419052602484fd5b8480fd5b5050346104065760203660031901126104065760209160ff9082906001600160a01b03611d36613527565b1681526021855220541690519015158152f35b50346103d557611d5836613768565b601254919290916001600160a01b03919082163303611e1857611d7d610cd8856141bb565b838652601360205260ff8587205416611de057507f94ee556512ab445c3c191d6f33a25e0d5a37c113ea8c6391d5ecdb53d47c763b9160209184875260138352858720600160ff19825416179055818752601483528486882055610d5185613ae8565b606490602086519162461bcd60e51b8352820152601260248201527113919508185b1c9958591e481b1bd8dad95960721b6044820152fd5b606490602086519162461bcd60e51b8352820152601d60248201527f4f6e6c792058434d204272696467652063616e206c6f636b204e4654730000006044820152fd5b83346103d257806003193601126103d257611e746139d2565b600d80546001600160a01b031981169091556000906001600160a01b03166000805160206153c78339815191528280a380f35b50503461040657602036600319011261040657602090611ecd611ec8613527565b613a2a565b9051908152f35b50829034610406576060366003190112610406578035916001600160401b0390602490813583811161040657611f0d9036908601613909565b611f156137ee565b611f1d6139d2565b81511561211657611f2f871515614fee565b825b825181101561206c57611f448184614ac3565b51908085526020602281528a86209083519089821161205a57611f67835461359b565b90601f91828111612024575b5080918311600114611fb657508190611fa6958992611fab575b50508160011b916000199060031b1c1916179055614ab4565b611f31565b015190508d80611f8d565b91929394601f198416858a52838a20938a905b82821061200c5750509084611fa697969594939210611ff3575b505050600190811b019055614ab4565b015160001960f88460031b161c191690558c8080611fe3565b80600186978294978701518155019601940190611fc9565b61204b90858b52828b20600585808801821c830193868910612051575b01901c019061441b565b8e611f73565b93508293612041565b634e487b7160e01b885260418b528888fd5b5096949092919593835192865192608084019284841090841117612103575050968260606001937f80b33e5b301f2e6b22c78539ac65b4bd422a733c910c74bcee1656b5a7fa2571999a89528781528460208201528480831b03841689820152015284601555601654906101008360681b039060081b1690828060681b03191617176016556017555182519182526020820152a180f35b604190634e487b7160e01b600052526000fd5b875162461bcd60e51b8152602081880152601181860152704d7573742070726f76696465205552497360781b6044820152606490fd5b5050346104065781600319360112610406576020906010549051908152f35b5091346103d25760203660031901126103d25750610a4560209235613ae8565b50346103d55760203660031901126103d5579181923581526019602052209061043882549160ff6001850154946121c960036002830154920161368d565b9280519687968752602087015260018060a01b0382169086015260a01c161515606084015260a0608084015260a0830190613502565b5090346103d55760208060031936011261234a5782359161221e614b89565b61222783614f4c565b1561230f5766038d7ea4c68000938447106122ce578386528280528186206002429101558580808088335af161225b6141d8565b50156122945750907f9551b3421e4e80d78a909881c692bf94ee58d223e4b6629c7ae67971afa6297d91519384523393a36001600e5580f35b82606492519162461bcd60e51b8352820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152fd5b82606492519162461bcd60e51b8352820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b5162461bcd60e51b81529283015250601760248201527610d85b9b9bdd0818db185a5b481c995dd85c99081e595d604a1b6044820152606490fd5b8380fd5b50346103d55760203660031901126103d557612368613527565b6123706139d2565b6001600160a01b0316918215612399575050601280546001600160a01b03191691909117905580f35b906020606492519162461bcd60e51b8352820152601a602482015279496e76616c69642058434d20427269646765206164647265737360301b6044820152fd5b5090346103d55760208060031936011261234a57823592838552601b825261240660ff8487205416614df3565b838552601d82528285203360005282528260002054848652601c8352838620540361252f5750906019600292848652601b815282862060ff1990818154169055601c82528684812055601d825283872033600052825260018460002001908154169055848652601d81528286203360005281526000848482200155848652601d8152828620336000528152858360002055848652601e8152828620805487825580612516575b50506124c185336124bc82613ae8565b613e35565b84865252808420820180546001600160a01b03191633908117909155908420909101805460ff60a01b19169055907f7be71752f68c15e043adc3b4f121846c1f4860a79b7e8ecc932ddbc10e63b4938380a380f35b6125289188528288209081019061441b565b38806124ac565b915162461bcd60e51b81529182015260166024820152754d757374206f776e20616c6c206672616374696f6e7360501b6044820152606490fd5b5082346103d25760203660031901126103d25750803590600a548210156125a45760208361259684613989565b91905490519160031b1c8152f35b608490602084519162461bcd60e51b8352820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152fd5b505081600319360112610406576126116139d2565b612619614b89565b8180808060018060a01b03600d5416479082821561264b575bf11561264157506001600e5580f35b51903d90823e3d90fd5b506108fc612632565b5082346103d257826003193601126103d257829061267061353d565b92358152601d602052209060018060a01b03166000526020528060002090610438825491600260ff600186015416940154905193849384613583565b50503461040657610e8e610e93916126c336613733565b919251926126d08461364f565b868452610e7e610e798433613d6d565b50906126eb366138c8565b9290936126f6614b89565b8286526020601b815261270e60ff8489205416614df3565b838752601d81528287206001600160a01b0390961660008181529682529583902060018101805461274160ff8216614e86565b82549488861061283057509189917f1627aae413729dbd2259e0b88c1ff1b5ffeffb77cf4cb85bb9fdd3b48aef08ec9695949360028301926127998b85549861279461278d838c614377565b3414614ecd565b614c1f565b80915515612820575b505050859052601d8152828820336000528152826000206127c4878254614c74565b9055848852601d815282882033600052815285836000205414612808575b6127f588808080348c5af161061a6141d8565b82519586528501523393a46001600e5580f35b848852601e815261281b33848a20614d20565b6127e2565b60ff1916905555873880806127a2565b865162461bcd60e51b8152908101859052601f60248201527f496e73756666696369656e74206672616374696f6e7320666f722073616c65006044820152606490fd5b50829034610406578160031936011261040657600f549082918360015b82811115612a0a57506128a2846138f2565b936128af8751958661366a565b8085526128be601f19916138f2565b01855b8181106129f35750506001905b828211156129355750505050825191602080840190808552835180925280868601968360051b870101940192955b8287106129095785850386f35b909192938280612925600193603f198a82030186528851613884565b96019201960195929190926128fc565b81865260206019815260ff600290818a8a2001548160a091821c16612969575b505050509061296390614ab4565b906128ce565b916003916129af938c8c20928d5196612981886135fe565b845488526001850154908801528301546001600160a01b0381168e880152901c16151560608501520161368d565b60808201526129be8287614ac3565b526129c98186614ac3565b50600181018091116129e057612963888080612955565b634e487b7160e01b865260118452602486fd5b6020906129fe614c81565b828289010152016128c1565b808652601960205260ff6002888820015460a01c16612a32575b612a2d90614ab4565b612890565b93600181018091116129e05793612a24565b505034610406578160031936011261040657600f54829160015b82811115612c6c5750612a7084614a82565b92612a7a856138f2565b612a868351918261366a565b858152612a92866138f2565b95612aa960209182840198601f1901368a37614d60565b948360015b82811115612b165750505080612ace855197606089526060890190613804565b928784038289015251928381520196925b828110612af9578688038588015286806104388a89613838565b83516001600160a01b031688529681019692810192600101612adf565b808694959652601b855260ff808886205416612b40575b50612b3790614ab4565b94939294612aae565b95909499928a9993601e8b9a969a99949952838a208451908b829e8f93818454918281520193835281832092915b818310612c4c575050505090612b8591038d61366a565b895b8c51811015612c34576001600160a01b03612ba2828f614ac3565b5116888c528c8c601d8083528882208460005283528c60018a600020015416612bd8575b50505050612bd390614ab4565b612b87565b91888492612bd3969f948e612c2a97612bfe8f8e84612bf88c8094614ac3565b52614ac3565b5282528352209160005252612c1587600020614dc6565b612c1f828b614ac3565b52611b40818a614ac3565b99908c8c38612bc6565b509a50929894612b3791965097939796919690612b2d565b83546001600160a01b031685529384019360019384019390920191612b6e565b80849594526020601b815260ff90818488205416612c98575b5050612c9090614ab4565b939293612a5e565b90929195601e829695965282812095835190818885829a54948581520190855285852085945b87818710612d4b57505050612cd6929350038861366a565b815b8751811015612d37576001600160a01b03612cf3828a614ac3565b5116898452601d855285842090600052845285600186600020015416612d22575b612d1d90614ab4565b612cd8565b95612d2f612d1d91614ab4565b969050612d14565b50949550959050612c909192509038612c85565b82546001600160a01b0316845260019687019693019290910190612cbe565b50346103d55760603660031901126103d557612d84613527565b92602435906001600160401b0382116103d2575092612dab611ecd926020953691016137d0565b612db36137ee565b91614432565b50503461040657612dc936613768565b91818452601b602052612de160ff8286205416614df3565b818452601d6020528084203360005260205282600282600020612e0681541515614e3b565b612e11831515614b1b565b60018101600160ff198254161790550155519182527f3382ea94535bc0551c94db631d3eb5c3f8a2fddd798febf376dea509f070f32760203393a380f35b5091346103d257816003193601126103d257612e69613527565b60243590612e7681613a2a565b821015612ea4576001600160a01b031682526008602090815283832091835290815290829020548251908152f35b835162461bcd60e51b8152602081870152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b5050346104065781600319360112610406576020906011549051908152f35b8284346103d25750612f34612f2e36613768565b9061438a565b82516001600160a01b0390921682526020820152f35b83346103d257610e93612f5c36613733565b916124bc610e798433613d6d565b5082903461040657602036600319011261040657803590601754821015612fa257610438846109ca818686815260226020522061368d565b606490602085519162461bcd60e51b8352820152601760248201527655524920696e646578206f7574206f6620626f756e647360481b6044820152fd5b505034610406578160031936011261040657602090600a549051908152f35b50346103d55760203660031901126103d55781610438936109ca9235815260226020522061368d565b50346103d55760203660031901126103d557918192358152602080522090610438825491600260ff600186015416940154905193849384613583565b5091903461040657602036600319011261040657823592613082614b89565b83835260196020528260018382206002810180546130a560ff8260a01c16614bdf565b6130b733858060a01b03831614614ad7565b60ff60a01b191690550155303b156103d5579082846130ec93835194859283926323b872dd60e01b8452339030908501614b67565b038183305af190811561313e575061312f575b509033907f60cc235e8ad06a974c643760abf54bf5e4f4f3a4c899d5142dda2caa5e5060d58380a36001600e5580f35b613138906135d5565b386130ff565b513d84823e3d90fd5b50346103d557816003193601126103d5578035916024356001600160401b038111611d07576131799036908401613553565b613184939193614b89565b601154156132bb573386526020936021855260ff848820541661328657906131ad918633615039565b1561323b5750907f650e45f04ef8a0c267b2f78d983913f69ae3a353b2b32de5429307522be0ab559133855260218252808520600160ff198254161790556131f984336124bc82613ae8565b83855260198252808520600290810180546001600160a01b03191633908117909155828720909101805460ff60a01b19169055905193845292a26001600e5580f35b82608492519162461bcd60e51b8352820152602160248201527f4e6f7420696e2077686974656c697374206f7220696e76616c69642070726f6f6044820152603360f91b6064820152fd5b835162461bcd60e51b8152808401869052600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606490fd5b506020606492519162461bcd60e51b8352820152601360248201527213595c9adb19481c9bdbdd081b9bdd081cd95d606a1b6044820152fd5b505034610406573660031901126103d257610e93613310613527565b60243590613b0b565b5091346103d25760203660031901126103d25750610a4560209235613c68565b5050346104065781600319360112610406578051908260025461335b8161359b565b808552906001908181169081156133e05750600114613387575b5050506112e18261043894038361366a565b60028352602095507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8284106133cd5750505082610438946112e19282010194613375565b80548685018801529286019281016133b1565b61043897506112e19450602092508693915060ff191682840152151560051b82010194613375565b5050346104065781600319360112610406576020905161012c8152f35b925050346103d55760203660031901126103d5573563ffffffff60e01b81168091036103d55760209250632483248360e11b8114908115613468575b5015158152f35b63780e9d6360e01b811491508115613482575b5038613461565b6380ac58cd60e01b8114915081156134ce575b81156134a3575b503861347b565b63152a902d60e11b8114915081156134bd575b503861349c565b6301ffc9a760e01b149050386134b6565b635b5e139f60e01b81149150613495565b60005b8381106134f25750506000910152565b81810151838201526020016134e2565b9060209161351b815180928185528580860191016134df565b601f01601f1916010190565b600435906001600160a01b038216820361110757565b602435906001600160a01b038216820361110757565b9181601f84011215611107578235916001600160401b038311611107576020808501948460051b01011161110757565b60409194939260608201958252151560208201520152565b90600182811c921680156135cb575b60208310146135b557565b634e487b7160e01b600052602260045260246000fd5b91607f16916135aa565b6001600160401b0381116135e857604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b038211176135e857604052565b606081019081106001600160401b038211176135e857604052565b604081019081106001600160401b038211176135e857604052565b602081019081106001600160401b038211176135e857604052565b601f909101601f19168101906001600160401b038211908210176135e857604052565b90604051918260008254926136a18461359b565b90818452600194858116908160001461371057506001146136cd575b50506136cb9250038361366a565b565b9093915060005260209081600020936000915b8183106136f85750506136cb935082010138806136bd565b855488840185015294850194879450918301916136e0565b9150506136cb94506020925060ff191682840152151560051b82010138806136bd565b6060906003190112611107576001600160a01b0390600435828116810361110757916024359081168103611107579060443590565b6040906003190112611107576004359060243590565b6001600160401b0381116135e857601f01601f191660200190565b9291926137a58261377e565b916137b3604051938461366a565b829481845281830111611107578281602093846000960137010152565b9080601f83011215611107578160206137eb93359101613799565b90565b604435906001600160601b038216820361110757565b90815180825260208080930193019160005b828110613824575050505090565b835185529381019392810192600101613816565b90815180825260208080930193019160005b828110613858575050505090565b83518051865280830151151586840152604090810151908601526060909401939281019260010161384a565b9060a060806137eb938051845260208101516020850152600180841b0360408201511660408501526060810151151560608501520151918160808201520190613502565b606090600319011261110757600435906024356001600160a01b0381168103611107579060443590565b6001600160401b0381116135e85760051b60200190565b9080601f8301121561110757813590613921826138f2565b9261392f604051948561366a565b828452602092838086019160051b8301019280841161110757848301915b84831061395d5750505050505090565b82356001600160401b03811161110757869161397e848480948901016137d0565b81520192019161394d565b600a548110156139a457600a60005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b80548210156139a45760005260206000200190600090565b600d546001600160a01b031633036139e657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b03168015613a4a57600052600560205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b15613aa857565b60405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606490fd5b6000908152600460205260409020546001600160a01b03166137eb811515613aa1565b6001600160a01b038080613b1e85613ae8565b16921691808314613c1957803314908115613bf4575b5015613b8957600083815260066020526040902080546001600160a01b03191683179055613b6183613ae8565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b9050600052600760205260406000203360005260205260ff6040600020541638613b34565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b613c79613c74826141bb565b613aa1565b6000908152600660205260409020546001600160a01b031690565b15613c9b57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b15613d5057565b60405162461bcd60e51b815280613d6960048201613cf6565b0390fd5b906001600160a01b038080613d8184613ae8565b16931691838314938415613db4575b508315613d9e575b50505090565b613daa91929350613c68565b1614388080613d98565b909350600052600760205260406000208260005260205260ff604060002054169238613d90565b15613de257565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b613e5991613e4284613ae8565b6001600160a01b0393848416939185168414613ddb565b83821693841561416a57831584811593848095614162575b80614154575b6140e1575b8215614026575050600a549287600052600b60205283604060002055600160401b8410156135e857613f3e94613ed889613ebd8760018b9901600a55613989565b90919082549060031b600019811b9283911b16911916179055565b848803613ff3575b5080613feb575b15613fd25750613f1f604051613efc81613619565b428152600060208201526000604082015287600052602080526040600020614cf0565b8482141580613fb9575b613fa4575b613f3786613ae8565b1614613ddb565b6000805160206153e7833981519152600084815260066020526040812060018060a01b03199081815416905583825260056020526040822060001981540190558482526040822060018154019055858252600460205284604083209182541617905580a4565b85600052601f60205260006040812055613f2e565b5085600052601f60205280604060002054161515613f29565b15613f1f57613fe6604051613efc81613619565b613f1f565b506001613ee7565b613ffc90613a2a565b6040600089815260086020528181208382526020528a828220558a81526009602052205538613ee0565b878295920361403a575b50613f3e94613ed8565b614045919450613a2a565b6000198101939084116140cb57613f3e9486946000908a82526020906009825260409182842054828103614094575b508c84528383812055888452600881528284209184525281205594614030565b898552600882528385208386528252838520548a865260088352848620828752835280858720558552600982528385205538614074565b634e487b7160e01b600052601160045260246000fd5b905087600052601360205260ff60406000205416614100578590613e7c565b60405162461bcd60e51b815260206004820152602660248201527f4e4654206973206c6f636b656420666f722063726f73732d636861696e20747260448201526530b739b332b960d11b6064820152608490fd5b508360125416331415613e77565b506001613e71565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6000908152600460205260409020546001600160a01b0316151590565b3d15614203573d906141e98261377e565b916141f7604051938461366a565b82523d6000602084013e565b606090565b9091600091803b156142f3576142536020918493604051948580948193630a85bd0160e11b9a8b84523360048501528460248501526044840152608060648401526084830190613502565b03926001600160a01b03165af1908290826142ab575b505061429d576142776141d8565b805190816142985760405162461bcd60e51b815280613d6960048201613cf6565b602001fd5b6001600160e01b0319161490565b909192506020813d82116142eb575b816142c76020938361366a565b810103126104065751906001600160e01b0319821682036103d25750903880614269565b3d91506142ba565b50505050600190565b91926000929190813b1561436d576020916143529185604051958680958194630a85bd0160e11b9b8c845233600485015260018060a01b0380951660248501526044840152608060648401526084830190613502565b0393165af1908290826142ab57505061429d576142776141d8565b5050505050600190565b818102929181159184041417156140cb57565b91909160005260016020526040600020604051906143a782613634565b546001600160a01b0380821680845260a09290921c6020840152919390156143ee575b6020840151612710916143e6916001600160601b031690614377565b049251169190565b92506127106143e660405161440281613634565b600054848116825260a01c6020820152949150506143ca565b818110614426575050565b6000815560010161441b565b929190926001600f54019182600f5560405161444d8161364f565b600081526001600160a01b0383161561499f5761447261446c856141bb565b156149e3565b600a5484600052600b60205280604060002055600160401b8110156135e857614574916144ac86613ebd846001610e8e9601600a55613989565b6144b585613a2a565b60018060a01b0386166000526008602052604060002081600052602052866040600020558660005260096020526040600020556144f7604051613efc81613619565b601f6020526040600020546001600160a01b0316614993575b61451c61446c876141bb565b6001600160a01b0385166000818152600560209081526040808320805460010190558983526004909152812080546001600160a01b031916831790558791906000805160206153e78339815191528180a48585614208565b61457d836141bb565b15614937576000838152600c6020526040902085516001600160401b0381116135e8576145aa825461359b565b601f8111614905575b50806020601f821160011461489f57600091614894575b508160011b916000199060031b1c19161790555b7ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce76020604051858152a16001600160601b031690612710821161483c5760405160039261462a82613634565b6001600160a01b038381168084526020808501938452600088815260018252604080822096519551959094166001600160a01b031960a09690961b861617909555601a815291909320805490921690921790556146c190614689614a2e565b60405197816146a18a935180928680870191016134df565b82016146b5825180938680850191016134df565b0103808852018661366a565b604051906146ce826135fe565b838252600060208084018281526001600160a01b03938416604080870191825260608701858152608088019b8c52898652601990945290932094518555516001850155905160028401805492516001600160a81b0319909316919093161790151560a01b60ff60a01b1617905593518051909491909101906001600160401b0381116135e85761475e825461359b565b601f811161480a575b50602094601f82116001146147a65794819293949560009261479b575b50508160011b916000199060031b1c191617905590565b015190503880614784565b601f198216958360005260206000209160005b8881106147f2575083600195969798106147d9575b505050811b01905590565b015160001960f88460031b161c191690553880806147ce565b919260206001819286850151815501940192016147b9565b61483690836000526020600020601f840160051c8101916020851061191757601f0160051c019061441b565b38614767565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b9050870151386145ca565b6000848152602081209250601f198416905b8a8282106148ed57505090836001949392106148d4575b5050811b0190556145de565b89015160001960f88460031b161c1916905538806148c8565b600184956020939584930151815501940192016148b1565b61493190836000526020600020601f840160051c8101916020851061191757601f0160051c019061441b565b386145b3565b60405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608490fd5b60006040812055614510565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b156149ea57565b60405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606490fd5b60405190614a3b82613619565b603282527170696e6174612e636c6f75642f697066732f60701b6040837f68747470733a2f2f617175612d66616d6f75732d6b6f616c612d3337302e6d7960208201520152565b90614a8c826138f2565b614a99604051918261366a565b8281528092614aaa601f19916138f2565b0190602036910137565b60001981146140cb5760010190565b80518210156139a45760209160051b010190565b15614ade57565b60405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606490fd5b15614b2257565b60405162461bcd60e51b815260206004820152601f60248201527f5072696365206d7573742062652067726561746572207468616e207a65726f006044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b6002600e5414614b9a576002600e55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15614be657565b60405162461bcd60e51b8152602060048201526011602482015270139195081a5cc81b9bdd081b1a5cdd1959607a1b6044820152606490fd5b919082039182116140cb57565b15614c3357565b60405162461bcd60e51b8152602060048201526019602482015278151c985b9cd9995c881d1bc81cd95b1b195c8819985a5b1959603a1b6044820152606490fd5b919082018092116140cb57565b60405190614c8e826135fe565b60606080836000815260006020820152600060408201526000838201520152565b15614cb657565b60405162461bcd60e51b815260206004820152601260248201527113919508191bd95cc81b9bdd08195e1a5cdd60721b6044820152606490fd5b90604060029180518455614d1960208201511515600186019060ff801983541691151516179055565b0151910155565b8054600160401b8110156135e857614d3d916001820181556139ba565b819291549060031b9160018060a01b039283811b93849216901b16911916179055565b90614d6a826138f2565b604090614d798251918261366a565b8381528093614d8a601f19916138f2565b0191600091825b848110614d9f575050505050565b6020908351614dad81613619565b8581528286818301528686830152828501015201614d91565b90604051614dd381613619565b6040600282948054845260ff600182015416151560208501520154910152565b15614dfa57565b60405162461bcd60e51b8152602060048201526019602482015278139195081a5cc81b9bdd08199c9858dd1a5bdb985b1a5e9959603a1b6044820152606490fd5b15614e4257565b60405162461bcd60e51b815260206004820152601c60248201527b596f7520646f206e6f74206f776e20616e79206672616374696f6e7360201b6044820152606490fd5b15614e8d57565b60405162461bcd60e51b81526020600482015260186024820152774672616374696f6e206973206e6f7420666f722073616c6560401b6044820152606490fd5b15614ed457565b60405162461bcd60e51b8152602060048201526018602482015277125b98dbdc9c9958dd081c185e5b595b9d08185b5bdd5b9d60421b6044820152606490fd5b6000908152601f602052604090205460a01c6001600160401b03164211614f47576040600020546001600160a01b031690565b600090565b614f58611514826141bb565b614f6181613ae8565b336001600160a01b0390911603614fb95760005260208052614f866040600020614dc6565b614f9f6040614f96835142614c1f565b92015142614c1f565b9061012c809110159182614fb257505090565b1015919050565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606490fd5b15614ff557565b60405162461bcd60e51b815260206004820152601c60248201527b05072696365206d7573742062652067726561746572207468616e20360241b6044820152606490fd5b9192939060409283516020928382019260018060601b03199060601b16835260348201526034815261506a81613619565b5190206011549461507a876138f2565b966150878651988961366a565b8088528388019060051b820191368311611107578490915b8383106151045750505050916000925b86518410156150fa576150c28488614ac3565b5190856000838310156150ea57505060005282526150e4846000205b93614ab4565b926150af565b90916150e49382528552206150de565b9350945050501490565b823581529181019185910161509f565b1561511b57565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b615163613c74826141bb565b6000818152602090600c825260409061517d82822061368d565b615185614a2e565b805191821561539c57805161536b575050506151a3613c74856141bb565b6151ab614a2e565b8051909290156153565790938491908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8181811015615347575b506904ee2d6d415b85acef8160201b905080831015615339575b50662386f26fc100008083101561532a575b506305f5e1008083101561531b575b506127108083101561530c575b5060648210156152fc575b600a809210156152f2575b600190816021818a01996152656152508c61377e565b9b61525d89519d8e61366a565b808d5261377e565b8b8b019890601f1901368a37508a0101905b6152bc575b50505050906152b0946137eb9493925195836152a188955180928880890191016134df565b840191518093868401906134df565b0103808452018261366a565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156152ed57919082615277565b61527c565b956001019561523a565b959060646002910491019561522f565b60049197920491019538615224565b60089197920491019538615217565b60109197920491019538615208565b8691979204910195386151f6565b919750915004819538806151dc565b925092505051906153668261364f565b815290565b9195509150846153886137eb9594519687948680870191016134df565b82016152b0825180938680850191016134df565b955050505050509056fe6decc0edd62bc66dd462d841e96d5888ee2452307a8352b9bd66e442d6a23ee08be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212208d98855291765160402e1ae4cca56030cd515e7bdb7401ecc67ba1ee1917760c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getTokenIdByMessageHash(bytes32)": {
        "details": "Get token ID by XCM message hash",
        "params": {
          "messageHash": "XCM message hash"
        },
        "returns": {
          "_0": "uint256 Token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isNFTLockedForCrossChain(uint256)": {
        "details": "Check if NFT is locked for cross-chain transfer",
        "params": {
          "tokenId": "Token ID to check"
        },
        "returns": {
          "_0": "bool Whether the NFT is locked"
        }
      },
      "lockForCrossChain(uint256,bytes32)": {
        "details": "Lock NFT for cross-chain transfer (only XCM Bridge)",
        "params": {
          "messageHash": "XCM message hash",
          "tokenId": "Token ID to lock"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setUser(uint256,address,uint64)": {
        "params": {
          "expires": "用户权限的过期时间戳",
          "tokenId": "要设置用户的NFT的ID",
          "user": "用户的地址"
        }
      },
      "setXCMBridge(address)": {
        "details": "Set XCM Bridge contract address (only owner)",
        "params": {
          "_xcmBridge": "XCM Bridge contract address"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockFromCrossChain(uint256,bytes32)": {
        "details": "Unlock NFT from cross-chain transfer (only XCM Bridge)",
        "params": {
          "messageHash": "XCM message hash",
          "tokenId": "Token ID to unlock"
        }
      },
      "userExpires(uint256)": {
        "params": {
          "tokenId": "要查询的NFT的ID"
        },
        "returns": {
          "_0": "用户权限的过期时间戳"
        }
      },
      "userOf(uint256)": {
        "params": {
          "tokenId": "要查询的NFT的ID"
        },
        "returns": {
          "_0": "用户的地址，如果没有用户则返回零地址"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "UpdateUser(uint256,address,uint64)": {
        "notice": "当NFT的用户或过期时间被更新时触发"
      }
    },
    "kind": "user",
    "methods": {
      "setUser(uint256,address,uint64)": {
        "notice": "设置NFT的用户和过期时间"
      },
      "userExpires(uint256)": {
        "notice": "获取NFT的用户过期时间"
      },
      "userOf(uint256)": {
        "notice": "获取NFT的当前用户"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2102,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(RoyaltyInfo)2099_storage"
      },
      {
        "astId": 2107,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)2099_storage)"
      },
      {
        "astId": 436,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 438,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 442,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 446,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 450,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 456,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1486,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1490,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1493,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1497,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1887,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_owner",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 278,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_status",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6034,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)2649_storage"
      },
      {
        "astId": 6037,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "listingFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6045,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "17",
        "type": "t_bytes32"
      },
      {
        "astId": 6047,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "xcmBridge",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 6051,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "isLockedForCrossChain",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6055,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "crossChainMessages",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 6097,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "mysteryBox",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(MysteryBox)6094_storage"
      },
      {
        "astId": 6100,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "nonce",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 6105,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "nftItems",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_struct(NFTItem)6066_storage)"
      },
      {
        "astId": 6109,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "mintedBy",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6113,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "isFractionalized",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6117,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "totalFractions",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6124,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "fractions",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Fraction)6073_storage))"
      },
      {
        "astId": 6129,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "fractionOwners",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 6134,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "_users",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_uint256,t_struct(UserInfo)6078_storage)"
      },
      {
        "astId": 6139,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "nftLoyalty",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_struct(LoyaltyInfo)6085_storage)"
      },
      {
        "astId": 6143,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "hasClaimed",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6147,
        "contract": "contracts/YourCollectible.sol:YourCollectible",
        "label": "mysteryBoxURIs",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Fraction)6073_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YourCollectible.Fraction)",
        "numberOfBytes": "32",
        "value": "t_struct(Fraction)6073_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Fraction)6073_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct YourCollectible.Fraction))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Fraction)6073_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(LoyaltyInfo)6085_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.LoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LoyaltyInfo)6085_storage"
      },
      "t_mapping(t_uint256,t_struct(NFTItem)6066_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.NFTItem)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTItem)6066_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)2099_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)2099_storage"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)6078_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct YourCollectible.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6078_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2649_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2648,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fraction)6073_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.Fraction",
        "members": [
          {
            "astId": 6068,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6070,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isForSale",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6072,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LoyaltyInfo)6085_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.LoyaltyInfo",
        "members": [
          {
            "astId": 6080,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "holdingStartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6082,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "rewardClaimed",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6084,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MysteryBox)6094_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.MysteryBox",
        "members": [
          {
            "astId": 6087,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6089,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isActive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6091,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "royaltyFee",
            "offset": 1,
            "slot": "1",
            "type": "t_uint96"
          },
          {
            "astId": 6093,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "uriCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(NFTItem)6066_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.NFTItem",
        "members": [
          {
            "astId": 6057,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6059,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6061,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 6063,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "isListed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 6065,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "tokenUri",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoyaltyInfo)2099_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981.RoyaltyInfo",
        "members": [
          {
            "astId": 2096,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2098,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)6078_storage": {
        "encoding": "inplace",
        "label": "struct YourCollectible.UserInfo",
        "members": [
          {
            "astId": 6075,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6077,
            "contract": "contracts/YourCollectible.sol:YourCollectible",
            "label": "expires",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}