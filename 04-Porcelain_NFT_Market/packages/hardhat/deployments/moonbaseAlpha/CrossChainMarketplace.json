{
  "address": "0x62CF8Ed114C18f8aD4774a49F4a754a77Fa6a2cD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xcmBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "purchaseId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "CrossChainPurchaseCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "purchaseId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "sourceChainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationChainId",
          "type": "uint32"
        }
      ],
      "name": "CrossChainPurchaseInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ListingCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCrossChain",
          "type": "bool"
        }
      ],
      "name": "NFTListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "NFTSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "purchaseId",
          "type": "bytes32"
        }
      ],
      "name": "completeCrossChainPurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "crossChainPurchases",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "sourceChainId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "destinationChainId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "purchaseId",
          "type": "bytes32"
        }
      ],
      "name": "getCrossChainPurchase",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "listingId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "sourceChainId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationChainId",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CrossChainMarketplace.CrossChainPurchase",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "sourceChainId",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCrossChain",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CrossChainMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "destinationChainId",
          "type": "uint32"
        }
      ],
      "name": "initiateCrossChainPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCrossChain",
          "type": "bool"
        }
      ],
      "name": "listNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "sourceChainId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCrossChain",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplaceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "purchaseNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "setChainSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setMarketplaceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        }
      ],
      "name": "setPaymentTokenSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "supportedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedPaymentTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xcmBridge",
      "outputs": [
        {
          "internalType": "contract XCMBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdec94cce983acc525033fa4bfe734aeb50802b00e41d1fbbc165ba8748f4d161",
  "receipt": {
    "to": null,
    "from": "0x23bac0341A88A6B51C323CBBbC4053915f7A1A57",
    "contractAddress": "0x62CF8Ed114C18f8aD4774a49F4a754a77Fa6a2cD",
    "transactionIndex": 9,
    "gasUsed": "3131862",
    "logsBloom": "0x
    "blockHash": "0x04d0a63fef47e4af389368952f327d33cae058dff1e4ac86f7170443010b984b",
    "transactionHash": "0xdec94cce983acc525033fa4bfe734aeb50802b00e41d1fbbc165ba8748f4d161",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 14109817,
        "transactionHash": "0xdec94cce983acc525033fa4bfe734aeb50802b00e41d1fbbc165ba8748f4d161",
        "address": "0x62CF8Ed114C18f8aD4774a49F4a754a77Fa6a2cD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023bac0341a88a6b51c323cbbbc4053915f7a1a57"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x04d0a63fef47e4af389368952f327d33cae058dff1e4ac86f7170443010b984b"
      }
    ],
    "blockNumber": 14109817,
    "cumulativeGasUsed": "5042382",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDbd1ed48581d42295057754D9f268970aEA25c9B",
    "0x23bac0341A88A6B51C323CBBbC4053915f7A1A57"
  ],
  "numDeployments": 1,
  "solcInputHash": "bc6d7f8aa63b13844b1d59e454e1afc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xcmBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"purchaseId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CrossChainPurchaseCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"purchaseId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"}],\"name\":\"CrossChainPurchaseInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCrossChain\",\"type\":\"bool\"}],\"name\":\"NFTListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"NFTSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"purchaseId\",\"type\":\"bytes32\"}],\"name\":\"completeCrossChainPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"crossChainPurchases\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"purchaseId\",\"type\":\"bytes32\"}],\"name\":\"getCrossChainPurchase\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossChainMarketplace.CrossChainPurchase\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCrossChain\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossChainMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"destinationChainId\",\"type\":\"uint32\"}],\"name\":\"initiateCrossChainPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCrossChain\",\"type\":\"bool\"}],\"name\":\"listNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCrossChain\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"purchaseNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"setChainSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setMarketplaceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"name\":\"setPaymentTokenSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedPaymentTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xcmBridge\",\"outputs\":[{\"internalType\":\"contract XCMBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Cross-chain NFT marketplace with XCM integration Enables NFT trading across Polkadot Hub and Moonbase Alpha\",\"kind\":\"dev\",\"methods\":{\"cancelListing(bytes32)\":{\"details\":\"Cancel listing\",\"params\":{\"listingId\":\"Listing ID\"}},\"completeCrossChainPurchase(bytes32)\":{\"details\":\"Complete cross-chain purchase (called by XCM bridge)\",\"params\":{\"purchaseId\":\"Purchase ID\"}},\"getCrossChainPurchase(bytes32)\":{\"details\":\"Get cross-chain purchase information\",\"params\":{\"purchaseId\":\"Purchase ID\"},\"returns\":{\"_0\":\"CrossChainPurchase information\"}},\"getListing(bytes32)\":{\"details\":\"Get listing information\",\"params\":{\"listingId\":\"Listing ID\"},\"returns\":{\"_0\":\"Listing information\"}},\"initiateCrossChainPurchase(bytes32,uint32)\":{\"details\":\"Initiate cross-chain NFT purchase\",\"params\":{\"destinationChainId\":\"Target chain for NFT delivery\",\"listingId\":\"Listing ID\"}},\"listNFT(address,uint256,uint256,address,bool)\":{\"details\":\"List NFT for sale\",\"params\":{\"isCrossChain\":\"Whether this is a cross-chain listing\",\"nftContract\":\"NFT contract address\",\"paymentToken\":\"Payment token address (address(0) for native)\",\"price\":\"Listing price\",\"tokenId\":\"Token ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Emergency pause\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchaseNFT(bytes32)\":{\"details\":\"Purchase NFT (same chain)\",\"params\":{\"listingId\":\"Listing ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setChainSupport(uint32,bool)\":{\"details\":\"Set chain support\",\"params\":{\"chainId\":\"Chain ID\",\"supported\":\"Support status\"}},\"setFeeRecipient(address)\":{\"details\":\"Set fee recipient\",\"params\":{\"_feeRecipient\":\"New fee recipient address\"}},\"setMarketplaceFee(uint256)\":{\"details\":\"Set marketplace fee\",\"params\":{\"_fee\":\"Fee in basis points\"}},\"setPaymentTokenSupport(address,bool)\":{\"details\":\"Set payment token support\",\"params\":{\"supported\":\"Support status\",\"token\":\"Token address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause\"}},\"title\":\"CrossChainMarketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossChainMarketplace.sol\":\"CrossChainMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CrossChainMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./XCMBridge.sol\\\";\\n\\n/**\\n * @title CrossChainMarketplace\\n * @dev Cross-chain NFT marketplace with XCM integration\\n * Enables NFT trading across Polkadot Hub and Moonbase Alpha\\n */\\ncontract CrossChainMarketplace is Ownable, ReentrancyGuard, Pausable {\\n    // Marketplace listing structure\\n    struct Listing {\\n        address seller;\\n        address nftContract;\\n        uint256 tokenId;\\n        uint256 price;\\n        address paymentToken; // address(0) for native token\\n        uint32 sourceChainId;\\n        bool isActive;\\n        bool isCrossChain;\\n        uint256 timestamp;\\n    }\\n\\n    // Cross-chain purchase structure\\n    struct CrossChainPurchase {\\n        bytes32 listingId;\\n        address buyer;\\n        uint256 price;\\n        address paymentToken;\\n        uint32 sourceChainId;\\n        uint32 destinationChainId;\\n        bool completed;\\n        uint256 timestamp;\\n    }\\n\\n    // XCM Bridge reference\\n    XCMBridge public xcmBridge;\\n\\n    // State variables\\n    mapping(bytes32 => Listing) public listings;\\n    mapping(bytes32 => CrossChainPurchase) public crossChainPurchases;\\n    mapping(address => bool) public supportedPaymentTokens;\\n    mapping(uint32 => bool) public supportedChains;\\n\\n    // Fee configuration\\n    uint256 public marketplaceFee = 250; // 2.5% in basis points\\n    uint256 public constant MAX_FEE = 1000; // 10% maximum fee\\n    address public feeRecipient;\\n\\n    // Events\\n    event NFTListed(\\n        bytes32 indexed listingId,\\n        address indexed seller,\\n        address indexed nftContract,\\n        uint256 tokenId,\\n        uint256 price,\\n        address paymentToken,\\n        bool isCrossChain\\n    );\\n\\n    event NFTSold(\\n        bytes32 indexed listingId,\\n        address indexed buyer,\\n        address indexed seller,\\n        uint256 price,\\n        address paymentToken\\n    );\\n\\n    event CrossChainPurchaseInitiated(\\n        bytes32 indexed purchaseId,\\n        bytes32 indexed listingId,\\n        address indexed buyer,\\n        uint32 sourceChainId,\\n        uint32 destinationChainId\\n    );\\n\\n    event CrossChainPurchaseCompleted(\\n        bytes32 indexed purchaseId,\\n        address indexed buyer,\\n        address indexed seller\\n    );\\n\\n    event ListingCancelled(bytes32 indexed listingId, address indexed seller);\\n\\n    constructor(address _xcmBridge, address _feeRecipient) {\\n        xcmBridge = XCMBridge(_xcmBridge);\\n        feeRecipient = _feeRecipient;\\n        \\n        // Initialize supported chains\\n        supportedChains[420420422] = true; // Polkadot Hub\\n        supportedChains[1287] = true; // Moonbase Alpha\\n        \\n        // Support native token payments\\n        supportedPaymentTokens[address(0)] = true;\\n    }\\n\\n    /**\\n     * @dev List NFT for sale\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param price Listing price\\n     * @param paymentToken Payment token address (address(0) for native)\\n     * @param isCrossChain Whether this is a cross-chain listing\\n     */\\n    function listNFT(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 price,\\n        address paymentToken,\\n        bool isCrossChain\\n    ) external nonReentrant whenNotPaused {\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\n        require(supportedPaymentTokens[paymentToken], \\\"Payment token not supported\\\");\\n        require(\\n            IERC721(nftContract).ownerOf(tokenId) == msg.sender,\\n            \\\"Not token owner\\\"\\n        );\\n        require(\\n            IERC721(nftContract).isApprovedForAll(msg.sender, address(this)) ||\\n            IERC721(nftContract).getApproved(tokenId) == address(this),\\n            \\\"Marketplace not approved\\\"\\n        );\\n\\n        bytes32 listingId = keccak256(\\n            abi.encodePacked(\\n                nftContract,\\n                tokenId,\\n                msg.sender,\\n                block.timestamp,\\n                block.chainid\\n            )\\n        );\\n\\n        listings[listingId] = Listing({\\n            seller: msg.sender,\\n            nftContract: nftContract,\\n            tokenId: tokenId,\\n            price: price,\\n            paymentToken: paymentToken,\\n            sourceChainId: uint32(block.chainid),\\n            isActive: true,\\n            isCrossChain: isCrossChain,\\n            timestamp: block.timestamp\\n        });\\n\\n        emit NFTListed(\\n            listingId,\\n            msg.sender,\\n            nftContract,\\n            tokenId,\\n            price,\\n            paymentToken,\\n            isCrossChain\\n        );\\n    }\\n\\n    /**\\n     * @dev Purchase NFT (same chain)\\n     * @param listingId Listing ID\\n     */\\n    function purchaseNFT(bytes32 listingId) external payable nonReentrant whenNotPaused {\\n        Listing storage listing = listings[listingId];\\n        require(listing.isActive, \\\"Listing not active\\\");\\n        require(!listing.isCrossChain, \\\"Use cross-chain purchase for cross-chain listings\\\");\\n        require(listing.sourceChainId == uint32(block.chainid), \\\"Wrong chain\\\");\\n\\n        uint256 totalPrice = listing.price;\\n        uint256 fee = (totalPrice * marketplaceFee) / 10000;\\n        uint256 sellerAmount = totalPrice - fee;\\n\\n        // Handle payment\\n        if (listing.paymentToken == address(0)) {\\n            require(msg.value >= totalPrice, \\\"Insufficient payment\\\");\\n            \\n            // Transfer fee to fee recipient\\n            if (fee > 0) {\\n                payable(feeRecipient).transfer(fee);\\n            }\\n            \\n            // Transfer payment to seller\\n            payable(listing.seller).transfer(sellerAmount);\\n            \\n            // Refund excess payment\\n            if (msg.value > totalPrice) {\\n                payable(msg.sender).transfer(msg.value - totalPrice);\\n            }\\n        } else {\\n            IERC20 paymentToken = IERC20(listing.paymentToken);\\n            require(\\n                paymentToken.transferFrom(msg.sender, address(this), totalPrice),\\n                \\\"Payment transfer failed\\\"\\n            );\\n            \\n            // Transfer fee to fee recipient\\n            if (fee > 0) {\\n                require(\\n                    paymentToken.transfer(feeRecipient, fee),\\n                    \\\"Fee transfer failed\\\"\\n                );\\n            }\\n            \\n            // Transfer payment to seller\\n            require(\\n                paymentToken.transfer(listing.seller, sellerAmount),\\n                \\\"Seller payment failed\\\"\\n            );\\n        }\\n\\n        // Transfer NFT to buyer\\n        IERC721(listing.nftContract).safeTransferFrom(\\n            listing.seller,\\n            msg.sender,\\n            listing.tokenId\\n        );\\n\\n        // Mark listing as inactive\\n        listing.isActive = false;\\n\\n        emit NFTSold(\\n            listingId,\\n            msg.sender,\\n            listing.seller,\\n            totalPrice,\\n            listing.paymentToken\\n        );\\n    }\\n\\n    /**\\n     * @dev Initiate cross-chain NFT purchase\\n     * @param listingId Listing ID\\n     * @param destinationChainId Target chain for NFT delivery\\n     */\\n    function initiateCrossChainPurchase(\\n        bytes32 listingId,\\n        uint32 destinationChainId\\n    ) external payable nonReentrant whenNotPaused {\\n        Listing storage listing = listings[listingId];\\n        require(listing.isActive, \\\"Listing not active\\\");\\n        require(listing.isCrossChain, \\\"Not a cross-chain listing\\\");\\n        require(supportedChains[destinationChainId], \\\"Destination chain not supported\\\");\\n\\n        uint256 totalPrice = listing.price;\\n        uint256 fee = (totalPrice * marketplaceFee) / 10000;\\n        uint256 sellerAmount = totalPrice - fee;\\n\\n        // Handle payment (similar to regular purchase)\\n        if (listing.paymentToken == address(0)) {\\n            require(msg.value >= totalPrice, \\\"Insufficient payment\\\");\\n            \\n            if (fee > 0) {\\n                payable(feeRecipient).transfer(fee);\\n            }\\n            \\n            payable(listing.seller).transfer(sellerAmount);\\n            \\n            if (msg.value > totalPrice) {\\n                payable(msg.sender).transfer(msg.value - totalPrice);\\n            }\\n        } else {\\n            IERC20 paymentToken = IERC20(listing.paymentToken);\\n            require(\\n                paymentToken.transferFrom(msg.sender, address(this), totalPrice),\\n                \\\"Payment transfer failed\\\"\\n            );\\n            \\n            if (fee > 0) {\\n                require(\\n                    paymentToken.transfer(feeRecipient, fee),\\n                    \\\"Fee transfer failed\\\"\\n                );\\n            }\\n            \\n            require(\\n                paymentToken.transfer(listing.seller, sellerAmount),\\n                \\\"Seller payment failed\\\"\\n            );\\n        }\\n\\n        bytes32 purchaseId = keccak256(\\n            abi.encodePacked(\\n                listingId,\\n                msg.sender,\\n                destinationChainId,\\n                block.timestamp\\n            )\\n        );\\n\\n        crossChainPurchases[purchaseId] = CrossChainPurchase({\\n            listingId: listingId,\\n            buyer: msg.sender,\\n            price: totalPrice,\\n            paymentToken: listing.paymentToken,\\n            sourceChainId: listing.sourceChainId,\\n            destinationChainId: destinationChainId,\\n            completed: false,\\n            timestamp: block.timestamp\\n        });\\n\\n        // Lock NFT in XCM bridge for cross-chain transfer\\n        IERC721(listing.nftContract).approve(address(xcmBridge), listing.tokenId);\\n        xcmBridge.lockNFT(listing.nftContract, listing.tokenId, destinationChainId);\\n\\n        // Mark listing as inactive\\n        listing.isActive = false;\\n\\n        emit CrossChainPurchaseInitiated(\\n            purchaseId,\\n            listingId,\\n            msg.sender,\\n            listing.sourceChainId,\\n            destinationChainId\\n        );\\n    }\\n\\n    /**\\n     * @dev Complete cross-chain purchase (called by XCM bridge)\\n     * @param purchaseId Purchase ID\\n     */\\n    function completeCrossChainPurchase(bytes32 purchaseId) external {\\n        require(msg.sender == address(xcmBridge), \\\"Only XCM bridge can complete\\\");\\n        \\n        CrossChainPurchase storage purchase = crossChainPurchases[purchaseId];\\n        require(!purchase.completed, \\\"Purchase already completed\\\");\\n        \\n        purchase.completed = true;\\n        \\n        emit CrossChainPurchaseCompleted(\\n            purchaseId,\\n            purchase.buyer,\\n            listings[purchase.listingId].seller\\n        );\\n    }\\n\\n    /**\\n     * @dev Cancel listing\\n     * @param listingId Listing ID\\n     */\\n    function cancelListing(bytes32 listingId) external nonReentrant {\\n        Listing storage listing = listings[listingId];\\n        require(listing.seller == msg.sender, \\\"Not listing owner\\\");\\n        require(listing.isActive, \\\"Listing not active\\\");\\n\\n        listing.isActive = false;\\n\\n        emit ListingCancelled(listingId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Set marketplace fee\\n     * @param _fee Fee in basis points\\n     */\\n    function setMarketplaceFee(uint256 _fee) external onlyOwner {\\n        require(_fee <= MAX_FEE, \\\"Fee too high\\\");\\n        marketplaceFee = _fee;\\n    }\\n\\n    /**\\n     * @dev Set fee recipient\\n     * @param _feeRecipient New fee recipient address\\n     */\\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        require(_feeRecipient != address(0), \\\"Invalid fee recipient\\\");\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /**\\n     * @dev Set payment token support\\n     * @param token Token address\\n     * @param supported Support status\\n     */\\n    function setPaymentTokenSupport(address token, bool supported) external onlyOwner {\\n        supportedPaymentTokens[token] = supported;\\n    }\\n\\n    /**\\n     * @dev Set chain support\\n     * @param chainId Chain ID\\n     * @param supported Support status\\n     */\\n    function setChainSupport(uint32 chainId, bool supported) external onlyOwner {\\n        supportedChains[chainId] = supported;\\n    }\\n\\n    /**\\n     * @dev Get listing information\\n     * @param listingId Listing ID\\n     * @return Listing information\\n     */\\n    function getListing(bytes32 listingId) external view returns (Listing memory) {\\n        return listings[listingId];\\n    }\\n\\n    /**\\n     * @dev Get cross-chain purchase information\\n     * @param purchaseId Purchase ID\\n     * @return CrossChainPurchase information\\n     */\\n    function getCrossChainPurchase(bytes32 purchaseId) \\n        external \\n        view \\n        returns (CrossChainPurchase memory) \\n    {\\n        return crossChainPurchases[purchaseId];\\n    }\\n\\n    /**\\n     * @dev Emergency pause\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\",\"keccak256\":\"0x19a718499accf8431aa9e668e24872f5dde6d78151c57e1cab5d71aaad5f9d40\",\"license\":\"MIT\"},\"contracts/XCMBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/**\\n * @title XCMBridge\\n * @dev Cross-chain NFT bridge contract for Polkadot XCM integration\\n * Handles NFT locking/unlocking and cross-chain message processing\\n */\\ncontract XCMBridge is IERC721Receiver, Ownable, ReentrancyGuard, Pausable {\\n    // XCM message types\\n    enum MessageType {\\n        LOCK_NFT,\\n        UNLOCK_NFT,\\n        MINT_WRAPPED_NFT,\\n        BURN_WRAPPED_NFT\\n    }\\n\\n    // Cross-chain NFT information\\n    struct CrossChainNFT {\\n        address originalContract;\\n        uint256 originalTokenId;\\n        address originalOwner;\\n        uint32 sourceChainId;\\n        uint32 destinationChainId;\\n        bool isLocked;\\n        uint256 timestamp;\\n    }\\n\\n    // XCM message structure\\n    struct XCMMessage {\\n        MessageType messageType;\\n        address nftContract;\\n        uint256 tokenId;\\n        address recipient;\\n        uint32 sourceChainId;\\n        uint32 destinationChainId;\\n        bytes32 messageHash;\\n        bool processed;\\n    }\\n\\n    // Chain ID mappings\\n    uint32 public constant POLKADOT_HUB_CHAIN_ID = 420420422;\\n    uint32 public constant MOONBASE_ALPHA_CHAIN_ID = 1287;\\n\\n    // State variables\\n    mapping(bytes32 => CrossChainNFT) public crossChainNFTs;\\n    mapping(bytes32 => XCMMessage) public xcmMessages;\\n    mapping(address => bool) public authorizedContracts;\\n    mapping(uint32 => bool) public supportedChains;\\n\\n    // Events\\n    event NFTLocked(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        uint32 destinationChainId,\\n        bytes32 messageHash\\n    );\\n\\n    event NFTUnlocked(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        bytes32 messageHash\\n    );\\n\\n    event XCMMessageSent(\\n        bytes32 indexed messageHash,\\n        MessageType messageType,\\n        uint32 destinationChainId\\n    );\\n\\n    event XCMMessageReceived(\\n        bytes32 indexed messageHash,\\n        MessageType messageType,\\n        uint32 sourceChainId\\n    );\\n\\n    event ChainSupported(uint32 chainId, bool supported);\\n    event ContractAuthorized(address indexed nftContract, bool authorized);\\n\\n    constructor() {\\n        // Initialize supported chains\\n        supportedChains[POLKADOT_HUB_CHAIN_ID] = true;\\n        supportedChains[MOONBASE_ALPHA_CHAIN_ID] = true;\\n    }\\n\\n    /**\\n     * @dev Lock NFT for cross-chain transfer\\n     * @param nftContract Address of the NFT contract\\n     * @param tokenId Token ID to lock\\n     * @param destinationChainId Target chain ID\\n     */\\n    function lockNFT(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint32 destinationChainId\\n    ) external nonReentrant whenNotPaused {\\n        require(authorizedContracts[nftContract], \\\"Contract not authorized\\\");\\n        require(supportedChains[destinationChainId], \\\"Chain not supported\\\");\\n        require(\\n            IERC721(nftContract).ownerOf(tokenId) == msg.sender,\\n            \\\"Not token owner\\\"\\n        );\\n\\n        // Generate unique message hash\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(\\n                nftContract,\\n                tokenId,\\n                msg.sender,\\n                block.chainid,\\n                destinationChainId,\\n                block.timestamp\\n            )\\n        );\\n\\n        // Transfer NFT to bridge contract\\n        IERC721(nftContract).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            tokenId\\n        );\\n\\n        // Store cross-chain NFT information\\n        crossChainNFTs[messageHash] = CrossChainNFT({\\n            originalContract: nftContract,\\n            originalTokenId: tokenId,\\n            originalOwner: msg.sender,\\n            sourceChainId: uint32(block.chainid),\\n            destinationChainId: destinationChainId,\\n            isLocked: true,\\n            timestamp: block.timestamp\\n        });\\n\\n        // Create XCM message\\n        xcmMessages[messageHash] = XCMMessage({\\n            messageType: MessageType.LOCK_NFT,\\n            nftContract: nftContract,\\n            tokenId: tokenId,\\n            recipient: msg.sender,\\n            sourceChainId: uint32(block.chainid),\\n            destinationChainId: destinationChainId,\\n            messageHash: messageHash,\\n            processed: false\\n        });\\n\\n        emit NFTLocked(nftContract, tokenId, msg.sender, destinationChainId, messageHash);\\n        emit XCMMessageSent(messageHash, MessageType.LOCK_NFT, destinationChainId);\\n    }\\n\\n    /**\\n     * @dev Unlock NFT after cross-chain transfer completion\\n     * @param messageHash Hash of the original lock message\\n     */\\n    function unlockNFT(bytes32 messageHash) external nonReentrant whenNotPaused {\\n        CrossChainNFT storage nftInfo = crossChainNFTs[messageHash];\\n        require(nftInfo.isLocked, \\\"NFT not locked\\\");\\n        require(nftInfo.originalOwner == msg.sender, \\\"Not original owner\\\");\\n\\n        // Mark as unlocked\\n        nftInfo.isLocked = false;\\n\\n        // Transfer NFT back to original owner\\n        IERC721(nftInfo.originalContract).safeTransferFrom(\\n            address(this),\\n            nftInfo.originalOwner,\\n            nftInfo.originalTokenId\\n        );\\n\\n        emit NFTUnlocked(\\n            nftInfo.originalContract,\\n            nftInfo.originalTokenId,\\n            nftInfo.originalOwner,\\n            messageHash\\n        );\\n    }\\n\\n    /**\\n     * @dev Process incoming XCM message\\n     * @param messageHash Hash of the XCM message\\n     * @param messageType Type of XCM message\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param recipient Recipient address\\n     * @param sourceChainId Source chain ID\\n     */\\n    function processXCMMessage(\\n        bytes32 messageHash,\\n        MessageType messageType,\\n        address nftContract,\\n        uint256 tokenId,\\n        address recipient,\\n        uint32 sourceChainId\\n    ) external onlyOwner {\\n        require(!xcmMessages[messageHash].processed, \\\"Message already processed\\\");\\n        require(supportedChains[sourceChainId], \\\"Source chain not supported\\\");\\n\\n        xcmMessages[messageHash] = XCMMessage({\\n            messageType: messageType,\\n            nftContract: nftContract,\\n            tokenId: tokenId,\\n            recipient: recipient,\\n            sourceChainId: sourceChainId,\\n            destinationChainId: uint32(block.chainid),\\n            messageHash: messageHash,\\n            processed: true\\n        });\\n\\n        emit XCMMessageReceived(messageHash, messageType, sourceChainId);\\n    }\\n\\n    /**\\n     * @dev Authorize NFT contract for cross-chain transfers\\n     * @param nftContract Address of the NFT contract\\n     * @param authorized Authorization status\\n     */\\n    function setContractAuthorization(\\n        address nftContract,\\n        bool authorized\\n    ) external onlyOwner {\\n        authorizedContracts[nftContract] = authorized;\\n        emit ContractAuthorized(nftContract, authorized);\\n    }\\n\\n    /**\\n     * @dev Set chain support status\\n     * @param chainId Chain ID\\n     * @param supported Support status\\n     */\\n    function setChainSupport(uint32 chainId, bool supported) external onlyOwner {\\n        supportedChains[chainId] = supported;\\n        emit ChainSupported(chainId, supported);\\n    }\\n\\n    /**\\n     * @dev Get cross-chain NFT information\\n     * @param messageHash Message hash\\n     * @return CrossChainNFT information\\n     */\\n    function getCrossChainNFT(bytes32 messageHash)\\n        external\\n        view\\n        returns (CrossChainNFT memory)\\n    {\\n        return crossChainNFTs[messageHash];\\n    }\\n\\n    /**\\n     * @dev Get XCM message information\\n     * @param messageHash Message hash\\n     * @return XCMMessage information\\n     */\\n    function getXCMMessage(bytes32 messageHash)\\n        external\\n        view\\n        returns (XCMMessage memory)\\n    {\\n        return xcmMessages[messageHash];\\n    }\\n\\n    /**\\n     * @dev Emergency pause function\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause function\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Handle NFT reception\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev Emergency withdrawal function (only owner)\\n     * @param nftContract NFT contract address\\n     * @param tokenId Token ID\\n     * @param to Recipient address\\n     */\\n    function emergencyWithdraw(\\n        address nftContract,\\n        uint256 tokenId,\\n        address to\\n    ) external onlyOwner {\\n        IERC721(nftContract).safeTransferFrom(address(this), to, tokenId);\\n    }\\n}\",\"keccak256\":\"0xe932857d48d967b175fc951ea6c4b4678d5108fb13da641b7fda226d58f365b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200011e5762001eac601f38829003908101601f19168301906001600160401b038211848310176200012357808491604094859485528339810103126200011e5760016200005e6020620000568562000139565b940162000139565b916000928354838060a01b03199133838316178655835196858060a01b0392833391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08980a38580556002549060fa6007556101008760a81b039060081b1690868060a81b031916176002551690600854161760085563190f1b46835260066020528083209260ff199383858254161790556105078152818120838582541617905580805260056020522091825416179055611d5d90816200014f8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200011e5756fe608080604052600436101561001357600080fd5b600090813560e01c908163175c0d161461182057508063185dee72146112a1578063248514dd146112675780633f4ba83a146111d257806346904840146111a95780635c975abb146111865780636a166964146111685780636bceb7ec14611053578063715018a61461100b5780637b66398514610fde5780637e7c6c7a14610f535780638456cb5914610ef85780638da5cb5b14610ed1578063921d913514610e7f5780639299e55214610dc25780639407ea9814610d62578063ad22ea3514610984578063b1c5578c14610945578063bc063e1a14610928578063c18b8db41461088e578063c6d8cde11461076e578063d9197d64146102bf578063e74b981b1461023a578063f2fde38b146101895763f6ee27b71461013457600080fd5b3461018657604036600319011261018657610183610150611952565b63ffffffff61015d61197b565b9161016661198a565b1683526006602052604083209060ff801983541691151516179055565b80f35b80fd5b5034610186576020366003190112610186576101a3611965565b6101ab61198a565b6001600160a01b039081169081156101e6576000548260018060a01b031982161760005516600080516020611d08833981519152600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461018657602036600319011261018657610254611965565b61025c61198a565b6001600160a01b0316801561028257600880546001600160a01b03191691909117905580f35b60405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908199959481c9958da5c1a595b9d605a1b6044820152606490fd5b50346101865760a0366003190112610186576102d9611965565b606435906001600160a01b03821682036107695760843590811515820361076957610302611aee565b61030a611aaa565b60443515610725576001600160a01b038316845260056020908152604085205490929060ff16156106e2576040516331a9108f60e11b815260248035600483015284908290816001600160a01b0387165afa9081156106565786916106c5575b50336001600160a01b039091160361068e5760405163e985e9c560e01b815233600482015230602482015283816044816001600160a01b0387165afa908115610656578691610661575b5080156105e2575b156105a2576040519383850160018060601b03198460601b16815260243560348701523360601b6054870152426068870152466088870152608886528560c081011060018060401b0360c08801111761058c5760c08601604052855190209461042760c082016119e2565b3360c082015260058660e083019260018060a01b038716845285886105028c61010085016024358152610120860195604435875261014081019660018060a01b038c168852610160820192604063ffffffff958646168652600361018086019960018b526101a087019b15158c526101c087019d8e429052835252209b8c9360c060018060a01b039101511660018060a01b031980955416178d5560018d019060018060a01b03905116848254161790555160028c01555160038b015560048a019660018060a01b0390511690875416178655511684611a87565b518254915161ffff60c01b1990921690151560c01b60ff60c01b161790151560c81b60ff60c81b1617905551910155604080516024358152604435958101959095526001600160a01b03918216908501529015156060840152169133917f613db017cf970b3bf73ac6a3ea7e34b1c2c45f56617db517fbb448e27e411ca290608090a46001805580f35b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260048101849052601860248201527713585c9ad95d1c1b1858d9481b9bdd08185c1c1c9bdd995960421b6044820152606490fd5b5060405163020604bf60e21b815260248035600483015284908290816001600160a01b0387165afa908115610656578691610629575b506001600160a01b031630146103bc565b6106499150843d861161064f575b6106418183611a2d565b810190611a50565b38610618565b503d610637565b6040513d88823e3d90fd5b6106819150843d8611610687575b6106798183611a2d565b810190611a6f565b386103b4565b503d61066f565b60405162461bcd60e51b815260048101849052600f60248201526e2737ba103a37b5b2b71037bbb732b960891b6044820152606490fd5b6106dc9150843d861161064f576106418183611a2d565b3861036a565b60405162461bcd60e51b815260048101849052601b60248201527a14185e5b595b9d081d1bdad95b881b9bdd081cdd5c1c1bdc9d1959602a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527b05072696365206d7573742062652067726561746572207468616e20360241b6044820152606490fd5b600080fd5b503461018657602036600319011261018657600254600435906001600160a01b039060081c8116330361084a578183526004602052604083209060038201805460ff8160e01c166108085760ff60e01b1916600160e01b179055600182015491548452600360205260408420548116929116907f0d722b3fbeea8d664184e37684ed9a1b9a5a8eebe8565c476cdb25fc74f7653c8480a480f35b60405162461bcd60e51b815260206004820152601a602482015279141d5c98da185cd948185b1c9958591e4818dbdb5c1b195d195960321b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527b4f6e6c792058434d206272696467652063616e20636f6d706c65746560201b6044820152606490fd5b503461018657602036600319011261018657604061012091600435815260036020522060018060a01b0360ff81835416928260018201541692600282015460038301549060056004850154940154956040519788526020880152604087015260608601528116608085015263ffffffff8160a01c1660a0850152818160c01c16151560c085015260c81c16151560e0830152610100820152f35b503461018657806003193601126101865760206040516103e88152f35b50346101865760203660031901126101865760209060ff906040906001600160a01b03610970611965565b168152600584522054166040519015158152f35b50602080600319360112610d5e5760043561099d611aee565b6109a5611aaa565b808352600382526040832090600482019283546109c760ff8260c01c16611b44565b60ff8160c81c16610cff5763ffffffff804616908260a01c1603610ccc576003840154936127106109fa60075487611b85565b0487610a068288611bae565b6001600160a01b0394851680610b795750908092610a2689341015611cc4565b80158015610b50575b505080809286865416828215610b47575bf11561065657843411610b16575b816001820154169087838254166002830154843b15610b1257610a8c94839283604051809881958294632142170760e11b8452339060048501611bbb565b03925af1928315610b05578493610ae8575b505086549660ff60c01b198816905554169460405194855216908301527f71c70d4eb4440b7cb984e4328ffc3088b6c5c0fac2007eef082e1d22fd732ce760403393a46001805580f35b610af491929350611a1a565b610b015781908738610a9e565b8680fd5b50604051903d90823e3d90fd5b8280fd5b86808080610b248934611bae565b818115610b3e575b3390f1610a4e576040513d88823e3d90fd5b506108fc610b2c565b506108fc610a40565b82809281928960085416908390610b70575bf115610b0557813880610a2f565b506108fc610b62565b6040516323b872dd60e01b815292879084908180610b9c8e303360048501611bbb565b0391855af1928315610cc1578793610bbb918d91610ca4575b50611bdd565b83610c2f575b610be79350858554168b60405180968195829463a9059cbb60e01b845260048401611c23565b03925af18015610c2457610c02918991610c07575b50611c80565b610a4e565b610c1e9150853d8711610687576106798183611a2d565b38610bfc565b6040513d8a823e3d90fd5b91610c54938660085416604051958692839263a9059cbb60e01b845260048401611c23565b03818d865af1918215610c9957610c778793610be7958d91610c7c575b50611c3e565b610bc1565b610c939150853d8711610687576106798183611a2d565b38610c71565b6040513d8c823e3d90fd5b610cbb9150853d8711610687576106798183611a2d565b38610bb5565b6040513d8d823e3d90fd5b60405162461bcd60e51b815260048101839052600b60248201526a2bb937b7339031b430b4b760a91b6044820152606490fd5b60405162461bcd60e51b815260048101839052603160248201527f5573652063726f73732d636861696e20707572636861736520666f722063726f60448201527073732d636861696e206c697374696e677360781b6064820152608490fd5b5080fd5b503461018657602036600319011261018657600435610d7f61198a565b6103e88111610d8e5760075580f35b60405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606490fd5b503461018657602036600319011261018657600435610ddf611aee565b80825260036020526040822080546001600160a01b03163303610e46576004018054610e1060ff8260c01c16611b44565b60ff60c01b1916905533907faf2daca9870585bf8789d28a6290e0b49491e1fb967adc141b2a68c5e386d9768380a36001805580f35b60405162461bcd60e51b81526020600482015260116024820152702737ba103634b9ba34b7339037bbb732b960791b6044820152606490fd5b503461018657604036600319011261018657610183610e9c611965565b610ea461197b565b90610ead61198a565b60018060a01b031683526005602052604083209060ff801983541691151516179055565b5034610186578060031936011261018657546040516001600160a01b039091168152602090f35b5034610186578060031936011261018657610f1161198a565b610f19611aaa565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b503461018657602036600319011261018657604061010091600435815260046020522080549060ff60018060a01b0391826001820154169260028201546004600384015493015494604051968752602087015260408601528116606085015263ffffffff808260a01c1660808601528160c01c1660a085015260e01c16151560c083015260e0820152f35b503461018657806003193601126101865760025460405160089190911c6001600160a01b03168152602090f35b503461018657806003193601126101865761102461198a565b600080546001600160a01b0319811682556001600160a01b0316600080516020611d088339815191528280a380f35b5034610186576020366003190112610186576040816101009260e08351611079816119fe565b82815282602082015282858201528260608201528260808201528260a08201528260c0820152015260043581526004602052206040516110b8816119fe565b81549182825260c08260018060a01b03806001850154169360208301948552600281015491604084019283526003820154958693826060870192818716845260e0600460808a019760ff63ffffffff9c8d9c8c8e809e60a01c168d5260a082019e8f91841c169052019d841c1615158d5201549b019a8b526040519b8c52511660208b01525160408a01525116606088015251166080860152511660a084015251151560c08301525160e0820152f35b50346101865780600319360112610186576020600754604051908152f35b5034610186578060031936011261018657602060ff600254166040519015158152f35b50346101865780600319360112610186576008546040516001600160a01b039091168152602090f35b50346101865780600319360112610186576111eb61198a565b60025460ff81161561122b5760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b50346101865760203660031901126101865760ff604060209263ffffffff61128d611952565b168152600684522054166040519015158152f35b5060403660031901126101865763ffffffff6024351660243503610186576112c7611aee565b6112cf611aaa565b60043581526003602052604081206004810180546112f260ff8260c01c16611b44565b60ff8160c81c16156117df5763ffffffff602435168452600660205260ff6040852054161561179a576003830154928461271061133160075487611b85565b0461133c8187611bae565b6001600160a01b039490919085168061167d5750829061135e88341015611cc4565b80158015611654575b50508080928686541682821561164b575bf11561163757833411611619575b6040516020810160043581523360601b604083015263ffffffff60e01b60243560e01b1660548301524260588301526058825281608081011060018060401b036080840111176116055760049060808301604052825190208096838961148863ffffffff8a546113f8608086016119fe565b8735608086015260a0850133815260c0860196875260e08601968c831688528361010088019360a01c16835260806040610120890197866024351689526101606101408b019a828c52019b428d5281528c602052209b01518b558c60018c019251169160018060a01b031992838254161790555160028b01558b60038b0197511690875416178655511684611a87565b519082549060ff60e01b9051151560e01b169163ffffffff60c01b9060c01b169064ffffffffff60c01b19161717905551910155600181019180835416918660028054920193845490803b15610b125784836114ff956040519687958694859363095ea7b360e01b855260081c1660048401611c23565b03925af180156115fa576115e3575b50908186939260025460081c169254169054823b156115df5760648492836040519586948593637ee2548d60e11b85526004850152602484015263ffffffff6024351660448401525af180156115d4576115c0575b505080549060ff60c01b198216905563ffffffff6040519160a01c16815263ffffffff60243516602082015233917f9970e9a1cf46c8081d3b4de0f7437f317c16696ce7431dc2e0915c817c89413f604060043593a46001805580f35b6115c990611a1a565b610b12578238611563565b6040513d84823e3d90fd5b8380fd5b6115f1909691939296611a1a565b9490913861150e565b6040513d89823e3d90fd5b634e487b7160e01b87526041600452602487fd5b848080806116278834611bae565b818115611642575b3390f1611386575b6040513d86823e3d90fd5b506108fc61162f565b506108fc611378565b82809281928960085416908390611674575bf115610b0557813880611367565b506108fc611666565b6040516323b872dd60e01b815292935091602081806116a18b303360048501611bbb565b03818c875af1801561178f576116bd918a916117765750611bdd565b80611724575b506116ec91602091858554168960405180968195829463a9059cbb60e01b845260048401611c23565b03925af180156106565761170691879161170b5750611c80565b611386565b610c1e915060203d602011610687576106798183611a2d565b91602061174b938660085416604051958692839263a9059cbb60e01b845260048401611c23565b03818b865af1918215610c245761176e6020936116ec958b91610c7c5750611c3e565b9150916116c3565b610cbb915060203d602011610687576106798183611a2d565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260206004820152601f60248201527f44657374696e6174696f6e20636861696e206e6f7420737570706f72746564006044820152606490fd5b60405162461bcd60e51b81526020600482015260196024820152784e6f7420612063726f73732d636861696e206c697374696e6760381b6044820152606490fd5b82346101865760203660031901126101865761183b826119e2565b8082528060208301528060408301528060608301528060808301528060a08301528060c08301528060e0830152806101008093015260043581526003602052604090209060405161188b816119e2565b600160a01b6001900380845416938483528160018201541660208401908152600282015460408501908152600383015493606086019485526004840154946080870190828716825260a08801938363ffffffff96878a60a01c1687528b60c08c01998b60c01c60ff1615158b5260e08d019b60c81c60ff1615158c52600501549b019a8b526040519c8d52511660208c01525160408b01525160608a015251166080880152511660a086015251151560c085015251151560e0840152519082015261012090f35b6004359063ffffffff8216820361076957565b600435906001600160a01b038216820361076957565b60243590811515820361076957565b6000546001600160a01b0316330361199e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b61012081019081106001600160401b0382111761058c57604052565b61010081019081106001600160401b0382111761058c57604052565b6001600160401b03811161058c57604052565b601f909101601f19168101906001600160401b0382119082101761058c57604052565b9081602091031261076957516001600160a01b03811681036107695790565b90816020910312610769575180151581036107695790565b805463ffffffff60a01b191660a09290921b63ffffffff60a01b16919091179055565b60ff60025416611ab657565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260015414611aff576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15611b4b57565b60405162461bcd60e51b81526020600482015260126024820152714c697374696e67206e6f742061637469766560701b6044820152606490fd5b81810292918115918404141715611b9857565b634e487b7160e01b600052601160045260246000fd5b91908203918211611b9857565b6001600160a01b03918216815291166020820152604081019190915260600190565b15611be457565b60405162461bcd60e51b815260206004820152601760248201527614185e5b595b9d081d1c985b9cd9995c8819985a5b1959604a1b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b15611c4557565b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b15611c8757565b60405162461bcd60e51b815260206004820152601560248201527414d95b1b195c881c185e5b595b9d0819985a5b1959605a1b6044820152606490fd5b15611ccb57565b60405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606490fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220d9581746271c7ae365622a4d5934022021d8c6b14edb098fb0c88b70600245e364736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c908163175c0d161461182057508063185dee72146112a1578063248514dd146112675780633f4ba83a146111d257806346904840146111a95780635c975abb146111865780636a166964146111685780636bceb7ec14611053578063715018a61461100b5780637b66398514610fde5780637e7c6c7a14610f535780638456cb5914610ef85780638da5cb5b14610ed1578063921d913514610e7f5780639299e55214610dc25780639407ea9814610d62578063ad22ea3514610984578063b1c5578c14610945578063bc063e1a14610928578063c18b8db41461088e578063c6d8cde11461076e578063d9197d64146102bf578063e74b981b1461023a578063f2fde38b146101895763f6ee27b71461013457600080fd5b3461018657604036600319011261018657610183610150611952565b63ffffffff61015d61197b565b9161016661198a565b1683526006602052604083209060ff801983541691151516179055565b80f35b80fd5b5034610186576020366003190112610186576101a3611965565b6101ab61198a565b6001600160a01b039081169081156101e6576000548260018060a01b031982161760005516600080516020611d08833981519152600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461018657602036600319011261018657610254611965565b61025c61198a565b6001600160a01b0316801561028257600880546001600160a01b03191691909117905580f35b60405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908199959481c9958da5c1a595b9d605a1b6044820152606490fd5b50346101865760a0366003190112610186576102d9611965565b606435906001600160a01b03821682036107695760843590811515820361076957610302611aee565b61030a611aaa565b60443515610725576001600160a01b038316845260056020908152604085205490929060ff16156106e2576040516331a9108f60e11b815260248035600483015284908290816001600160a01b0387165afa9081156106565786916106c5575b50336001600160a01b039091160361068e5760405163e985e9c560e01b815233600482015230602482015283816044816001600160a01b0387165afa908115610656578691610661575b5080156105e2575b156105a2576040519383850160018060601b03198460601b16815260243560348701523360601b6054870152426068870152466088870152608886528560c081011060018060401b0360c08801111761058c5760c08601604052855190209461042760c082016119e2565b3360c082015260058660e083019260018060a01b038716845285886105028c61010085016024358152610120860195604435875261014081019660018060a01b038c168852610160820192604063ffffffff958646168652600361018086019960018b526101a087019b15158c526101c087019d8e429052835252209b8c9360c060018060a01b039101511660018060a01b031980955416178d5560018d019060018060a01b03905116848254161790555160028c01555160038b015560048a019660018060a01b0390511690875416178655511684611a87565b518254915161ffff60c01b1990921690151560c01b60ff60c01b161790151560c81b60ff60c81b1617905551910155604080516024358152604435958101959095526001600160a01b03918216908501529015156060840152169133917f613db017cf970b3bf73ac6a3ea7e34b1c2c45f56617db517fbb448e27e411ca290608090a46001805580f35b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260048101849052601860248201527713585c9ad95d1c1b1858d9481b9bdd08185c1c1c9bdd995960421b6044820152606490fd5b5060405163020604bf60e21b815260248035600483015284908290816001600160a01b0387165afa908115610656578691610629575b506001600160a01b031630146103bc565b6106499150843d861161064f575b6106418183611a2d565b810190611a50565b38610618565b503d610637565b6040513d88823e3d90fd5b6106819150843d8611610687575b6106798183611a2d565b810190611a6f565b386103b4565b503d61066f565b60405162461bcd60e51b815260048101849052600f60248201526e2737ba103a37b5b2b71037bbb732b960891b6044820152606490fd5b6106dc9150843d861161064f576106418183611a2d565b3861036a565b60405162461bcd60e51b815260048101849052601b60248201527a14185e5b595b9d081d1bdad95b881b9bdd081cdd5c1c1bdc9d1959602a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527b05072696365206d7573742062652067726561746572207468616e20360241b6044820152606490fd5b600080fd5b503461018657602036600319011261018657600254600435906001600160a01b039060081c8116330361084a578183526004602052604083209060038201805460ff8160e01c166108085760ff60e01b1916600160e01b179055600182015491548452600360205260408420548116929116907f0d722b3fbeea8d664184e37684ed9a1b9a5a8eebe8565c476cdb25fc74f7653c8480a480f35b60405162461bcd60e51b815260206004820152601a602482015279141d5c98da185cd948185b1c9958591e4818dbdb5c1b195d195960321b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527b4f6e6c792058434d206272696467652063616e20636f6d706c65746560201b6044820152606490fd5b503461018657602036600319011261018657604061012091600435815260036020522060018060a01b0360ff81835416928260018201541692600282015460038301549060056004850154940154956040519788526020880152604087015260608601528116608085015263ffffffff8160a01c1660a0850152818160c01c16151560c085015260c81c16151560e0830152610100820152f35b503461018657806003193601126101865760206040516103e88152f35b50346101865760203660031901126101865760209060ff906040906001600160a01b03610970611965565b168152600584522054166040519015158152f35b50602080600319360112610d5e5760043561099d611aee565b6109a5611aaa565b808352600382526040832090600482019283546109c760ff8260c01c16611b44565b60ff8160c81c16610cff5763ffffffff804616908260a01c1603610ccc576003840154936127106109fa60075487611b85565b0487610a068288611bae565b6001600160a01b0394851680610b795750908092610a2689341015611cc4565b80158015610b50575b505080809286865416828215610b47575bf11561065657843411610b16575b816001820154169087838254166002830154843b15610b1257610a8c94839283604051809881958294632142170760e11b8452339060048501611bbb565b03925af1928315610b05578493610ae8575b505086549660ff60c01b198816905554169460405194855216908301527f71c70d4eb4440b7cb984e4328ffc3088b6c5c0fac2007eef082e1d22fd732ce760403393a46001805580f35b610af491929350611a1a565b610b015781908738610a9e565b8680fd5b50604051903d90823e3d90fd5b8280fd5b86808080610b248934611bae565b818115610b3e575b3390f1610a4e576040513d88823e3d90fd5b506108fc610b2c565b506108fc610a40565b82809281928960085416908390610b70575bf115610b0557813880610a2f565b506108fc610b62565b6040516323b872dd60e01b815292879084908180610b9c8e303360048501611bbb565b0391855af1928315610cc1578793610bbb918d91610ca4575b50611bdd565b83610c2f575b610be79350858554168b60405180968195829463a9059cbb60e01b845260048401611c23565b03925af18015610c2457610c02918991610c07575b50611c80565b610a4e565b610c1e9150853d8711610687576106798183611a2d565b38610bfc565b6040513d8a823e3d90fd5b91610c54938660085416604051958692839263a9059cbb60e01b845260048401611c23565b03818d865af1918215610c9957610c778793610be7958d91610c7c575b50611c3e565b610bc1565b610c939150853d8711610687576106798183611a2d565b38610c71565b6040513d8c823e3d90fd5b610cbb9150853d8711610687576106798183611a2d565b38610bb5565b6040513d8d823e3d90fd5b60405162461bcd60e51b815260048101839052600b60248201526a2bb937b7339031b430b4b760a91b6044820152606490fd5b60405162461bcd60e51b815260048101839052603160248201527f5573652063726f73732d636861696e20707572636861736520666f722063726f60448201527073732d636861696e206c697374696e677360781b6064820152608490fd5b5080fd5b503461018657602036600319011261018657600435610d7f61198a565b6103e88111610d8e5760075580f35b60405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b6044820152606490fd5b503461018657602036600319011261018657600435610ddf611aee565b80825260036020526040822080546001600160a01b03163303610e46576004018054610e1060ff8260c01c16611b44565b60ff60c01b1916905533907faf2daca9870585bf8789d28a6290e0b49491e1fb967adc141b2a68c5e386d9768380a36001805580f35b60405162461bcd60e51b81526020600482015260116024820152702737ba103634b9ba34b7339037bbb732b960791b6044820152606490fd5b503461018657604036600319011261018657610183610e9c611965565b610ea461197b565b90610ead61198a565b60018060a01b031683526005602052604083209060ff801983541691151516179055565b5034610186578060031936011261018657546040516001600160a01b039091168152602090f35b5034610186578060031936011261018657610f1161198a565b610f19611aaa565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b503461018657602036600319011261018657604061010091600435815260046020522080549060ff60018060a01b0391826001820154169260028201546004600384015493015494604051968752602087015260408601528116606085015263ffffffff808260a01c1660808601528160c01c1660a085015260e01c16151560c083015260e0820152f35b503461018657806003193601126101865760025460405160089190911c6001600160a01b03168152602090f35b503461018657806003193601126101865761102461198a565b600080546001600160a01b0319811682556001600160a01b0316600080516020611d088339815191528280a380f35b5034610186576020366003190112610186576040816101009260e08351611079816119fe565b82815282602082015282858201528260608201528260808201528260a08201528260c0820152015260043581526004602052206040516110b8816119fe565b81549182825260c08260018060a01b03806001850154169360208301948552600281015491604084019283526003820154958693826060870192818716845260e0600460808a019760ff63ffffffff9c8d9c8c8e809e60a01c168d5260a082019e8f91841c169052019d841c1615158d5201549b019a8b526040519b8c52511660208b01525160408a01525116606088015251166080860152511660a084015251151560c08301525160e0820152f35b50346101865780600319360112610186576020600754604051908152f35b5034610186578060031936011261018657602060ff600254166040519015158152f35b50346101865780600319360112610186576008546040516001600160a01b039091168152602090f35b50346101865780600319360112610186576111eb61198a565b60025460ff81161561122b5760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b50346101865760203660031901126101865760ff604060209263ffffffff61128d611952565b168152600684522054166040519015158152f35b5060403660031901126101865763ffffffff6024351660243503610186576112c7611aee565b6112cf611aaa565b60043581526003602052604081206004810180546112f260ff8260c01c16611b44565b60ff8160c81c16156117df5763ffffffff602435168452600660205260ff6040852054161561179a576003830154928461271061133160075487611b85565b0461133c8187611bae565b6001600160a01b039490919085168061167d5750829061135e88341015611cc4565b80158015611654575b50508080928686541682821561164b575bf11561163757833411611619575b6040516020810160043581523360601b604083015263ffffffff60e01b60243560e01b1660548301524260588301526058825281608081011060018060401b036080840111176116055760049060808301604052825190208096838961148863ffffffff8a546113f8608086016119fe565b8735608086015260a0850133815260c0860196875260e08601968c831688528361010088019360a01c16835260806040610120890197866024351689526101606101408b019a828c52019b428d5281528c602052209b01518b558c60018c019251169160018060a01b031992838254161790555160028b01558b60038b0197511690875416178655511684611a87565b519082549060ff60e01b9051151560e01b169163ffffffff60c01b9060c01b169064ffffffffff60c01b19161717905551910155600181019180835416918660028054920193845490803b15610b125784836114ff956040519687958694859363095ea7b360e01b855260081c1660048401611c23565b03925af180156115fa576115e3575b50908186939260025460081c169254169054823b156115df5760648492836040519586948593637ee2548d60e11b85526004850152602484015263ffffffff6024351660448401525af180156115d4576115c0575b505080549060ff60c01b198216905563ffffffff6040519160a01c16815263ffffffff60243516602082015233917f9970e9a1cf46c8081d3b4de0f7437f317c16696ce7431dc2e0915c817c89413f604060043593a46001805580f35b6115c990611a1a565b610b12578238611563565b6040513d84823e3d90fd5b8380fd5b6115f1909691939296611a1a565b9490913861150e565b6040513d89823e3d90fd5b634e487b7160e01b87526041600452602487fd5b848080806116278834611bae565b818115611642575b3390f1611386575b6040513d86823e3d90fd5b506108fc61162f565b506108fc611378565b82809281928960085416908390611674575bf115610b0557813880611367565b506108fc611666565b6040516323b872dd60e01b815292935091602081806116a18b303360048501611bbb565b03818c875af1801561178f576116bd918a916117765750611bdd565b80611724575b506116ec91602091858554168960405180968195829463a9059cbb60e01b845260048401611c23565b03925af180156106565761170691879161170b5750611c80565b611386565b610c1e915060203d602011610687576106798183611a2d565b91602061174b938660085416604051958692839263a9059cbb60e01b845260048401611c23565b03818b865af1918215610c245761176e6020936116ec958b91610c7c5750611c3e565b9150916116c3565b610cbb915060203d602011610687576106798183611a2d565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260206004820152601f60248201527f44657374696e6174696f6e20636861696e206e6f7420737570706f72746564006044820152606490fd5b60405162461bcd60e51b81526020600482015260196024820152784e6f7420612063726f73732d636861696e206c697374696e6760381b6044820152606490fd5b82346101865760203660031901126101865761183b826119e2565b8082528060208301528060408301528060608301528060808301528060a08301528060c08301528060e0830152806101008093015260043581526003602052604090209060405161188b816119e2565b600160a01b6001900380845416938483528160018201541660208401908152600282015460408501908152600383015493606086019485526004840154946080870190828716825260a08801938363ffffffff96878a60a01c1687528b60c08c01998b60c01c60ff1615158b5260e08d019b60c81c60ff1615158c52600501549b019a8b526040519c8d52511660208c01525160408b01525160608a015251166080880152511660a086015251151560c085015251151560e0840152519082015261012090f35b6004359063ffffffff8216820361076957565b600435906001600160a01b038216820361076957565b60243590811515820361076957565b6000546001600160a01b0316330361199e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b61012081019081106001600160401b0382111761058c57604052565b61010081019081106001600160401b0382111761058c57604052565b6001600160401b03811161058c57604052565b601f909101601f19168101906001600160401b0382119082101761058c57604052565b9081602091031261076957516001600160a01b03811681036107695790565b90816020910312610769575180151581036107695790565b805463ffffffff60a01b191660a09290921b63ffffffff60a01b16919091179055565b60ff60025416611ab657565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260015414611aff576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15611b4b57565b60405162461bcd60e51b81526020600482015260126024820152714c697374696e67206e6f742061637469766560701b6044820152606490fd5b81810292918115918404141715611b9857565b634e487b7160e01b600052601160045260246000fd5b91908203918211611b9857565b6001600160a01b03918216815291166020820152604081019190915260600190565b15611be457565b60405162461bcd60e51b815260206004820152601760248201527614185e5b595b9d081d1c985b9cd9995c8819985a5b1959604a1b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b15611c4557565b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b15611c8757565b60405162461bcd60e51b815260206004820152601560248201527414d95b1b195c881c185e5b595b9d0819985a5b1959605a1b6044820152606490fd5b15611ccb57565b60405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606490fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220d9581746271c7ae365622a4d5934022021d8c6b14edb098fb0c88b70600245e364736f6c63430008110033",
  "devdoc": {
    "details": "Cross-chain NFT marketplace with XCM integration Enables NFT trading across Polkadot Hub and Moonbase Alpha",
    "kind": "dev",
    "methods": {
      "cancelListing(bytes32)": {
        "details": "Cancel listing",
        "params": {
          "listingId": "Listing ID"
        }
      },
      "completeCrossChainPurchase(bytes32)": {
        "details": "Complete cross-chain purchase (called by XCM bridge)",
        "params": {
          "purchaseId": "Purchase ID"
        }
      },
      "getCrossChainPurchase(bytes32)": {
        "details": "Get cross-chain purchase information",
        "params": {
          "purchaseId": "Purchase ID"
        },
        "returns": {
          "_0": "CrossChainPurchase information"
        }
      },
      "getListing(bytes32)": {
        "details": "Get listing information",
        "params": {
          "listingId": "Listing ID"
        },
        "returns": {
          "_0": "Listing information"
        }
      },
      "initiateCrossChainPurchase(bytes32,uint32)": {
        "details": "Initiate cross-chain NFT purchase",
        "params": {
          "destinationChainId": "Target chain for NFT delivery",
          "listingId": "Listing ID"
        }
      },
      "listNFT(address,uint256,uint256,address,bool)": {
        "details": "List NFT for sale",
        "params": {
          "isCrossChain": "Whether this is a cross-chain listing",
          "nftContract": "NFT contract address",
          "paymentToken": "Payment token address (address(0) for native)",
          "price": "Listing price",
          "tokenId": "Token ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Emergency pause"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchaseNFT(bytes32)": {
        "details": "Purchase NFT (same chain)",
        "params": {
          "listingId": "Listing ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setChainSupport(uint32,bool)": {
        "details": "Set chain support",
        "params": {
          "chainId": "Chain ID",
          "supported": "Support status"
        }
      },
      "setFeeRecipient(address)": {
        "details": "Set fee recipient",
        "params": {
          "_feeRecipient": "New fee recipient address"
        }
      },
      "setMarketplaceFee(uint256)": {
        "details": "Set marketplace fee",
        "params": {
          "_fee": "Fee in basis points"
        }
      },
      "setPaymentTokenSupport(address,bool)": {
        "details": "Set payment token support",
        "params": {
          "supported": "Support status",
          "token": "Token address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause"
      }
    },
    "title": "CrossChainMarketplace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 278,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 177,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4535,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "xcmBridge",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(XCMBridge)6002"
      },
      {
        "astId": 4540,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "listings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Listing)4515_storage)"
      },
      {
        "astId": 4545,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "crossChainPurchases",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(CrossChainPurchase)4532_storage)"
      },
      {
        "astId": 4549,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "supportedPaymentTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4553,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "supportedChains",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 4556,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "marketplaceFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4561,
        "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(XCMBridge)6002": {
        "encoding": "inplace",
        "label": "contract XCMBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(CrossChainPurchase)4532_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CrossChainMarketplace.CrossChainPurchase)",
        "numberOfBytes": "32",
        "value": "t_struct(CrossChainPurchase)4532_storage"
      },
      "t_mapping(t_bytes32,t_struct(Listing)4515_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CrossChainMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)4515_storage"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(CrossChainPurchase)4532_storage": {
        "encoding": "inplace",
        "label": "struct CrossChainMarketplace.CrossChainPurchase",
        "members": [
          {
            "astId": 4517,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "listingId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4519,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4521,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4523,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "paymentToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4525,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "sourceChainId",
            "offset": 20,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 4527,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "destinationChainId",
            "offset": 24,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 4529,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "completed",
            "offset": 28,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 4531,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Listing)4515_storage": {
        "encoding": "inplace",
        "label": "struct CrossChainMarketplace.Listing",
        "members": [
          {
            "astId": 4498,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4500,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "nftContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4502,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4504,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4506,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "paymentToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4508,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "sourceChainId",
            "offset": 20,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 4510,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "isActive",
            "offset": 24,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 4512,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "isCrossChain",
            "offset": 25,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 4514,
            "contract": "contracts/CrossChainMarketplace.sol:CrossChainMarketplace",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}