{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4906.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\nimport \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../common/ERC2981.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\n * information.\n *\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC721Royalty is ERC2981, ERC721 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n        _resetTokenRoyalty(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../interfaces/IERC4906.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n\n        emit MetadataUpdate(tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/CrossChainMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./XCMBridge.sol\";\n\n/**\n * @title CrossChainMarketplace\n * @dev Cross-chain NFT marketplace with XCM integration\n * Enables NFT trading across Polkadot Hub and Moonbase Alpha\n */\ncontract CrossChainMarketplace is Ownable, ReentrancyGuard, Pausable {\n    // Marketplace listing structure\n    struct Listing {\n        address seller;\n        address nftContract;\n        uint256 tokenId;\n        uint256 price;\n        address paymentToken; // address(0) for native token\n        uint32 sourceChainId;\n        bool isActive;\n        bool isCrossChain;\n        uint256 timestamp;\n    }\n\n    // Cross-chain purchase structure\n    struct CrossChainPurchase {\n        bytes32 listingId;\n        address buyer;\n        uint256 price;\n        address paymentToken;\n        uint32 sourceChainId;\n        uint32 destinationChainId;\n        bool completed;\n        uint256 timestamp;\n    }\n\n    // XCM Bridge reference\n    XCMBridge public xcmBridge;\n\n    // State variables\n    mapping(bytes32 => Listing) public listings;\n    mapping(bytes32 => CrossChainPurchase) public crossChainPurchases;\n    mapping(address => bool) public supportedPaymentTokens;\n    mapping(uint32 => bool) public supportedChains;\n\n    // Fee configuration\n    uint256 public marketplaceFee = 250; // 2.5% in basis points\n    uint256 public constant MAX_FEE = 1000; // 10% maximum fee\n    address public feeRecipient;\n\n    // Events\n    event NFTListed(\n        bytes32 indexed listingId,\n        address indexed seller,\n        address indexed nftContract,\n        uint256 tokenId,\n        uint256 price,\n        address paymentToken,\n        bool isCrossChain\n    );\n\n    event NFTSold(\n        bytes32 indexed listingId,\n        address indexed buyer,\n        address indexed seller,\n        uint256 price,\n        address paymentToken\n    );\n\n    event CrossChainPurchaseInitiated(\n        bytes32 indexed purchaseId,\n        bytes32 indexed listingId,\n        address indexed buyer,\n        uint32 sourceChainId,\n        uint32 destinationChainId\n    );\n\n    event CrossChainPurchaseCompleted(\n        bytes32 indexed purchaseId,\n        address indexed buyer,\n        address indexed seller\n    );\n\n    event ListingCancelled(bytes32 indexed listingId, address indexed seller);\n\n    constructor(address _xcmBridge, address _feeRecipient) {\n        xcmBridge = XCMBridge(_xcmBridge);\n        feeRecipient = _feeRecipient;\n        \n        // Initialize supported chains\n        supportedChains[420420422] = true; // Polkadot Hub\n        supportedChains[1287] = true; // Moonbase Alpha\n        \n        // Support native token payments\n        supportedPaymentTokens[address(0)] = true;\n    }\n\n    /**\n     * @dev List NFT for sale\n     * @param nftContract NFT contract address\n     * @param tokenId Token ID\n     * @param price Listing price\n     * @param paymentToken Payment token address (address(0) for native)\n     * @param isCrossChain Whether this is a cross-chain listing\n     */\n    function listNFT(\n        address nftContract,\n        uint256 tokenId,\n        uint256 price,\n        address paymentToken,\n        bool isCrossChain\n    ) external nonReentrant whenNotPaused {\n        require(price > 0, \"Price must be greater than 0\");\n        require(supportedPaymentTokens[paymentToken], \"Payment token not supported\");\n        require(\n            IERC721(nftContract).ownerOf(tokenId) == msg.sender,\n            \"Not token owner\"\n        );\n        require(\n            IERC721(nftContract).isApprovedForAll(msg.sender, address(this)) ||\n            IERC721(nftContract).getApproved(tokenId) == address(this),\n            \"Marketplace not approved\"\n        );\n\n        bytes32 listingId = keccak256(\n            abi.encodePacked(\n                nftContract,\n                tokenId,\n                msg.sender,\n                block.timestamp,\n                block.chainid\n            )\n        );\n\n        listings[listingId] = Listing({\n            seller: msg.sender,\n            nftContract: nftContract,\n            tokenId: tokenId,\n            price: price,\n            paymentToken: paymentToken,\n            sourceChainId: uint32(block.chainid),\n            isActive: true,\n            isCrossChain: isCrossChain,\n            timestamp: block.timestamp\n        });\n\n        emit NFTListed(\n            listingId,\n            msg.sender,\n            nftContract,\n            tokenId,\n            price,\n            paymentToken,\n            isCrossChain\n        );\n    }\n\n    /**\n     * @dev Purchase NFT (same chain)\n     * @param listingId Listing ID\n     */\n    function purchaseNFT(bytes32 listingId) external payable nonReentrant whenNotPaused {\n        Listing storage listing = listings[listingId];\n        require(listing.isActive, \"Listing not active\");\n        require(!listing.isCrossChain, \"Use cross-chain purchase for cross-chain listings\");\n        require(listing.sourceChainId == uint32(block.chainid), \"Wrong chain\");\n\n        uint256 totalPrice = listing.price;\n        uint256 fee = (totalPrice * marketplaceFee) / 10000;\n        uint256 sellerAmount = totalPrice - fee;\n\n        // Handle payment\n        if (listing.paymentToken == address(0)) {\n            require(msg.value >= totalPrice, \"Insufficient payment\");\n            \n            // Transfer fee to fee recipient\n            if (fee > 0) {\n                payable(feeRecipient).transfer(fee);\n            }\n            \n            // Transfer payment to seller\n            payable(listing.seller).transfer(sellerAmount);\n            \n            // Refund excess payment\n            if (msg.value > totalPrice) {\n                payable(msg.sender).transfer(msg.value - totalPrice);\n            }\n        } else {\n            IERC20 paymentToken = IERC20(listing.paymentToken);\n            require(\n                paymentToken.transferFrom(msg.sender, address(this), totalPrice),\n                \"Payment transfer failed\"\n            );\n            \n            // Transfer fee to fee recipient\n            if (fee > 0) {\n                require(\n                    paymentToken.transfer(feeRecipient, fee),\n                    \"Fee transfer failed\"\n                );\n            }\n            \n            // Transfer payment to seller\n            require(\n                paymentToken.transfer(listing.seller, sellerAmount),\n                \"Seller payment failed\"\n            );\n        }\n\n        // Transfer NFT to buyer\n        IERC721(listing.nftContract).safeTransferFrom(\n            listing.seller,\n            msg.sender,\n            listing.tokenId\n        );\n\n        // Mark listing as inactive\n        listing.isActive = false;\n\n        emit NFTSold(\n            listingId,\n            msg.sender,\n            listing.seller,\n            totalPrice,\n            listing.paymentToken\n        );\n    }\n\n    /**\n     * @dev Initiate cross-chain NFT purchase\n     * @param listingId Listing ID\n     * @param destinationChainId Target chain for NFT delivery\n     */\n    function initiateCrossChainPurchase(\n        bytes32 listingId,\n        uint32 destinationChainId\n    ) external payable nonReentrant whenNotPaused {\n        Listing storage listing = listings[listingId];\n        require(listing.isActive, \"Listing not active\");\n        require(listing.isCrossChain, \"Not a cross-chain listing\");\n        require(supportedChains[destinationChainId], \"Destination chain not supported\");\n\n        uint256 totalPrice = listing.price;\n        uint256 fee = (totalPrice * marketplaceFee) / 10000;\n        uint256 sellerAmount = totalPrice - fee;\n\n        // Handle payment (similar to regular purchase)\n        if (listing.paymentToken == address(0)) {\n            require(msg.value >= totalPrice, \"Insufficient payment\");\n            \n            if (fee > 0) {\n                payable(feeRecipient).transfer(fee);\n            }\n            \n            payable(listing.seller).transfer(sellerAmount);\n            \n            if (msg.value > totalPrice) {\n                payable(msg.sender).transfer(msg.value - totalPrice);\n            }\n        } else {\n            IERC20 paymentToken = IERC20(listing.paymentToken);\n            require(\n                paymentToken.transferFrom(msg.sender, address(this), totalPrice),\n                \"Payment transfer failed\"\n            );\n            \n            if (fee > 0) {\n                require(\n                    paymentToken.transfer(feeRecipient, fee),\n                    \"Fee transfer failed\"\n                );\n            }\n            \n            require(\n                paymentToken.transfer(listing.seller, sellerAmount),\n                \"Seller payment failed\"\n            );\n        }\n\n        bytes32 purchaseId = keccak256(\n            abi.encodePacked(\n                listingId,\n                msg.sender,\n                destinationChainId,\n                block.timestamp\n            )\n        );\n\n        crossChainPurchases[purchaseId] = CrossChainPurchase({\n            listingId: listingId,\n            buyer: msg.sender,\n            price: totalPrice,\n            paymentToken: listing.paymentToken,\n            sourceChainId: listing.sourceChainId,\n            destinationChainId: destinationChainId,\n            completed: false,\n            timestamp: block.timestamp\n        });\n\n        // Lock NFT in XCM bridge for cross-chain transfer\n        IERC721(listing.nftContract).approve(address(xcmBridge), listing.tokenId);\n        xcmBridge.lockNFT(listing.nftContract, listing.tokenId, destinationChainId);\n\n        // Mark listing as inactive\n        listing.isActive = false;\n\n        emit CrossChainPurchaseInitiated(\n            purchaseId,\n            listingId,\n            msg.sender,\n            listing.sourceChainId,\n            destinationChainId\n        );\n    }\n\n    /**\n     * @dev Complete cross-chain purchase (called by XCM bridge)\n     * @param purchaseId Purchase ID\n     */\n    function completeCrossChainPurchase(bytes32 purchaseId) external {\n        require(msg.sender == address(xcmBridge), \"Only XCM bridge can complete\");\n        \n        CrossChainPurchase storage purchase = crossChainPurchases[purchaseId];\n        require(!purchase.completed, \"Purchase already completed\");\n        \n        purchase.completed = true;\n        \n        emit CrossChainPurchaseCompleted(\n            purchaseId,\n            purchase.buyer,\n            listings[purchase.listingId].seller\n        );\n    }\n\n    /**\n     * @dev Cancel listing\n     * @param listingId Listing ID\n     */\n    function cancelListing(bytes32 listingId) external nonReentrant {\n        Listing storage listing = listings[listingId];\n        require(listing.seller == msg.sender, \"Not listing owner\");\n        require(listing.isActive, \"Listing not active\");\n\n        listing.isActive = false;\n\n        emit ListingCancelled(listingId, msg.sender);\n    }\n\n    /**\n     * @dev Set marketplace fee\n     * @param _fee Fee in basis points\n     */\n    function setMarketplaceFee(uint256 _fee) external onlyOwner {\n        require(_fee <= MAX_FEE, \"Fee too high\");\n        marketplaceFee = _fee;\n    }\n\n    /**\n     * @dev Set fee recipient\n     * @param _feeRecipient New fee recipient address\n     */\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\n        require(_feeRecipient != address(0), \"Invalid fee recipient\");\n        feeRecipient = _feeRecipient;\n    }\n\n    /**\n     * @dev Set payment token support\n     * @param token Token address\n     * @param supported Support status\n     */\n    function setPaymentTokenSupport(address token, bool supported) external onlyOwner {\n        supportedPaymentTokens[token] = supported;\n    }\n\n    /**\n     * @dev Set chain support\n     * @param chainId Chain ID\n     * @param supported Support status\n     */\n    function setChainSupport(uint32 chainId, bool supported) external onlyOwner {\n        supportedChains[chainId] = supported;\n    }\n\n    /**\n     * @dev Get listing information\n     * @param listingId Listing ID\n     * @return Listing information\n     */\n    function getListing(bytes32 listingId) external view returns (Listing memory) {\n        return listings[listingId];\n    }\n\n    /**\n     * @dev Get cross-chain purchase information\n     * @param purchaseId Purchase ID\n     * @return CrossChainPurchase information\n     */\n    function getCrossChainPurchase(bytes32 purchaseId) \n        external \n        view \n        returns (CrossChainPurchase memory) \n    {\n        return crossChainPurchases[purchaseId];\n    }\n\n    /**\n     * @dev Emergency pause\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}"
    },
    "contracts/IERC4907.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IERC4907 {    \n    /// @notice 当NFT的用户或过期时间被更新时触发\n    event UpdateUser(uint256 indexed tokenId, address indexed user, uint64 expires);\n    \n    /// @notice 设置NFT的用户和过期时间\n    /// @param tokenId 要设置用户的NFT的ID\n    /// @param user 用户的地址\n    /// @param expires 用户权限的过期时间戳\n    function setUser(uint256 tokenId, address user, uint64 expires) external;\n    \n    /// @notice 获取NFT的当前用户\n    /// @param tokenId 要查询的NFT的ID\n    /// @return 用户的地址，如果没有用户则返回零地址\n    function userOf(uint256 tokenId) external view returns(address);\n    \n    /// @notice 获取NFT的用户过期时间\n    /// @param tokenId 要查询的NFT的ID\n    /// @return 用户权限的过期时间戳\n    function userExpires(uint256 tokenId) external view returns(uint256);\n} "
    },
    "contracts/XCMBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\n/**\n * @title XCMBridge\n * @dev Cross-chain NFT bridge contract for Polkadot XCM integration\n * Handles NFT locking/unlocking and cross-chain message processing\n */\ncontract XCMBridge is IERC721Receiver, Ownable, ReentrancyGuard, Pausable {\n    // XCM message types\n    enum MessageType {\n        LOCK_NFT,\n        UNLOCK_NFT,\n        MINT_WRAPPED_NFT,\n        BURN_WRAPPED_NFT\n    }\n\n    // Cross-chain NFT information\n    struct CrossChainNFT {\n        address originalContract;\n        uint256 originalTokenId;\n        address originalOwner;\n        uint32 sourceChainId;\n        uint32 destinationChainId;\n        bool isLocked;\n        uint256 timestamp;\n    }\n\n    // XCM message structure\n    struct XCMMessage {\n        MessageType messageType;\n        address nftContract;\n        uint256 tokenId;\n        address recipient;\n        uint32 sourceChainId;\n        uint32 destinationChainId;\n        bytes32 messageHash;\n        bool processed;\n    }\n\n    // Chain ID mappings\n    uint32 public constant POLKADOT_HUB_CHAIN_ID = 420420422;\n    uint32 public constant MOONBASE_ALPHA_CHAIN_ID = 1287;\n\n    // State variables\n    mapping(bytes32 => CrossChainNFT) public crossChainNFTs;\n    mapping(bytes32 => XCMMessage) public xcmMessages;\n    mapping(address => bool) public authorizedContracts;\n    mapping(uint32 => bool) public supportedChains;\n\n    // Events\n    event NFTLocked(\n        address indexed nftContract,\n        uint256 indexed tokenId,\n        address indexed owner,\n        uint32 destinationChainId,\n        bytes32 messageHash\n    );\n\n    event NFTUnlocked(\n        address indexed nftContract,\n        uint256 indexed tokenId,\n        address indexed owner,\n        bytes32 messageHash\n    );\n\n    event XCMMessageSent(\n        bytes32 indexed messageHash,\n        MessageType messageType,\n        uint32 destinationChainId\n    );\n\n    event XCMMessageReceived(\n        bytes32 indexed messageHash,\n        MessageType messageType,\n        uint32 sourceChainId\n    );\n\n    event ChainSupported(uint32 chainId, bool supported);\n    event ContractAuthorized(address indexed nftContract, bool authorized);\n\n    constructor() {\n        // Initialize supported chains\n        supportedChains[POLKADOT_HUB_CHAIN_ID] = true;\n        supportedChains[MOONBASE_ALPHA_CHAIN_ID] = true;\n    }\n\n    /**\n     * @dev Lock NFT for cross-chain transfer\n     * @param nftContract Address of the NFT contract\n     * @param tokenId Token ID to lock\n     * @param destinationChainId Target chain ID\n     */\n    function lockNFT(\n        address nftContract,\n        uint256 tokenId,\n        uint32 destinationChainId\n    ) external nonReentrant whenNotPaused {\n        require(authorizedContracts[nftContract], \"Contract not authorized\");\n        require(supportedChains[destinationChainId], \"Chain not supported\");\n        require(\n            IERC721(nftContract).ownerOf(tokenId) == msg.sender,\n            \"Not token owner\"\n        );\n\n        // Generate unique message hash\n        bytes32 messageHash = keccak256(\n            abi.encodePacked(\n                nftContract,\n                tokenId,\n                msg.sender,\n                block.chainid,\n                destinationChainId,\n                block.timestamp\n            )\n        );\n\n        // Transfer NFT to bridge contract\n        IERC721(nftContract).safeTransferFrom(\n            msg.sender,\n            address(this),\n            tokenId\n        );\n\n        // Store cross-chain NFT information\n        crossChainNFTs[messageHash] = CrossChainNFT({\n            originalContract: nftContract,\n            originalTokenId: tokenId,\n            originalOwner: msg.sender,\n            sourceChainId: uint32(block.chainid),\n            destinationChainId: destinationChainId,\n            isLocked: true,\n            timestamp: block.timestamp\n        });\n\n        // Create XCM message\n        xcmMessages[messageHash] = XCMMessage({\n            messageType: MessageType.LOCK_NFT,\n            nftContract: nftContract,\n            tokenId: tokenId,\n            recipient: msg.sender,\n            sourceChainId: uint32(block.chainid),\n            destinationChainId: destinationChainId,\n            messageHash: messageHash,\n            processed: false\n        });\n\n        emit NFTLocked(nftContract, tokenId, msg.sender, destinationChainId, messageHash);\n        emit XCMMessageSent(messageHash, MessageType.LOCK_NFT, destinationChainId);\n    }\n\n    /**\n     * @dev Unlock NFT after cross-chain transfer completion\n     * @param messageHash Hash of the original lock message\n     */\n    function unlockNFT(bytes32 messageHash) external nonReentrant whenNotPaused {\n        CrossChainNFT storage nftInfo = crossChainNFTs[messageHash];\n        require(nftInfo.isLocked, \"NFT not locked\");\n        require(nftInfo.originalOwner == msg.sender, \"Not original owner\");\n\n        // Mark as unlocked\n        nftInfo.isLocked = false;\n\n        // Transfer NFT back to original owner\n        IERC721(nftInfo.originalContract).safeTransferFrom(\n            address(this),\n            nftInfo.originalOwner,\n            nftInfo.originalTokenId\n        );\n\n        emit NFTUnlocked(\n            nftInfo.originalContract,\n            nftInfo.originalTokenId,\n            nftInfo.originalOwner,\n            messageHash\n        );\n    }\n\n    /**\n     * @dev Process incoming XCM message\n     * @param messageHash Hash of the XCM message\n     * @param messageType Type of XCM message\n     * @param nftContract NFT contract address\n     * @param tokenId Token ID\n     * @param recipient Recipient address\n     * @param sourceChainId Source chain ID\n     */\n    function processXCMMessage(\n        bytes32 messageHash,\n        MessageType messageType,\n        address nftContract,\n        uint256 tokenId,\n        address recipient,\n        uint32 sourceChainId\n    ) external onlyOwner {\n        require(!xcmMessages[messageHash].processed, \"Message already processed\");\n        require(supportedChains[sourceChainId], \"Source chain not supported\");\n\n        xcmMessages[messageHash] = XCMMessage({\n            messageType: messageType,\n            nftContract: nftContract,\n            tokenId: tokenId,\n            recipient: recipient,\n            sourceChainId: sourceChainId,\n            destinationChainId: uint32(block.chainid),\n            messageHash: messageHash,\n            processed: true\n        });\n\n        emit XCMMessageReceived(messageHash, messageType, sourceChainId);\n    }\n\n    /**\n     * @dev Authorize NFT contract for cross-chain transfers\n     * @param nftContract Address of the NFT contract\n     * @param authorized Authorization status\n     */\n    function setContractAuthorization(\n        address nftContract,\n        bool authorized\n    ) external onlyOwner {\n        authorizedContracts[nftContract] = authorized;\n        emit ContractAuthorized(nftContract, authorized);\n    }\n\n    /**\n     * @dev Set chain support status\n     * @param chainId Chain ID\n     * @param supported Support status\n     */\n    function setChainSupport(uint32 chainId, bool supported) external onlyOwner {\n        supportedChains[chainId] = supported;\n        emit ChainSupported(chainId, supported);\n    }\n\n    /**\n     * @dev Get cross-chain NFT information\n     * @param messageHash Message hash\n     * @return CrossChainNFT information\n     */\n    function getCrossChainNFT(bytes32 messageHash)\n        external\n        view\n        returns (CrossChainNFT memory)\n    {\n        return crossChainNFTs[messageHash];\n    }\n\n    /**\n     * @dev Get XCM message information\n     * @param messageHash Message hash\n     * @return XCMMessage information\n     */\n    function getXCMMessage(bytes32 messageHash)\n        external\n        view\n        returns (XCMMessage memory)\n    {\n        return xcmMessages[messageHash];\n    }\n\n    /**\n     * @dev Emergency pause function\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause function\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Handle NFT reception\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /**\n     * @dev Emergency withdrawal function (only owner)\n     * @param nftContract NFT contract address\n     * @param tokenId Token ID\n     * @param to Recipient address\n     */\n    function emergencyWithdraw(\n        address nftContract,\n        uint256 tokenId,\n        address to\n    ) external onlyOwner {\n        IERC721(nftContract).safeTransferFrom(address(this), to, tokenId);\n    }\n}"
    },
    "contracts/YourCollectible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2; //Do not change the solidity version as it negatively impacts submission grading\n\n// import \"hardhat/console.sol\";\n// import \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\"; // 实现 ERC721\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\"; // 实现 ERC721Enumerable\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\"; // 存储 tokenURI\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\"; // 实现 EIP-2981 版税标准\nimport \"@openzeppelin/contracts/access/Ownable.sol\"; // 用于控制合约的权限\nimport \"@openzeppelin/contracts/utils/Counters.sol\"; // 用于生成递增的 tokenId\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\"; // 防止重入攻击\nimport \"./IERC4907.sol\"; // 导入 ERC4907 接口\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract YourCollectible is\n\tERC721,\n\tERC721Enumerable,\n\tERC721URIStorage,\n    ERC721Royalty,\n\tOwnable,\n    ReentrancyGuard,\n    IERC4907\n{\n\tusing Counters for Counters.Counter;\n\n\tCounters.Counter public tokenIdCounter;\n\tuint256 public listingFee = 0.025 ether; // 上架费用，0.025 eth = 25000000000000000 wei\n    // uint256 public constant LOYALTY_PERIOD = 30 days;    // 忠诚度奖励周期（30天）seconds minutes hours days weeks\n    uint256 public constant LOYALTY_PERIOD = 5 minutes;\n    uint256 public constant LOYALTY_REWARD = 0.001 ether; // 每次奖励金额\n    bytes32 public merkleRoot; // 默克尔树根\n\n    // Cross-chain support\n    address public xcmBridge; // XCM Bridge contract address\n    mapping(uint256 => bool) public isLockedForCrossChain; // Track cross-chain locked NFTs\n    mapping(bytes32 => uint256) public crossChainMessages; // XCM message hash to tokenId mapping\n\t\n    // NFT结构体\n\tstruct NFTItem {\n        uint256 tokenId; // tokenId\n        uint256 price; // 价格\n        address payable owner; // 持有者\n        bool isListed; // 是否上架\n        string tokenUri; // 完整的 tokenURI\n    }\n\n    // 碎片结构体\n    struct Fraction {\n        uint256 amount; // 持有的碎片数量\n        bool isForSale; // 是否出售\n        uint256 price; // 每个碎片的单价\n    }\n\n    // 租赁用户结构体\n    struct UserInfo {\n        address user;   // 用户地址\n        uint64 expires; // 过期时间戳\n    }\n\n    // 忠诚度结构体\n    struct LoyaltyInfo {\n        uint256 holdingStartTime;  // NFT 持有开始时间\n        bool rewardClaimed;        // 是否已领取奖励\n        uint256 lastRewardTime;    // 上次领取奖励的时间\n    }\n\n    // 盲盒结构体\n    struct MysteryBox {\n        uint256 price;          // 盲盒价格\n        bool isActive;          // 盲盒是否激活\n        uint96 royaltyFee;      // 版税比例\n        uint256 uriCount;       // URI 总数\n    }\n\n    MysteryBox public mysteryBox;  // 盲盒信息\n    uint256 private nonce = 0;     // 用于生成随机数\n\n    // 映射\n\tmapping(uint256 => NFTItem) public nftItems; // 存储每个NFT的信息\n\tmapping(uint256 => address) public mintedBy; // 保存每个NFT的铸造者\n    mapping(uint256 => bool) public isFractionalized; // 记录是否被碎片化\n    mapping(uint256 => uint256) public totalFractions; // 每个NFT的碎片总量\n    mapping(uint256 => mapping(address => Fraction)) public fractions; // 每个NFT的碎片持有信息\n    mapping(uint256 => address[]) public fractionOwners; // 记录每个 tokenId 的碎片所有者地址\n    mapping(uint256 => UserInfo) internal _users; // 记录每个NFT的租赁用户信息\n    mapping(uint256 => LoyaltyInfo) public nftLoyalty;  // tokenId => 忠诚度信息\n    mapping(address => bool) public hasClaimed; // 记录地址是否已领取空投\n    \n    // 添加新的映射来存储 URI\n    mapping(uint256 => string) public mysteryBoxURIs;  // index => URI\n\n    // Cross-chain events\n    event NFTLockedForCrossChain(uint256 indexed tokenId, address indexed owner, bytes32 messageHash);\n    event NFTUnlockedFromCrossChain(uint256 indexed tokenId, address indexed owner, bytes32 messageHash);\n\n    // 事件\n    event NftListed(\n        uint256 indexed tokenId,\n        address indexed seller,\n        uint256 price\n    );\n    event NftBought(uint256 indexed tokenId, address indexed seller, address indexed buyer, uint256 price, address royaltyReceiver, uint256 royaltyAmount);\n    event NftDelisted(uint256 indexed tokenId, address indexed owner);\n    event NFTFractionalized(uint256 indexed tokenId, uint256 totalFractions);\n    event FractionForSale(uint256 indexed tokenId, address indexed owner, uint256 price);\n    event FractionSaleCancelled(uint256 indexed tokenId, address indexed owner);\n    event FractionBought(uint256 indexed tokenId, address indexed buyer, address indexed seller, uint256 amount, uint256 pricePerFraction);\n    // event FractionTransferred(\n    //     uint256 indexed tokenId,\n    //     address indexed from,\n    //     address indexed to,\n    //     uint256 amount\n    // );\n    event NFTRedeemed(uint256 indexed tokenId, address indexed redeemer);\n    event LoyaltyRewardClaimed(uint256 indexed tokenId, address indexed holder, uint256 amount);\n    event MysteryBoxCreated(uint256 price, uint256 totalOptions);\n    event MysteryBoxPurchased(address indexed buyer, uint256 tokenId, string uri);\n    event MysteryBoxStatusChanged(bool isActive);\n    // 空投事件\n    event AirdropClaimed(address indexed claimer, uint256 tokenId);\n    event MerkleRootSet(bytes32 merkleRoot);\n\n\tconstructor() payable ERC721(\"YourCollectible\", \"YCB\") {\n\t\t\n\t}\n\n\t// Chainlink Automation 所需的检查函数\n\t// function checkUpkeep(bytes calldata  checkData ) \n\t// \texternal \n\t// \tview \n\t// \toverride \n\t// \treturns (bool upkeepNeeded, bytes memory performData ) \n\t// {\n\t// \tupkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\n\t// }\n\n\t// Chainlink Automation 所需的执行函数\n\t// function performUpkeep(bytes calldata performData ) external override {\n\t// \tif ((block.timestamp - lastTimeStamp) > interval) {\n\t// \t\tlastTimeStamp = block.timestamp;\n\t// \t\t// 这里可以添加需要定期执行的逻辑\n\t// \t}\n\t// }\n\n\tfunction _baseURI() internal pure override returns (string memory) {\n\t\treturn \"https://aqua-famous-koala-370.mypinata.cloud/ipfs/\";\n\t}\n\n\t// 铸造NFT\n\tfunction mintItem(address to, string memory uri, uint96 royaltyFeeNumerator) public returns (uint256) {\n\t\ttokenIdCounter.increment();\n\t\tuint256 tokenId = tokenIdCounter.current();\n\t\t_safeMint(to, tokenId);\n\t\t_setTokenURI(tokenId, uri);\n\n        // 设置版税信息, 版税比例royaltyFeeNumerator：250 for 2.5%, 500 for 5%, 1000 for 10%\n        _setTokenRoyalty(tokenId, to, royaltyFeeNumerator);\n\n        // 保存铸造者信息\n\t\tmintedBy[tokenId] = to;\n\n\t\t// 完整的 tokenURI\n        string memory completeTokenURI = string(abi.encodePacked(_baseURI(), uri));\n\n\t\t// 初始化NFTItem信息\n        nftItems[tokenId] = NFTItem({\n            tokenId: tokenId,\n            price: 0,\n            owner: payable(to),\n            isListed: false,\n            tokenUri: completeTokenURI\n        });\n        \n\t\treturn tokenId;\n\t}\n\n    // 批量铸造NFT\n    function batchMintItems(\n        address to,\n        string[] memory uris,\n        uint96 royaltyFeeNumerator\n    ) public returns (uint256[] memory) {\n        require(uris.length > 0, \"Must provide at least one URI\");\n        require(uris.length <= 50, \"Maximum 50 NFTs can be minted at a time\");\n\n        uint256[] memory tokenIds = new uint256[](uris.length);\n\n        for (uint256 i = 0; i < uris.length; i++) {\n            tokenIds[i] = mintItem(to, uris[i], royaltyFeeNumerator);\n        }\n\n        return tokenIds;\n    }\n\n    // 获取NFT的铸造者\n\tfunction getMintedBy(uint256 tokenId) public view returns (address) {\n\t\treturn mintedBy[tokenId];\n\t}\n\n\t// 上架NFT\n    function listItem(uint256 tokenId, uint256 price) public payable nonReentrant {\n        require(msg.value == listingFee, \"Must pay listing fee\");\n        require(ownerOf(tokenId) == msg.sender, \"You are not the owner\");\n        require(price > 0, \"Price must be greater than zero\");\n        require(!isFractionalized[tokenId], \"Cannot list fractionalized NFT\");\n\n\t\t// 将上架费用转给合约拥有者\n        payable(owner()).transfer(listingFee);\n\n        // 转移NFT到合约，并授权合约可以转移NFT\n        // _transfer(msg.sender, address(this), tokenId);\n        approve(address(this), tokenId);\n        // setApprovalForAll(address(this), true);\n        this.transferFrom(msg.sender, address(this), tokenId);\n\n        // 更新NFT信息\n        nftItems[tokenId].isListed = true;\n        nftItems[tokenId].price = price;\n        nftItems[tokenId].owner = payable(msg.sender);\n\t\tnftItems[tokenId].tokenUri = tokenURI(tokenId);\n\n        emit NftListed(tokenId, msg.sender, price);\n    }\n\n    // 下架NFT\n    function delistItem(uint256 tokenId) public nonReentrant {\n        NFTItem storage item = nftItems[tokenId];\n\n        require(item.isListed, \"NFT is not listed\");\n        require(item.owner == msg.sender, \"You are not the owner\");\n\n        // 更新NFT信息\n        item.isListed = false;\n        item.price = 0;\n\n        // 将NFT转回给持有者\n        this.transferFrom(address(this), msg.sender, tokenId);\n        \n        emit NftDelisted(tokenId, msg.sender);\n    }\n\n    // 购买NFT\n    function buyItem(uint256 tokenId) public payable nonReentrant {\n        NFTItem storage item = nftItems[tokenId];\n        require(item.isListed, \"NFT is not listed\");\n        require(msg.value == item.price, \"Incorrect price\");\n\n        item.isListed = false;\n\n        uint256 royaltyAmount = 0;\n        address royaltyReceiver;\n\n        // 获取版税接受者地址\n        (royaltyReceiver, ) = royaltyInfo(tokenId, msg.value);\n\n        // 如果当前卖家是铸造者，则不收取版税\n        if (item.owner != royaltyReceiver) {\n            (royaltyReceiver, royaltyAmount) = royaltyInfo(tokenId, msg.value);\n            if (royaltyAmount > 0) {\n                (bool royaltySuccess, ) = payable(royaltyReceiver).call{value: royaltyAmount}(\"\");\n                require(royaltySuccess, \"Transfer to royalty receiver failed\");\n            }\n        }\n\t\t\n        // 记录卖家的地址和价格用以事件记录\n        address payable seller = item.owner;\n        uint256 price = item.price;\n\n\t\t// 更新NFT信息\n        item.owner = payable(msg.sender);\n        item.price = 0;\n\n        // 计算卖家应得金额并转账\n        uint256 sellerAmount = msg.value - royaltyAmount;\n\t\t(bool success, ) = seller.call{value: sellerAmount}(\"\");\n        require(success, \"Transfer to seller failed\");\n\n        // 将NFT转移给买家,调用 transferFrom 函数不为\"from\"账户\n        // _transfer(address(this), msg.sender, tokenId);\n        this.transferFrom(address(this), msg.sender, tokenId);\n\n        emit NftBought(tokenId, seller, msg.sender, price, royaltyReceiver, royaltyAmount);\n    }\n\n\t// 获取所有上架的NFT\n    function getAllListedItems() public view returns (NFTItem[] memory) {\n        uint256 totalItems = tokenIdCounter.current();\n        uint256 listedItemCount = 0;\n        uint256 currentIndex = 0;\n\n        // 统计当前上架的NFT数量\n        for (uint256 i = 1; i <= totalItems; i++) {\n            if (nftItems[i].isListed) {\n                listedItemCount += 1;\n            }\n        }\n\n        // 创建一个新数组来存储上架的NFT\n        NFTItem[] memory items = new NFTItem[](listedItemCount);\n\n        // 填充架的NFT\n        for (uint256 i = 1; i <= totalItems; i++) {\n            if (nftItems[i].isListed) {\n                items[currentIndex] = nftItems[i];\n                currentIndex += 1;\n            }\n        }\n\n        return items;\n    }\n\t\n\t// 根据 tokenId 获取对应的NFT信息\n    function getNFTItemByTokenId(uint256 tokenId) public view returns (NFTItem memory) {\n        require(_exists(tokenId), \"NFT does not exist\");\n        return nftItems[tokenId];\n    }\n\n    // 合约拥有者提取合约中的上架费用\n    function withdrawFees() public payable onlyOwner nonReentrant {\n        payable(owner()).transfer(address(this).balance);\n    }\n    \n    // 检查NFT是否已经碎片化\n    function isNFTFractionalized(uint256 tokenId) public view returns (bool) {\n        return isFractionalized[tokenId];\n    }\n\n    // 碎片化NFT\n    function fractionalizeNFT(uint256 tokenId, uint256 total) public {\n        require(ownerOf(tokenId) == msg.sender, \"Not the owner of this NFT\");\n        require(!isFractionalized[tokenId], \"NFT already fractionalized\");\n        require(total > 0, \"Total fractions must be greater than zero\");\n        require(!nftItems[tokenId].isListed, \"NFT is currently listed, must delist before fractionalizing\");\n\n        isFractionalized[tokenId] = true;\n        totalFractions[tokenId] = total;\n        fractions[tokenId][msg.sender] = Fraction({\n            amount: total,\n            isForSale: false,\n            price: 0\n        }); // 初始持有者拥有全部碎片\n        fractionOwners[tokenId].push(msg.sender);\n\n        emit NFTFractionalized(tokenId, total);\n    }\n\n    // 获取账户的碎片数量\n    function getFractionsByAddress(address account) public view returns (uint256[] memory, Fraction[] memory) {\n        uint256 totalTokens = tokenIdCounter.current();\n        uint256 count = 0;\n\n        // 先统计 account 持有的碎片的数量\n        for (uint256 tokenId = 1; tokenId <= totalTokens; tokenId++) {\n            if (fractions[tokenId][account].amount > 0) {\n                count++;\n            }\n        }\n\n        // 创建数组以存储结果\n        uint256[] memory tokenIds = new uint256[](count);\n        Fraction[] memory fractionss = new Fraction[](count);\n\n        // 填充结果\n        uint256 index = 0;\n        for (uint256 tokenId = 1; tokenId <= totalTokens; tokenId++) {\n            if (fractions[tokenId][account].amount > 0) {\n                tokenIds[index] = tokenId;\n                fractionss[index] = fractions[tokenId][account];\n                index++;\n            }\n        }\n\n        return (tokenIds, fractionss);\n    }\n\n    // 设置碎片出售\n    function setFractionForSale(uint256 tokenId, uint256 price) public {\n        require(isFractionalized[tokenId], \"NFT is not fractionalized\");\n        Fraction storage userFraction = fractions[tokenId][msg.sender];\n        require(userFraction.amount > 0, \"You do not own any fractions\");\n        require(price > 0, \"Price must be greater than zero\");\n    \n        userFraction.isForSale = true;\n        userFraction.price = price;\n    \n        emit FractionForSale(tokenId, msg.sender, price);\n    }\n\n    // 取消碎片出售\n    function cancelFractionSale(uint256 tokenId) public {\n        require(isFractionalized[tokenId], \"NFT is not fractionalized\");\n        Fraction storage userFraction = fractions[tokenId][msg.sender];\n        require(userFraction.isForSale, \"Fraction is not for sale\");\n        require(userFraction.amount > 0, \"You do not own any fractions\");\n    \n        userFraction.isForSale = false;\n        userFraction.price = 0;\n    \n        emit FractionSaleCancelled(tokenId, msg.sender);\n    }\n\n    // 购买碎片\n    function buyFraction(uint256 tokenId, address seller, uint256 amount) public payable nonReentrant {\n        require(isFractionalized[tokenId], \"NFT is not fractionalized\");\n        Fraction storage sellerFraction = fractions[tokenId][seller];\n        require(sellerFraction.isForSale, \"Fraction is not for sale\");\n        require(sellerFraction.amount >= amount, \"Insufficient fractions for sale\");\n        require(msg.value == sellerFraction.price * amount, \"Incorrect payment amount\");\n\n        // 保存当前价格用于事件发送\n        uint256 pricePerFraction = sellerFraction.price;\n    \n        // 更新碎片持有量\n        sellerFraction.amount -= amount;\n        if (sellerFraction.amount == 0) {\n            sellerFraction.isForSale = false;\n            sellerFraction.price = 0;\n        }\n    \n        fractions[tokenId][msg.sender].amount += amount;\n    \n        // 如果买家是首次购买该 tokenId 的碎片，添加到 fractionOwners\n        if (fractions[tokenId][msg.sender].amount == amount) {\n            fractionOwners[tokenId].push(msg.sender);\n        }\n    \n        // 转移资金给卖家\n        (bool success, ) = payable(seller).call{value: msg.value}(\"\");\n        require(success, \"Transfer to seller failed\");\n    \n        emit FractionBought(tokenId, msg.sender, seller, amount, pricePerFraction);\n    }\n\n    // 转赠NFT碎片\n    function transferFraction(uint256 tokenId, address to, uint256 amount) public {\n        require(isFractionalized[tokenId], \"NFT is not fractionalized\");\n        Fraction storage senderFraction = fractions[tokenId][msg.sender];\n        require(senderFraction.amount >= amount, \"Insufficient fractions\");\n        require(!senderFraction.isForSale, \"Cannot transfer fractions that are for sale\");\n\n        senderFraction.amount -= amount;\n        // 如果出售状态被部分或全部转移\n        if (senderFraction.amount == 0) {\n            senderFraction.isForSale = false;\n            senderFraction.price = 0;\n        }\n\n        fractions[tokenId][to].amount += amount;\n\n        // 如果接收者是首次接收该 tokenId 的碎片，添加到 fractionOwners\n        if (fractions[tokenId][to].amount == amount) {\n            fractionOwners[tokenId].push(to);\n        }\n\n        // emit FractionTransferred(tokenId, msg.sender, to, amount);\n    }\n\n    // 集齐所有碎片召唤神龙\n    function redeemNFT(uint256 tokenId) public {\n        require(isFractionalized[tokenId], \"NFT is not fractionalized\");\n        require(fractions[tokenId][msg.sender].amount == totalFractions[tokenId], \"Must own all fractions\");\n    \n        // 取消碎片化\n        isFractionalized[tokenId] = false;\n        totalFractions[tokenId] = 0;\n        delete fractions[tokenId][msg.sender].isForSale;\n        delete fractions[tokenId][msg.sender].price;\n        fractions[tokenId][msg.sender].amount = 0;\n    \n        // 清空 fractionOwners 映射\n        delete fractionOwners[tokenId];\n    \n        // 将NFT转移给持有全部碎片的用户\n        address previousOwner = ownerOf(tokenId);\n        _transfer(previousOwner, msg.sender, tokenId);\n    \n        // 更新NFTItem信息\n        nftItems[tokenId].owner = payable(msg.sender);\n        nftItems[tokenId].isListed = false; // 碎片化后通常不再上架\n    \n        emit NFTRedeemed(tokenId, msg.sender);\n    }\n\n    // 返回碎片总量\n    function getTotalFractions(uint256 tokenId) public view returns (uint256) {\n        return totalFractions[tokenId];\n    }\n\n    // 获取所有上架的碎片\n    function getAllFractionsForSale() public view returns (uint256[] memory, address[] memory, Fraction[] memory) {\n        uint256 totalTokens = tokenIdCounter.current();\n        uint256 count = 0;\n\n        // 统计所有上架的碎片数量\n        for (uint256 tokenId = 1; tokenId <= totalTokens; tokenId++) {\n            if (isFractionalized[tokenId]) {\n                address[] memory ownerss = fractionOwners[tokenId];\n                for (uint256 j = 0; j < ownerss.length; j++) {\n                    address owner = ownerss[j];\n                    if (fractions[tokenId][owner].isForSale) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        // 创建数组以存储结果\n        uint256[] memory tokenIds = new uint256[](count);\n        address[] memory owners = new address[](count);\n        Fraction[] memory fractionsForSale = new Fraction[](count);\n\n        // 填充结果\n        uint256 index = 0;\n        for (uint256 tokenId = 1; tokenId <= totalTokens; tokenId++) {\n            if (isFractionalized[tokenId]) {\n                address[] memory ownersList = fractionOwners[tokenId];\n                for (uint256 j = 0; j < ownersList.length; j++) {\n                    address owner = ownersList[j];\n                    if (fractions[tokenId][owner].isForSale) {\n                        tokenIds[index] = tokenId;\n                        owners[index] = owner;\n                        fractionsForSale[index] = fractions[tokenId][owner];\n                        index++;\n                    }\n                }\n            }\n        }\n\n        return (tokenIds, owners, fractionsForSale);\n    }\n\n    // 设置 NFT 的租赁用户和过期时间\n    function setUser(uint256 tokenId, address user, uint64 expires) public override {\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC4907: caller is not owner nor approved\");\n        UserInfo storage info = _users[tokenId];\n        info.user = user;\n        info.expires = expires;\n        emit UpdateUser(tokenId, user, expires);\n    }\n\n    // 获取 NFT 的当前租赁用户\n    function userOf(uint256 tokenId) public view override returns(address) {\n        if(uint256(_users[tokenId].expires) >= block.timestamp){\n            return _users[tokenId].user;\n        } else{\n            return address(0);\n        }\n    }\n\n    // 获取 NFT 的租赁用户过期时间\n    function userExpires(uint256 tokenId) public view override returns(uint256) {\n        return _users[tokenId].expires;\n    }\n\n    // 检查是否可以领取忠诚度奖励\n    function checkClaimLoyaltyReward(uint256 tokenId) public view returns (bool) {\n        require(_exists(tokenId), \"NFT does not exist\");\n        require(ownerOf(tokenId) == msg.sender, \"Not the owner\");\n        \n        LoyaltyInfo memory loyalty = nftLoyalty[tokenId];\n        \n        // 使用 lastTimeStamp 替代 block.timestamp\n        // 计算持有时间\n        uint256 holdingTime = block.timestamp - loyalty.holdingStartTime;\n        // uint256 holdingTime = lastTimeStamp - loyalty.holdingStartTime;\n        \n        // 计算自上次领取奖励后经过的时间\n        uint256 timeSinceLastReward = block.timestamp - loyalty.lastRewardTime;\n        // uint256 timeSinceLastReward = lastTimeStamp - loyalty.lastRewardTime;\n        \n        // // 添加日志事件来帮助调试\n        // console.log(\"Current timestamp:\", block.timestamp);\n        // console.log(\"Current timestamp:\", lastTimeStamp);\n        // console.log(\"Holding start time:\", loyalty.holdingStartTime);\n        // console.log(\"Holding time:\", holdingTime);\n        // console.log(\"Last reward time:\", loyalty.lastRewardTime);\n        // console.log(\"Time since last reward:\", timeSinceLastReward);\n        // console.log(\"Loyalty period:\", LOYALTY_PERIOD);\n        \n        // 需要持有超过忠诚度周期，且距离上次领取超过忠诚度周期\n        return holdingTime >= LOYALTY_PERIOD && timeSinceLastReward >= LOYALTY_PERIOD;\n    }\n\n    // 领取忠诚度奖励\n    function claimLoyaltyReward(uint256 tokenId) public nonReentrant {\n        require(checkClaimLoyaltyReward(tokenId), \"Cannot claim reward yet\");\n        require(address(this).balance >= LOYALTY_REWARD, \"Insufficient contract balance\");\n        \n        LoyaltyInfo storage loyalty = nftLoyalty[tokenId];\n        loyalty.lastRewardTime = block.timestamp;\n        \n        // 转账奖励\n        (bool success, ) = payable(msg.sender).call{value: LOYALTY_REWARD}(\"\");\n        require(success, \"Reward transfer failed\");\n        \n        emit LoyaltyRewardClaimed(tokenId, msg.sender, LOYALTY_REWARD);\n    }\n\n    // 获取NFT的忠诚度信息\n    function getLoyaltyInfo(uint256 tokenId) public view returns (\n        uint256 holdingStartTime,\n        bool rewardClaimed,\n        uint256 lastRewardTime,\n        uint256 nextRewardTime\n    ) {\n        require(_exists(tokenId), \"NFT does not exist\");\n        \n        LoyaltyInfo memory loyalty = nftLoyalty[tokenId];\n        \n        holdingStartTime = loyalty.holdingStartTime;\n        rewardClaimed = loyalty.rewardClaimed;\n        lastRewardTime = loyalty.lastRewardTime;\n        \n        // 计算下次可领取奖励的时间\n        if (lastRewardTime == 0) {\n            nextRewardTime = holdingStartTime + LOYALTY_PERIOD;\n        } else {\n            nextRewardTime = lastRewardTime + LOYALTY_PERIOD;\n        }\n    }\n\n    // 创建盲盒（只有合约拥有者可以调用）\n    function createMysteryBox(\n        uint256 _price, \n        string[] memory _possibleURIs,\n        uint96 _royaltyFee\n    ) public onlyOwner {\n        require(_possibleURIs.length > 0, \"Must provide URIs\");\n        require(_price > 0, \"Price must be greater than 0\");\n        \n        // 存储每个 URI\n        for(uint256 i = 0; i < _possibleURIs.length; i++) {\n            mysteryBoxURIs[i] = _possibleURIs[i];\n        }\n        \n        mysteryBox = MysteryBox({\n            price: _price,\n            isActive: true,\n            royaltyFee: _royaltyFee,\n            uriCount: _possibleURIs.length\n        });\n\n        emit MysteryBoxCreated(_price, _possibleURIs.length);\n    }\n\n    // 设置盲盒状态\n    function setMysteryBoxStatus(bool _isActive) public onlyOwner {\n        mysteryBox.isActive = _isActive;\n        emit MysteryBoxStatusChanged(_isActive);\n    }\n\n    // 更新盲盒价格\n    function updateMysteryBoxPrice(uint256 _newPrice) public onlyOwner {\n        require(_newPrice > 0, \"Price must be greater than 0\");\n        mysteryBox.price = _newPrice;\n    }\n\n    // 添加新的 URI 到盲盒\n    function addURIToMysteryBox(string memory _uri) public onlyOwner {\n        mysteryBoxURIs[mysteryBox.uriCount] = _uri;\n        mysteryBox.uriCount++;\n    }\n\n    // 获取指定索引的 URI\n    function getMysteryBoxURI(uint256 index) public view returns (string memory) {\n        require(index < mysteryBox.uriCount, \"URI index out of bounds\");\n        return mysteryBoxURIs[index];\n    }\n\n    // 获取盲盒信息\n    function getMysteryBoxInfo() public view returns (\n        uint256 price,\n        bool isActive,\n        uint256 totalURIs\n    ) {\n        return (\n            mysteryBox.price,\n            mysteryBox.isActive,\n            mysteryBox.uriCount\n        );\n    }\n\n    // 生成伪随机数\n    function _random() private returns (uint256) {\n        nonce++;\n        return uint256(keccak256(abi.encodePacked(\n            block.timestamp,\n            block.difficulty,\n            msg.sender,\n            nonce\n        )));\n    }\n\n    // 购买盲盒\n    function purchaseMysteryBox() public payable nonReentrant {\n        require(mysteryBox.isActive, \"Mystery box is not active\");\n        require(msg.value == mysteryBox.price, \"Incorrect payment amount\");\n        require(mysteryBox.uriCount > 0, \"No NFTs available in mystery box\");\n\n        // 生成随机索引\n        uint256 randomIndex = _random() % mysteryBox.uriCount;\n        string memory selectedURI = mysteryBoxURIs[randomIndex];\n\n        // 铸造 NFT\n        uint256 newTokenId = mintItem(msg.sender, selectedURI, mysteryBox.royaltyFee);\n\n        // 从可能的 URI 列表中移除已使用的 URI（可选）\n        // 如果想让每个 URI 只能使用一次，取消下面的注释\n        /*\n        mysteryBox.possibleURIs[randomIndex] = mysteryBox.possibleURIs[mysteryBox.possibleURIs.length - 1];\n        mysteryBox.possibleURIs.pop();\n        */\n\n        emit MysteryBoxPurchased(msg.sender, newTokenId, selectedURI);\n    }\n\n    // 设置默克尔树根（仅管理员可调用）\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\n        merkleRoot = _merkleRoot;\n        emit MerkleRootSet(_merkleRoot);\n    }\n\n    // 验证地址和tokenId是否在空投白名单中\n    function isWhitelisted(address account, uint256 tokenId, bytes32[] calldata proof) public view returns (bool) {\n        bytes32 leaf = keccak256(abi.encodePacked(account, tokenId));\n        return MerkleProof.verify(proof, merkleRoot, leaf);\n    }\n\n    // 领取空投\n    function claimAirdrop(\n        uint256 tokenId,\n        bytes32[] calldata proof\n    ) public nonReentrant {\n        require(merkleRoot != bytes32(0), \"Merkle root not set\");\n        require(!hasClaimed[msg.sender], \"Already claimed\");\n        require(\n            isWhitelisted(msg.sender, tokenId, proof),\n            \"Not in whitelist or invalid proof\"\n        );\n\n        // 标记为已领取\n        hasClaimed[msg.sender] = true;\n\n        // 转移 NFT\n        address owner = ownerOf(tokenId);\n        _transfer(owner, msg.sender, tokenId);\n\n        // 更新 NFT 信息\n        nftItems[tokenId].owner = payable(msg.sender);\n        nftItems[tokenId].isListed = false;\n\n        emit AirdropClaimed(msg.sender, tokenId);\n    }\n\n    // Cross-chain functionality\n    \n    /**\n     * @dev Set XCM Bridge contract address (only owner)\n     * @param _xcmBridge XCM Bridge contract address\n     */\n    function setXCMBridge(address _xcmBridge) external onlyOwner {\n        require(_xcmBridge != address(0), \"Invalid XCM Bridge address\");\n        xcmBridge = _xcmBridge;\n    }\n\n    /**\n     * @dev Lock NFT for cross-chain transfer (only XCM Bridge)\n     * @param tokenId Token ID to lock\n     * @param messageHash XCM message hash\n     */\n    function lockForCrossChain(uint256 tokenId, bytes32 messageHash) external {\n        require(msg.sender == xcmBridge, \"Only XCM Bridge can lock NFTs\");\n        require(_exists(tokenId), \"Token does not exist\");\n        require(!isLockedForCrossChain[tokenId], \"NFT already locked\");\n\n        isLockedForCrossChain[tokenId] = true;\n        crossChainMessages[messageHash] = tokenId;\n\n        emit NFTLockedForCrossChain(tokenId, ownerOf(tokenId), messageHash);\n    }\n\n    /**\n     * @dev Unlock NFT from cross-chain transfer (only XCM Bridge)\n     * @param tokenId Token ID to unlock\n     * @param messageHash XCM message hash\n     */\n    function unlockFromCrossChain(uint256 tokenId, bytes32 messageHash) external {\n        require(msg.sender == xcmBridge, \"Only XCM Bridge can unlock NFTs\");\n        require(_exists(tokenId), \"Token does not exist\");\n        require(isLockedForCrossChain[tokenId], \"NFT not locked\");\n        require(crossChainMessages[messageHash] == tokenId, \"Invalid message hash\");\n\n        isLockedForCrossChain[tokenId] = false;\n        delete crossChainMessages[messageHash];\n\n        emit NFTUnlockedFromCrossChain(tokenId, ownerOf(tokenId), messageHash);\n    }\n\n    /**\n     * @dev Check if NFT is locked for cross-chain transfer\n     * @param tokenId Token ID to check\n     * @return bool Whether the NFT is locked\n     */\n    function isNFTLockedForCrossChain(uint256 tokenId) external view returns (bool) {\n        return isLockedForCrossChain[tokenId];\n    }\n\n    /**\n     * @dev Get token ID by XCM message hash\n     * @param messageHash XCM message hash\n     * @return uint256 Token ID\n     */\n    function getTokenIdByMessageHash(bytes32 messageHash) external view returns (uint256) {\n        return crossChainMessages[messageHash];\n    }\n\n    /**\n     * @dev Override transfer functions to prevent transfer of locked NFTs\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 quantity\n    ) internal override(ERC721, ERC721Enumerable) {\n        // Prevent transfer of locked NFTs (except for XCM Bridge)\n        if (from != address(0) && to != address(0) && msg.sender != xcmBridge) {\n            require(!isLockedForCrossChain[tokenId], \"NFT is locked for cross-chain transfer\");\n        }\n\n        super._beforeTokenTransfer(from, to, tokenId, quantity); // 调用父类的函数\n\n        // 如果是新的转账（不是铸造），则重置忠诚度信息\n        // holdingStartTime: lastTimeStamp,\n        if (from != address(0) && to != address(0)) {\n            nftLoyalty[tokenId] = LoyaltyInfo({\n                holdingStartTime: block.timestamp,\n                rewardClaimed: false,\n                lastRewardTime: 0\n            });\n        }\n        // 如果是铸造，则初始化忠诚度信息\n        // holdingStartTime: lastTimeStamp,\n        else if (from == address(0)) {\n            nftLoyalty[tokenId] = LoyaltyInfo({\n                holdingStartTime: block.timestamp,\n                rewardClaimed: false,\n                lastRewardTime: 0\n            });\n        }\n\n        // 如果转移的 NFT 有租赁用户，则删除租赁用户信息\n        if (from != to && _users[tokenId].user != address(0)) {\n            delete _users[tokenId];\n        }\n    }\n\n\tfunction _burn(\n\t\tuint256 tokenId\n\t) internal override(ERC721, ERC721URIStorage, ERC721Royalty) {\n\t\tsuper._burn(tokenId); // 调用父类的销毁函数\n\t}\n\n\tfunction tokenURI(\n\t\tuint256 tokenId\n\t) public view override(ERC721, ERC721URIStorage) returns (string memory) {\n\t\treturn super.tokenURI(tokenId); // 获取 token 的 URI\n\t}\n\n\tfunction supportsInterface(\n\t\tbytes4 interfaceId\n\t)\n\t\tpublic\n\t\tview\n\t\toverride(ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Royalty)\n\t\treturns (bool)\n\t{\n\t\treturn super.supportsInterface(interfaceId); // 检查接口支持\n\t}\n\n\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}