// ============================================================================
// scripts/convert-mnemonics-to-evm.js - Â∞ÜÂä©ËÆ∞ËØçËΩ¨Êç¢‰∏∫ EVM ÁßÅÈí•ÂíåÂú∞ÂùÄ
// ============================================================================
const { ethers } = require('ethers');

async function main() {
  console.log("üîÑ Âä©ËÆ∞ËØçËΩ¨ EVM ÁßÅÈí•Â∑•ÂÖ∑");
  console.log("=" + "=".repeat(50));
  
  // Âä©ËÆ∞ËØçÊï∞ÊçÆ
  const accounts = [
    {
      name: "Life++ Deployer",
      mnemonic: "gym prize december digital hover churn exile pledge path hub safe dolphin",
      substrateAddress: "5EEe7y4NAUnAnnbQApDBnBuaFeEvuFDe9EexmwXqwdNZjGnA"
    },
    {
      name: "Life++ Agent", 
      mnemonic: "alarm clerk hungry shield collect tattoo ten devote truth chaos zebra together",
      substrateAddress: "5G4mF1uQ3R4Sf12XwH5Bu7frQUgAkKwPmyGxMrzAFWu7MYCb"
    },
    {
      name: "Life++ Validator",
      mnemonic: "shrimp muscle aunt escape dirt ancient shove reopen orange prefer another tail", 
      substrateAddress: "5CvkxaxqUEeS56o6uWXSomMqQ1dwi55oLoDW9VSz1dnQcuaP"
    }
  ];
  
  const evmData = {};
  
  console.log("\nüìã ËΩ¨Êç¢ÁªìÊûú:");
  console.log("=" + "=".repeat(50));
  
  for (const account of accounts) {
    try {
      const wallet = ethers.Wallet.fromPhrase(account.mnemonic);
      
      console.log(`\nüîë ${account.name}:`);
      console.log(`   Substrate Âú∞ÂùÄ: ${account.substrateAddress}`);
      console.log(`   EVM Âú∞ÂùÄ: ${wallet.address}`);
      console.log(`   EVM ÁßÅÈí•: ${wallet.privateKey}`);
      
      // Â≠òÂÇ®Êï∞ÊçÆ
      evmData[account.name.toLowerCase().replace('life++ ', '').replace(' ', '_')] = {
        address: wallet.address,
        privateKey: wallet.privateKey
      };
      
    } catch (error) {
      console.error(`‚ùå ${account.name} ËΩ¨Êç¢Â§±Ë¥•:`, error.message);
    }
  }
  
  console.log("\n" + "=".repeat(50));
  console.log("üìù .env.passetHub ÈÖçÁΩÆÂÜÖÂÆπ:");
  console.log("=" + "=".repeat(50));
  
  console.log(`# ‰ΩøÁî® Deployer Ë¥¶Êà∑‰Ωú‰∏∫‰∏ªË¶ÅÁßÅÈí•`);
  console.log(`PRIVATE_KEY=${evmData.deployer?.privateKey || 'ËØ∑Â°´ÂÖ•DeployerÁöÑEVMÁßÅÈí•'}`);
  console.log(`VALIDATOR_PRIVATE_KEY=${evmData.validator?.privateKey || 'ËØ∑Â°´ÂÖ•ValidatorÁöÑEVMÁßÅÈí•'}`);
  console.log(`AGENT_PRIVATE_KEY=${evmData.agent?.privateKey || 'ËØ∑Â°´ÂÖ•AgentÁöÑEVMÁßÅÈí•'}`);
  console.log(``);
  console.log(`# Êõ¥Êñ∞ÂØπÂ∫îÁöÑ EVM Âú∞ÂùÄ`);
  console.log(`DEPLOYER_ADDRESS=${evmData.deployer?.address || 'ËØ∑Â°´ÂÖ•DeployerÁöÑEVMÂú∞ÂùÄ'}`);
  console.log(`AGENT_ADDRESS=${evmData.agent?.address || 'ËØ∑Â°´ÂÖ•AgentÁöÑEVMÂú∞ÂùÄ'}`);
  console.log(`VALIDATOR_ADDRESS=${evmData.validator?.address || 'ËØ∑Â°´ÂÖ•ValidatorÁöÑEVMÂú∞ÂùÄ'}`);
  
  console.log("\n" + "=".repeat(50));
  console.log("üéØ ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú:");
  console.log("=" + "=".repeat(50));
  console.log("1. Â∞Ü‰∏äËø∞ÈÖçÁΩÆÂ§çÂà∂Âà∞ .env.passetHub Êñá‰ª∂‰∏≠");
  console.log("2. ‰∏∫Ëøô‰∫õ EVM Âú∞ÂùÄËé∑Âèñ PassetHub ÊµãËØïÁΩë ETH");
  console.log("3. ËøêË°å: source .env.passetHub");
  console.log("4. ËøêË°å: npm run hackathon:test");
  
  return evmData;
}

main()
  .then((data) => {
    console.log("\n‚úÖ ËΩ¨Êç¢ÂÆåÊàêÔºÅ");
    process.exit(0);
  })
  .catch((error) => {
    console.error("\n‚ùå ËΩ¨Êç¢Â§±Ë¥•:", error);
    process.exit(1);
  });
